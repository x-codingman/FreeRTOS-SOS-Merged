
FreeRTOS-2-S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ac  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000060  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000068  20000000  000021ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000f1c  20000068  00002214  00020068  2**2
                  ALLOC
  4 .heap         00000204  20000f84  00003130  00020068  2**0
                  ALLOC
  5 .stack        00000400  20001188  00003334  00020068  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d208  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000369c  00000000  00000000  000512ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a328  00000000  00000000  00054949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a48  00000000  00000000  0005ec71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e78  00000000  00000000  0005f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001d13c  00000000  00000000  00060531  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f834  00000000  00000000  0007d66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009185f  00000000  00000000  0008cea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001f68  00000000  00000000  0011e700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 15 00 20 dd 02 00 00 db 02 00 00 db 02 00 00     ... ............
	...
      2c:	f1 0b 00 00 00 00 00 00 00 00 00 00 db 02 00 00     ................
      3c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      4c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      5c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      6c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      7c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      8c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      9c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      ac:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      bc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      cc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      dc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      ec:	db 02 00 00 db 02 00 00                             ........

000000f4 <__acle_se_SecureContext_Init>:
secureportNON_SECURE_CALLABLE void SecureContext_Init( void )
{
	uint32_t ulIPSR;

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
      f4:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
      f8:	b13b      	cbz	r3, 10a <__acle_se_SecureContext_Init+0x16>
	{
		/* No stack for thread mode until a task's context is loaded. */
		secureportSET_PSPLIM( securecontextNO_STACK );
      fa:	2300      	movs	r3, #0
      fc:	f383 880b 	msr	PSPLIM, r3
		secureportSET_PSP( securecontextNO_STACK );
     100:	f383 8809 	msr	PSP, r3
			secureportSET_CONTROL( securecontextCONTROL_VALUE_UNPRIVILEGED );
		}
		#else /* configENABLE_MPU */
		{
			/* Configure thread mode to use PSP and to be privileged.. */
			secureportSET_CONTROL( securecontextCONTROL_VALUE_PRIVILEGED );
     104:	3302      	adds	r3, #2
     106:	f383 8814 	msr	CONTROL, r3
		}
		#endif /* configENABLE_MPU */
	}
}
     10a:	2000      	movs	r0, #0
     10c:	0001      	movs	r1, r0
     10e:	0002      	movs	r2, r0
     110:	0003      	movs	r3, r0
     112:	4684      	mov	ip, r0
     114:	f38e 8800 	msr	CPSR_f, lr
     118:	4774      	bxns	lr

0000011a <__acle_se_SecureContext_AllocateContext>:
#if( configENABLE_MPU == 1 )
	secureportNON_SECURE_CALLABLE SecureContextHandle_t SecureContext_AllocateContext( uint32_t ulSecureStackSize, uint32_t ulIsTaskPrivileged )
#else /* configENABLE_MPU */
	secureportNON_SECURE_CALLABLE SecureContextHandle_t SecureContext_AllocateContext( uint32_t ulSecureStackSize )
#endif /* configENABLE_MPU */
{
     11a:	b570      	push	{r4, r5, r6, lr}
     11c:	0005      	movs	r5, r0
	#if( configENABLE_MPU == 1 )
		uint32_t *pulCurrentStackPointer = NULL;
	#endif /* configENABLE_MPU */

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
     11e:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
     122:	b32b      	cbz	r3, 170 <__acle_se_SecureContext_AllocateContext+0x56>
	{
		/* Allocate the context structure. */
		xSecureContextHandle = ( SecureContextHandle_t ) pvPortMalloc( sizeof( SecureContext_t ) );
     124:	200c      	movs	r0, #12
     126:	f640 5367 	movw	r3, #3431	; 0xd67
     12a:	f2c0 0300 	movt	r3, #0
     12e:	4798      	blx	r3
     130:	0004      	movs	r4, r0

		if( xSecureContextHandle != NULL )
     132:	b150      	cbz	r0, 14a <__acle_se_SecureContext_AllocateContext+0x30>
		{
			/* Allocate the stack space. */
			pucStackMemory = pvPortMalloc( ulSecureStackSize );
     134:	0028      	movs	r0, r5
     136:	f640 5367 	movw	r3, #3431	; 0xd67
     13a:	f2c0 0300 	movt	r3, #0
     13e:	4798      	blx	r3

			if( pucStackMemory != NULL )
     140:	b170      	cbz	r0, 160 <__acle_se_SecureContext_AllocateContext+0x46>
				 * location. Note that this location is next to the last
				 * allocated byte because the hardware decrements the stack
				 * pointer before writing i.e. if stack pointer is 0x2, a push
				 * operation will decrement the stack pointer to 0x1 and then
				 * write at 0x1. */
				xSecureContextHandle->pucStackStart = pucStackMemory + ulSecureStackSize;
     142:	1945      	adds	r5, r0, r5
     144:	60a5      	str	r5, [r4, #8]

				/* The stack cannot go beyond this location. This value is
				 * programmed in the PSPLIM register on context switch.*/
				xSecureContextHandle->pucStackLimit = pucStackMemory;
     146:	6060      	str	r0, [r4, #4]
				}
				#else /* configENABLE_MPU */
				{
					/* Current SP is set to the starting of the stack. This
					 * value programmed in the PSP register on context switch. */
					xSecureContextHandle->pucCurrentStackPointer = xSecureContextHandle->pucStackStart;
     148:	6025      	str	r5, [r4, #0]
			}
		}
	}

	return xSecureContextHandle;
}
     14a:	0020      	movs	r0, r4
     14c:	0001      	movs	r1, r0
     14e:	0002      	movs	r2, r0
     150:	0003      	movs	r3, r0
     152:	4684      	mov	ip, r0
     154:	bc70      	pop	{r4, r5, r6}
     156:	bc02      	pop	{r1}
     158:	4686      	mov	lr, r0
     15a:	f381 8800 	msr	CPSR_f, r1
     15e:	470c      	bxns	r1
				vPortFree( xSecureContextHandle );
     160:	0020      	movs	r0, r4
     162:	f640 63ad 	movw	r3, #3757	; 0xead
     166:	f2c0 0300 	movt	r3, #0
     16a:	4798      	blx	r3
				xSecureContextHandle = NULL;
     16c:	2400      	movs	r4, #0
     16e:	e7ec      	b.n	14a <__acle_se_SecureContext_AllocateContext+0x30>
	SecureContextHandle_t xSecureContextHandle = NULL;
     170:	2400      	movs	r4, #0
	return xSecureContextHandle;
     172:	e7ea      	b.n	14a <__acle_se_SecureContext_AllocateContext+0x30>

00000174 <__acle_se_SecureContext_FreeContext>:
/*-----------------------------------------------------------*/

secureportNON_SECURE_CALLABLE void SecureContext_FreeContext( SecureContextHandle_t xSecureContextHandle )
{
     174:	b570      	push	{r4, r5, r6, lr}
     176:	0005      	movs	r5, r0
	uint32_t ulIPSR;

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
     178:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
     17c:	b143      	cbz	r3, 190 <__acle_se_SecureContext_FreeContext+0x1c>
	{
		/* Ensure that valid parameters are passed. */
		secureportASSERT( xSecureContextHandle != NULL );
     17e:	b190      	cbz	r0, 1a6 <__acle_se_SecureContext_FreeContext+0x32>

		/* Free the stack space. */
		vPortFree( xSecureContextHandle->pucStackLimit );
     180:	6840      	ldr	r0, [r0, #4]
     182:	f640 64ad 	movw	r4, #3757	; 0xead
     186:	f2c0 0400 	movt	r4, #0
     18a:	47a0      	blx	r4

		/* Free the context itself. */
		vPortFree( xSecureContextHandle );
     18c:	0028      	movs	r0, r5
     18e:	47a0      	blx	r4
	}
}
     190:	2000      	movs	r0, #0
     192:	0001      	movs	r1, r0
     194:	0002      	movs	r2, r0
     196:	0003      	movs	r3, r0
     198:	4684      	mov	ip, r0
     19a:	bc70      	pop	{r4, r5, r6}
     19c:	bc01      	pop	{r0}
     19e:	4686      	mov	lr, r0
     1a0:	f380 8800 	msr	CPSR_f, r0
     1a4:	4704      	bxns	r0
		secureportASSERT( xSecureContextHandle != NULL );
     1a6:	2301      	movs	r3, #1
     1a8:	f383 8810 	msr	PRIMASK, r3
     1ac:	f383 8890 	msr	PRIMASK_NS, r3
     1b0:	e7fe      	b.n	1b0 <__acle_se_SecureContext_FreeContext+0x3c>

000001b2 <__acle_se_nsc_invoke_command>:
/* sos kernel callable functions */
secureportNON_SECURE_CALLABLE int nsc_invoke_command(
uint32_t module_id,
uint32_t command_id,
uint32_t *operation
){
     1b2:	b500      	push	{lr}
     1b4:	b083      	sub	sp, #12
     1b6:	9201      	str	r2, [sp, #4]
	return syscall_nsc_call_module((uint32_t) module_id,(uint32_t) command_id,(SOS_Operation_t*)(&operation));
     1b8:	aa01      	add	r2, sp, #4
     1ba:	f640 4337 	movw	r3, #3127	; 0xc37
     1be:	f2c0 0300 	movt	r3, #0
     1c2:	4798      	blx	r3
}
     1c4:	b003      	add	sp, #12
     1c6:	0001      	movs	r1, r0
     1c8:	0002      	movs	r2, r0
     1ca:	0003      	movs	r3, r0
     1cc:	4684      	mov	ip, r0
     1ce:	bc02      	pop	{r1}
     1d0:	4686      	mov	lr, r0
     1d2:	f381 8800 	msr	CPSR_f, r1
     1d6:	470c      	bxns	r1

000001d8 <__acle_se_nsc_func_plus3>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_plus3(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_func_plus3(int x)
#endif
{
     1d8:	b510      	push	{r4, lr}
	return func_plus3(x);
     1da:	f640 4385 	movw	r3, #3205	; 0xc85
     1de:	f2c0 0300 	movt	r3, #0
     1e2:	4798      	blx	r3
}
     1e4:	0001      	movs	r1, r0
     1e6:	0002      	movs	r2, r0
     1e8:	0003      	movs	r3, r0
     1ea:	4684      	mov	ip, r0
     1ec:	bc10      	pop	{r4}
     1ee:	bc02      	pop	{r1}
     1f0:	4686      	mov	lr, r0
     1f2:	f381 8800 	msr	CPSR_f, r1
     1f6:	470c      	bxns	r1

000001f8 <__acle_se_nsc_func_minus2>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_minus2(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_func_minus2(int x)
#endif
{
     1f8:	b510      	push	{r4, lr}
	return func_minus2(x);
     1fa:	f640 4389 	movw	r3, #3209	; 0xc89
     1fe:	f2c0 0300 	movt	r3, #0
     202:	4798      	blx	r3
}
     204:	0001      	movs	r1, r0
     206:	0002      	movs	r2, r0
     208:	0003      	movs	r3, r0
     20a:	4684      	mov	ip, r0
     20c:	bc10      	pop	{r4}
     20e:	bc02      	pop	{r1}
     210:	4686      	mov	lr, r0
     212:	f381 8800 	msr	CPSR_f, r1
     216:	470c      	bxns	r1

00000218 <__acle_se_nsc_printf>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_minus2(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_printf(char * str)
#endif
{
     218:	b510      	push	{r4, lr}
	return printf(str);
     21a:	f241 1311 	movw	r3, #4369	; 0x1111
     21e:	f2c0 0300 	movt	r3, #0
     222:	4798      	blx	r3
     224:	0001      	movs	r1, r0
     226:	0002      	movs	r2, r0
     228:	0003      	movs	r3, r0
     22a:	4684      	mov	ip, r0
     22c:	bc10      	pop	{r4}
     22e:	bc02      	pop	{r1}
     230:	4686      	mov	lr, r0
     232:	f381 8800 	msr	CPSR_f, r1
     236:	470c      	bxns	r1

00000238 <__do_global_dtors_aux>:
     238:	b510      	push	{r4, lr}
     23a:	f240 0468 	movw	r4, #104	; 0x68
     23e:	f2c2 0400 	movt	r4, #8192	; 0x2000
     242:	7823      	ldrb	r3, [r4, #0]
     244:	b963      	cbnz	r3, 260 <__do_global_dtors_aux+0x28>
     246:	f240 0300 	movw	r3, #0
     24a:	f2c0 0300 	movt	r3, #0
     24e:	b12b      	cbz	r3, 25c <__do_global_dtors_aux+0x24>
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c0 0080 	movt	r0, #128	; 0x80
     258:	e000      	b.n	25c <__do_global_dtors_aux+0x24>
     25a:	bf00      	nop
     25c:	2301      	movs	r3, #1
     25e:	7023      	strb	r3, [r4, #0]
     260:	bd10      	pop	{r4, pc}
     262:	46c0      	nop			; (mov r8, r8)

00000264 <frame_dummy>:
     264:	f240 0300 	movw	r3, #0
     268:	f2c0 0300 	movt	r3, #0
     26c:	b510      	push	{r4, lr}
     26e:	b14b      	cbz	r3, 284 <frame_dummy+0x20>
     270:	f240 016c 	movw	r1, #108	; 0x6c
     274:	f244 0020 	movw	r0, #16416	; 0x4020
     278:	f2c2 0100 	movt	r1, #8192	; 0x2000
     27c:	f2c0 0080 	movt	r0, #128	; 0x80
     280:	e000      	b.n	284 <frame_dummy+0x20>
     282:	bf00      	nop
     284:	f244 0020 	movw	r0, #16416	; 0x4020
     288:	f2c0 0080 	movt	r0, #128	; 0x80
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	b903      	cbnz	r3, 292 <frame_dummy+0x2e>
     290:	bd10      	pop	{r4, pc}
     292:	f240 0300 	movw	r3, #0
     296:	f2c0 0300 	movt	r3, #0
     29a:	2b00      	cmp	r3, #0
     29c:	d0f8      	beq.n	290 <frame_dummy+0x2c>
     29e:	4798      	blx	r3
     2a0:	e7f6      	b.n	290 <frame_dummy+0x2c>
     2a2:	46c0      	nop			; (mov r8, r8)

000002a4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2a4:	b510      	push	{r4, lr}
	system_init();
     2a6:	f240 433d 	movw	r3, #1085	; 0x43d
     2aa:	f2c0 0300 	movt	r3, #0
     2ae:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     2b0:	f243 2300 	movw	r3, #12800	; 0x3200
     2b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     2b8:	2200      	movs	r2, #0
     2ba:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     2bc:	f24e 1300 	movw	r3, #57600	; 0xe100
     2c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
     2c4:	f240 2180 	movw	r1, #640	; 0x280
     2c8:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     2ca:	3104      	adds	r1, #4
     2cc:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
	stdio_redirect_init();
     2ce:	f241 0359 	movw	r3, #4185	; 0x1059
     2d2:	f2c0 0300 	movt	r3, #0
     2d6:	4798      	blx	r3
}
     2d8:	bd10      	pop	{r4, pc}

000002da <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2da:	e7fe      	b.n	2da <Dummy_Handler>

000002dc <Reset_Handler>:
{
     2dc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     2de:	f242 12ac 	movw	r2, #8620	; 0x21ac
     2e2:	f2c0 0200 	movt	r2, #0
     2e6:	f240 0300 	movw	r3, #0
     2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2ee:	429a      	cmp	r2, r3
     2f0:	d020      	beq.n	334 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     2f2:	001a      	movs	r2, r3
     2f4:	f240 0368 	movw	r3, #104	; 0x68
     2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2fc:	429a      	cmp	r2, r3
     2fe:	d219      	bcs.n	334 <Reset_Handler+0x58>
     300:	f240 0368 	movw	r3, #104	; 0x68
     304:	f2c2 0300 	movt	r3, #8192	; 0x2000
     308:	3303      	adds	r3, #3
     30a:	4a24      	ldr	r2, [pc, #144]	; (39c <Reset_Handler+0xc0>)
     30c:	1a9b      	subs	r3, r3, r2
     30e:	089b      	lsrs	r3, r3, #2
     310:	3301      	adds	r3, #1
     312:	009b      	lsls	r3, r3, #2
     314:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     316:	f240 0100 	movw	r1, #0
     31a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     31e:	1851      	adds	r1, r2, r1
     320:	f242 10ac 	movw	r0, #8620	; 0x21ac
     324:	f2c0 0000 	movt	r0, #0
     328:	1810      	adds	r0, r2, r0
     32a:	6800      	ldr	r0, [r0, #0]
     32c:	6008      	str	r0, [r1, #0]
     32e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     330:	429a      	cmp	r2, r3
     332:	d1f0      	bne.n	316 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     334:	f240 0268 	movw	r2, #104	; 0x68
     338:	f2c2 0200 	movt	r2, #8192	; 0x2000
     33c:	f640 7384 	movw	r3, #3972	; 0xf84
     340:	f2c2 0300 	movt	r3, #8192	; 0x2000
     344:	429a      	cmp	r2, r3
     346:	d213      	bcs.n	370 <Reset_Handler+0x94>
     348:	f240 0268 	movw	r2, #104	; 0x68
     34c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     350:	43d3      	mvns	r3, r2
     352:	f640 7184 	movw	r1, #3972	; 0xf84
     356:	f2c2 0100 	movt	r1, #8192	; 0x2000
     35a:	468c      	mov	ip, r1
     35c:	4463      	add	r3, ip
     35e:	2103      	movs	r1, #3
     360:	438b      	bics	r3, r1
     362:	3304      	adds	r3, #4
     364:	4694      	mov	ip, r2
     366:	4463      	add	r3, ip
                *pDest++ = 0;
     368:	2100      	movs	r1, #0
     36a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     36c:	4293      	cmp	r3, r2
     36e:	d1fc      	bne.n	36a <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     370:	f240 0300 	movw	r3, #0
     374:	f2c0 0300 	movt	r3, #0
     378:	227f      	movs	r2, #127	; 0x7f
     37a:	4393      	bics	r3, r2
     37c:	f64e 5200 	movw	r2, #60672	; 0xed00
     380:	f2ce 0200 	movt	r2, #57344	; 0xe000
     384:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     386:	f241 03b1 	movw	r3, #4273	; 0x10b1
     38a:	f2c0 0300 	movt	r3, #0
     38e:	4798      	blx	r3
        main();
     390:	f640 438d 	movw	r3, #3213	; 0xc8d
     394:	f2c0 0300 	movt	r3, #0
     398:	4798      	blx	r3
     39a:	e7fe      	b.n	39a <Reset_Handler+0xbe>
     39c:	20000004 	.word	0x20000004

000003a0 <TARGET_IO_PORT_init>:
#endif

struct usart_sync_descriptor TARGET_IO;

void TARGET_IO_PORT_init(void)
{
     3a0:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f243 2300 	movw	r3, #12800	; 0x3200
     3a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3aa:	2258      	movs	r2, #88	; 0x58
     3ac:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3ae:	2501      	movs	r5, #1
     3b0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	2401      	movs	r4, #1
     3b4:	4321      	orrs	r1, r4
     3b6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	203c      	movs	r0, #60	; 0x3c
     3bc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	3a49      	subs	r2, #73	; 0x49
     3c0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	3a0d      	subs	r2, #13
     3c4:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	3111      	adds	r1, #17
     3dc:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3de:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA24, PINMUX_PA24C_SERCOM0_PAD2);

	gpio_set_pin_function(PA25, PINMUX_PA25C_SERCOM0_PAD3);
}
     3e0:	bd30      	pop	{r4, r5, pc}

000003e2 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3e2:	f641 4300 	movw	r3, #7168	; 0x1c00
     3e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3ea:	2140      	movs	r1, #64	; 0x40
     3ec:	22ac      	movs	r2, #172	; 0xac
     3ee:	5099      	str	r1, [r3, r2]
     3f0:	3103      	adds	r1, #3
     3f2:	3a04      	subs	r2, #4
     3f4:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     3f6:	f640 0300 	movw	r3, #2048	; 0x800
     3fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3fe:	69da      	ldr	r2, [r3, #28]
     400:	3941      	subs	r1, #65	; 0x41
     402:	430a      	orrs	r2, r1
     404:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     406:	4770      	bx	lr

00000408 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     408:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     40a:	f240 33e3 	movw	r3, #995	; 0x3e3
     40e:	f2c0 0300 	movt	r3, #0
     412:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     414:	f240 4100 	movw	r1, #1024	; 0x400
     418:	f2c4 2100 	movt	r1, #16896	; 0x4200
     41c:	f640 40b8 	movw	r0, #3256	; 0xcb8
     420:	f2c2 0000 	movt	r0, #8192	; 0x2000
     424:	2200      	movs	r2, #0
     426:	f240 53b5 	movw	r3, #1461	; 0x5b5
     42a:	f2c0 0300 	movt	r3, #0
     42e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     430:	f240 33a1 	movw	r3, #929	; 0x3a1
     434:	f2c0 0300 	movt	r3, #0
     438:	4798      	blx	r3
}
     43a:	bd10      	pop	{r4, pc}

0000043c <system_init>:

void system_init(void)
{
     43c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     43e:	f240 6385 	movw	r3, #1669	; 0x685
     442:	f2c0 0300 	movt	r3, #0
     446:	4798      	blx	r3
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif

	TARGET_IO_init();
     448:	f240 4309 	movw	r3, #1033	; 0x409
     44c:	f2c0 0300 	movt	r3, #0
     450:	4798      	blx	r3
}
     452:	bd10      	pop	{r4, pc}

00000454 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     454:	b570      	push	{r4, r5, r6, lr}
     456:	0006      	movs	r6, r0
     458:	000c      	movs	r4, r1
     45a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     45c:	b198      	cbz	r0, 486 <io_write+0x32>
     45e:	0008      	movs	r0, r1
     460:	1e43      	subs	r3, r0, #1
     462:	4198      	sbcs	r0, r3
     464:	b2c0      	uxtb	r0, r0
     466:	f242 0184 	movw	r1, #8324	; 0x2084
     46a:	f2c0 0100 	movt	r1, #0
     46e:	2234      	movs	r2, #52	; 0x34
     470:	f240 6335 	movw	r3, #1589	; 0x635
     474:	f2c0 0300 	movt	r3, #0
     478:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     47a:	6833      	ldr	r3, [r6, #0]
     47c:	002a      	movs	r2, r5
     47e:	0021      	movs	r1, r4
     480:	0030      	movs	r0, r6
     482:	4798      	blx	r3
}
     484:	bd70      	pop	{r4, r5, r6, pc}
     486:	2000      	movs	r0, #0
     488:	e7ed      	b.n	466 <io_write+0x12>

0000048a <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     48a:	b570      	push	{r4, r5, r6, lr}
     48c:	0006      	movs	r6, r0
     48e:	000c      	movs	r4, r1
     490:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     492:	b198      	cbz	r0, 4bc <io_read+0x32>
     494:	0008      	movs	r0, r1
     496:	1e43      	subs	r3, r0, #1
     498:	4198      	sbcs	r0, r3
     49a:	b2c0      	uxtb	r0, r0
     49c:	f242 0184 	movw	r1, #8324	; 0x2084
     4a0:	f2c0 0100 	movt	r1, #0
     4a4:	223d      	movs	r2, #61	; 0x3d
     4a6:	f240 6335 	movw	r3, #1589	; 0x635
     4aa:	f2c0 0300 	movt	r3, #0
     4ae:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4b0:	6873      	ldr	r3, [r6, #4]
     4b2:	002a      	movs	r2, r5
     4b4:	0021      	movs	r1, r4
     4b6:	0030      	movs	r0, r6
     4b8:	4798      	blx	r3
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
     4bc:	2000      	movs	r0, #0
     4be:	e7ed      	b.n	49c <io_read+0x12>

000004c0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4c2:	46ce      	mov	lr, r9
     4c4:	4647      	mov	r7, r8
     4c6:	b580      	push	{r7, lr}
     4c8:	0004      	movs	r4, r0
     4ca:	000f      	movs	r7, r1
     4cc:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4ce:	2800      	cmp	r0, #0
     4d0:	d037      	beq.n	542 <usart_sync_write+0x82>
     4d2:	2900      	cmp	r1, #0
     4d4:	d037      	beq.n	546 <usart_sync_write+0x86>
     4d6:	0010      	movs	r0, r2
     4d8:	1e43      	subs	r3, r0, #1
     4da:	4198      	sbcs	r0, r3
     4dc:	f242 0198 	movw	r1, #8344	; 0x2098
     4e0:	f2c0 0100 	movt	r1, #0
     4e4:	22f1      	movs	r2, #241	; 0xf1
     4e6:	f240 6335 	movw	r3, #1589	; 0x635
     4ea:	f2c0 0300 	movt	r3, #0
     4ee:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     4f0:	3408      	adds	r4, #8
     4f2:	f640 05c1 	movw	r5, #2241	; 0x8c1
     4f6:	f2c0 0500 	movt	r5, #0
     4fa:	0020      	movs	r0, r4
     4fc:	47a8      	blx	r5
     4fe:	2800      	cmp	r0, #0
     500:	d0fb      	beq.n	4fa <usart_sync_write+0x3a>
     502:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     504:	f640 09b1 	movw	r9, #2225	; 0x8b1
     508:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     50c:	f640 05c1 	movw	r5, #2241	; 0x8c1
     510:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     514:	5db9      	ldrb	r1, [r7, r6]
     516:	0020      	movs	r0, r4
     518:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     51a:	0020      	movs	r0, r4
     51c:	47a8      	blx	r5
     51e:	2800      	cmp	r0, #0
     520:	d0fb      	beq.n	51a <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     522:	3601      	adds	r6, #1
     524:	4546      	cmp	r6, r8
     526:	d3f5      	bcc.n	514 <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     528:	f640 05cb 	movw	r5, #2251	; 0x8cb
     52c:	f2c0 0500 	movt	r5, #0
     530:	0020      	movs	r0, r4
     532:	47a8      	blx	r5
     534:	2800      	cmp	r0, #0
     536:	d0fb      	beq.n	530 <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     538:	0030      	movs	r0, r6
     53a:	bc0c      	pop	{r2, r3}
     53c:	4690      	mov	r8, r2
     53e:	4699      	mov	r9, r3
     540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     542:	2000      	movs	r0, #0
     544:	e7ca      	b.n	4dc <usart_sync_write+0x1c>
     546:	2000      	movs	r0, #0
     548:	e7c8      	b.n	4dc <usart_sync_write+0x1c>

0000054a <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     54c:	46ce      	mov	lr, r9
     54e:	4647      	mov	r7, r8
     550:	b580      	push	{r7, lr}
     552:	0004      	movs	r4, r0
     554:	4688      	mov	r8, r1
     556:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     558:	b340      	cbz	r0, 5ac <usart_sync_read+0x62>
     55a:	b349      	cbz	r1, 5b0 <usart_sync_read+0x66>
     55c:	0010      	movs	r0, r2
     55e:	1e43      	subs	r3, r0, #1
     560:	4198      	sbcs	r0, r3
     562:	f242 0198 	movw	r1, #8344	; 0x2098
     566:	f2c0 0100 	movt	r1, #0
     56a:	f240 120c 	movw	r2, #268	; 0x10c
     56e:	f240 6335 	movw	r3, #1589	; 0x635
     572:	f2c0 0300 	movt	r3, #0
     576:	4798      	blx	r3
	uint32_t                      offset = 0;
     578:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     57a:	3408      	adds	r4, #8
     57c:	f640 05d5 	movw	r5, #2261	; 0x8d5
     580:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     584:	f640 07b9 	movw	r7, #2233	; 0x8b9
     588:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
     58c:	0020      	movs	r0, r4
     58e:	47a8      	blx	r5
     590:	2800      	cmp	r0, #0
     592:	d0fb      	beq.n	58c <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     594:	0020      	movs	r0, r4
     596:	47b8      	blx	r7
     598:	4643      	mov	r3, r8
     59a:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
     59c:	3601      	adds	r6, #1
     59e:	454e      	cmp	r6, r9
     5a0:	d3f4      	bcc.n	58c <usart_sync_read+0x42>

	return (int32_t)offset;
}
     5a2:	0030      	movs	r0, r6
     5a4:	bc0c      	pop	{r2, r3}
     5a6:	4690      	mov	r8, r2
     5a8:	4699      	mov	r9, r3
     5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5ac:	2000      	movs	r0, #0
     5ae:	e7d8      	b.n	562 <usart_sync_read+0x18>
     5b0:	2000      	movs	r0, #0
     5b2:	e7d6      	b.n	562 <usart_sync_read+0x18>

000005b4 <usart_sync_init>:
{
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	0005      	movs	r5, r0
     5b8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     5ba:	b308      	cbz	r0, 600 <usart_sync_init+0x4c>
     5bc:	0008      	movs	r0, r1
     5be:	1e43      	subs	r3, r0, #1
     5c0:	4198      	sbcs	r0, r3
     5c2:	b2c0      	uxtb	r0, r0
     5c4:	f242 0198 	movw	r1, #8344	; 0x2098
     5c8:	f2c0 0100 	movt	r1, #0
     5cc:	2234      	movs	r2, #52	; 0x34
     5ce:	f240 6335 	movw	r3, #1589	; 0x635
     5d2:	f2c0 0300 	movt	r3, #0
     5d6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5d8:	0028      	movs	r0, r5
     5da:	3008      	adds	r0, #8
     5dc:	0021      	movs	r1, r4
     5de:	f640 036d 	movw	r3, #2157	; 0x86d
     5e2:	f2c0 0300 	movt	r3, #0
     5e6:	4798      	blx	r3
	if (init_status) {
     5e8:	b948      	cbnz	r0, 5fe <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
     5ea:	f240 534b 	movw	r3, #1355	; 0x54b
     5ee:	f2c0 0300 	movt	r3, #0
     5f2:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     5f4:	f240 43c1 	movw	r3, #1217	; 0x4c1
     5f8:	f2c0 0300 	movt	r3, #0
     5fc:	602b      	str	r3, [r5, #0]
}
     5fe:	bd70      	pop	{r4, r5, r6, pc}
     600:	2000      	movs	r0, #0
     602:	e7df      	b.n	5c4 <usart_sync_init+0x10>

00000604 <usart_sync_enable>:
{
     604:	b510      	push	{r4, lr}
     606:	0004      	movs	r4, r0
	ASSERT(descr);
     608:	f242 0198 	movw	r1, #8344	; 0x2098
     60c:	f2c0 0100 	movt	r1, #0
     610:	1e43      	subs	r3, r0, #1
     612:	4198      	sbcs	r0, r3
     614:	b2c0      	uxtb	r0, r0
     616:	2253      	movs	r2, #83	; 0x53
     618:	f240 6335 	movw	r3, #1589	; 0x635
     61c:	f2c0 0300 	movt	r3, #0
     620:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     622:	0020      	movs	r0, r4
     624:	3008      	adds	r0, #8
     626:	f640 039d 	movw	r3, #2205	; 0x89d
     62a:	f2c0 0300 	movt	r3, #0
     62e:	4798      	blx	r3
}
     630:	2000      	movs	r0, #0
     632:	bd10      	pop	{r4, pc}

00000634 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     634:	b900      	cbnz	r0, 638 <assert+0x4>
		__asm("BKPT #0");
     636:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     638:	4770      	bx	lr

0000063a <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     63a:	0002      	movs	r2, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     63c:	f240 0384 	movw	r3, #132	; 0x84
     640:	f2c2 0300 	movt	r3, #8192	; 0x2000
     644:	681b      	ldr	r3, [r3, #0]
     646:	b13b      	cbz	r3, 658 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     648:	f240 0384 	movw	r3, #132	; 0x84
     64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     650:	6818      	ldr	r0, [r3, #0]

	heap += incr;
     652:	1882      	adds	r2, r0, r2
     654:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
     656:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     658:	f240 0384 	movw	r3, #132	; 0x84
     65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     660:	f241 5188 	movw	r1, #5512	; 0x1588
     664:	f2c2 0100 	movt	r1, #8192	; 0x2000
     668:	6019      	str	r1, [r3, #0]
     66a:	e7ed      	b.n	648 <_sbrk+0xe>

0000066c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     66c:	2001      	movs	r0, #1
     66e:	4240      	negs	r0, r0
     670:	4770      	bx	lr

00000672 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     672:	f242 0300 	movw	r3, #8192	; 0x2000
     676:	604b      	str	r3, [r1, #4]

	return 0;
}
     678:	2000      	movs	r0, #0
     67a:	4770      	bx	lr

0000067c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     67c:	2001      	movs	r0, #1
     67e:	4770      	bx	lr

00000680 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     680:	2000      	movs	r0, #0
     682:	4770      	bx	lr

00000684 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     684:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     686:	f245 0300 	movw	r3, #20480	; 0x5000
     68a:	f2c4 1300 	movt	r3, #16640	; 0x4100
     68e:	685a      	ldr	r2, [r3, #4]
     690:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
     692:	2000      	movs	r0, #0
     694:	f240 7353 	movw	r3, #1875	; 0x753
     698:	f2c0 0300 	movt	r3, #0
     69c:	4798      	blx	r3

	_osc32kctrl_init_sources();
     69e:	f240 730b 	movw	r3, #1803	; 0x70b
     6a2:	f2c0 0300 	movt	r3, #0
     6a6:	4798      	blx	r3
	_oscctrl_init_sources();
     6a8:	f240 7323 	movw	r3, #1827	; 0x723
     6ac:	f2c0 0300 	movt	r3, #0
     6b0:	4798      	blx	r3
	_mclk_init();
     6b2:	f240 63fd 	movw	r3, #1789	; 0x6fd
     6b6:	f2c0 0300 	movt	r3, #0
     6ba:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     6bc:	f240 7351 	movw	r3, #1873	; 0x751
     6c0:	f2c0 0300 	movt	r3, #0
     6c4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     6c6:	201f      	movs	r0, #31
     6c8:	f240 63d5 	movw	r3, #1749	; 0x6d5
     6cc:	f2c0 0300 	movt	r3, #0
     6d0:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     6d2:	bd10      	pop	{r4, pc}

000006d4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     6d4:	07c3      	lsls	r3, r0, #31
     6d6:	d510      	bpl.n	6fa <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     6d8:	f641 4300 	movw	r3, #7168	; 0x1c00
     6dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6e0:	f240 1205 	movw	r2, #261	; 0x105
     6e4:	f2c0 0201 	movt	r2, #1
     6e8:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     6ea:	f641 4200 	movw	r2, #7168	; 0x1c00
     6ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
     6f2:	217d      	movs	r1, #125	; 0x7d
     6f4:	6853      	ldr	r3, [r2, #4]
     6f6:	4219      	tst	r1, r3
     6f8:	d1fc      	bne.n	6f4 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
     6fa:	4770      	bx	lr

000006fc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     6fc:	f640 0300 	movw	r3, #2048	; 0x800
     700:	f2c4 0300 	movt	r3, #16384	; 0x4000
     704:	2201      	movs	r2, #1
     706:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     708:	4770      	bx	lr

0000070a <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     70a:	f241 4300 	movw	r3, #5120	; 0x1400
     70e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     712:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     714:	f641 7100 	movw	r1, #7936	; 0x1f00
     718:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     71a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     71c:	2200      	movs	r2, #0
     71e:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     720:	4770      	bx	lr

00000722 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     722:	f241 0300 	movw	r3, #4096	; 0x1000
     726:	f2c4 0300 	movt	r3, #16384	; 0x4000
     72a:	2202      	movs	r2, #2
     72c:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     72e:	f241 0200 	movw	r2, #4096	; 0x1000
     732:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     736:	2110      	movs	r1, #16
     738:	6913      	ldr	r3, [r2, #16]
     73a:	4219      	tst	r1, r3
     73c:	d0fc      	beq.n	738 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
     73e:	f241 0300 	movw	r3, #4096	; 0x1000
     742:	f2c4 0300 	movt	r3, #16384	; 0x4000
     746:	7e1a      	ldrb	r2, [r3, #24]
     748:	2180      	movs	r1, #128	; 0x80
     74a:	430a      	orrs	r2, r1
     74c:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     74e:	4770      	bx	lr

00000750 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     750:	4770      	bx	lr

00000752 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     752:	f240 4300 	movw	r3, #1024	; 0x400
     756:	f2c4 0300 	movt	r3, #16384	; 0x4000
     75a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     75c:	2203      	movs	r2, #3
     75e:	4013      	ands	r3, r2
     760:	4298      	cmp	r0, r3
     762:	d012      	beq.n	78a <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
     764:	f240 4200 	movw	r2, #1024	; 0x400
     768:	f2c4 0200 	movt	r2, #16384	; 0x4000
     76c:	23ff      	movs	r3, #255	; 0xff
     76e:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     770:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     772:	2103      	movs	r1, #3
     774:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     776:	4008      	ands	r0, r1
     778:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     77a:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     77c:	f240 4200 	movw	r2, #1024	; 0x400
     780:	f2c4 0200 	movt	r2, #16384	; 0x4000
     784:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     786:	2b00      	cmp	r3, #0
     788:	d0fc      	beq.n	784 <_set_performance_level+0x32>
			;
	}
}
     78a:	4770      	bx	lr

0000078c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     78c:	b530      	push	{r4, r5, lr}
     78e:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     790:	aa01      	add	r2, sp, #4
     792:	f242 03b4 	movw	r3, #8372	; 0x20b4
     796:	f2c0 0300 	movt	r3, #0
     79a:	cb32      	ldmia	r3!, {r1, r4, r5}
     79c:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     79e:	0003      	movs	r3, r0
     7a0:	9a01      	ldr	r2, [sp, #4]
     7a2:	4282      	cmp	r2, r0
     7a4:	d00c      	beq.n	7c0 <_sercom_get_hardware_index+0x34>
     7a6:	9a02      	ldr	r2, [sp, #8]
     7a8:	4282      	cmp	r2, r0
     7aa:	d007      	beq.n	7bc <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
     7ac:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     7ae:	9a03      	ldr	r2, [sp, #12]
     7b0:	429a      	cmp	r2, r3
     7b2:	d001      	beq.n	7b8 <_sercom_get_hardware_index+0x2c>
}
     7b4:	b005      	add	sp, #20
     7b6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7b8:	3002      	adds	r0, #2
     7ba:	e002      	b.n	7c2 <_sercom_get_hardware_index+0x36>
     7bc:	2001      	movs	r0, #1
     7be:	e000      	b.n	7c2 <_sercom_get_hardware_index+0x36>
     7c0:	2000      	movs	r0, #0
			return i;
     7c2:	b2c0      	uxtb	r0, r0
     7c4:	e7f6      	b.n	7b4 <_sercom_get_hardware_index+0x28>
	...

000007c8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     7c8:	b510      	push	{r4, lr}
     7ca:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     7cc:	f240 738d 	movw	r3, #1933	; 0x78d
     7d0:	f2c0 0300 	movt	r3, #0
     7d4:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     7d6:	b158      	cbz	r0, 7f0 <_usart_init+0x28>
	ASSERT(false);
     7d8:	f242 01d8 	movw	r1, #8408	; 0x20d8
     7dc:	f2c0 0100 	movt	r1, #0
     7e0:	f240 2247 	movw	r2, #583	; 0x247
     7e4:	2000      	movs	r0, #0
     7e6:	f240 6335 	movw	r3, #1589	; 0x635
     7ea:	f2c0 0300 	movt	r3, #0
     7ee:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     7f0:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     7f2:	07db      	lsls	r3, r3, #31
     7f4:	d418      	bmi.n	828 <_usart_init+0x60>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7f6:	2203      	movs	r2, #3
     7f8:	69e3      	ldr	r3, [r4, #28]
     7fa:	421a      	tst	r2, r3
     7fc:	d1fc      	bne.n	7f8 <_usart_init+0x30>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     7fe:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     800:	079b      	lsls	r3, r3, #30
     802:	d50b      	bpl.n	81c <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     804:	6823      	ldr	r3, [r4, #0]
     806:	2202      	movs	r2, #2
     808:	4393      	bics	r3, r2
     80a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     80c:	3201      	adds	r2, #1
     80e:	69e3      	ldr	r3, [r4, #28]
     810:	421a      	tst	r2, r3
     812:	d1fc      	bne.n	80e <_usart_init+0x46>
     814:	2202      	movs	r2, #2
     816:	69e3      	ldr	r3, [r4, #28]
     818:	421a      	tst	r2, r3
     81a:	d1fc      	bne.n	816 <_usart_init+0x4e>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     81c:	2305      	movs	r3, #5
     81e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     820:	2203      	movs	r2, #3
     822:	69e3      	ldr	r3, [r4, #28]
     824:	421a      	tst	r2, r3
     826:	d1fc      	bne.n	822 <_usart_init+0x5a>
     828:	2201      	movs	r2, #1
     82a:	69e3      	ldr	r3, [r4, #28]
     82c:	421a      	tst	r2, r3
     82e:	d1fc      	bne.n	82a <_usart_init+0x62>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     830:	2304      	movs	r3, #4
     832:	f2c4 0331 	movt	r3, #16433	; 0x4031
     836:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     838:	2203      	movs	r2, #3
     83a:	69e3      	ldr	r3, [r4, #28]
     83c:	421a      	tst	r2, r3
     83e:	d1fc      	bne.n	83a <_usart_init+0x72>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     840:	23c0      	movs	r3, #192	; 0xc0
     842:	029b      	lsls	r3, r3, #10
     844:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     846:	220f      	movs	r2, #15
     848:	69e3      	ldr	r3, [r4, #28]
     84a:	421a      	tst	r2, r3
     84c:	d1fc      	bne.n	848 <_usart_init+0x80>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     84e:	2302      	movs	r3, #2
     850:	f2c0 0370 	movt	r3, #112	; 0x70
     854:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     856:	4b04      	ldr	r3, [pc, #16]	; (868 <_usart_init+0xa0>)
     858:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     85a:	2300      	movs	r3, #0
     85c:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     85e:	2230      	movs	r2, #48	; 0x30
     860:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     862:	2000      	movs	r0, #0
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	ffff8a09 	.word	0xffff8a09

0000086c <_usart_sync_init>:
{
     86c:	b570      	push	{r4, r5, r6, lr}
     86e:	0005      	movs	r5, r0
     870:	000c      	movs	r4, r1
	ASSERT(device);
     872:	f242 01d8 	movw	r1, #8408	; 0x20d8
     876:	f2c0 0100 	movt	r1, #0
     87a:	1e43      	subs	r3, r0, #1
     87c:	4198      	sbcs	r0, r3
     87e:	b2c0      	uxtb	r0, r0
     880:	22bb      	movs	r2, #187	; 0xbb
     882:	f240 6335 	movw	r3, #1589	; 0x635
     886:	f2c0 0300 	movt	r3, #0
     88a:	4798      	blx	r3
	device->hw = hw;
     88c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     88e:	0020      	movs	r0, r4
     890:	f240 73c9 	movw	r3, #1993	; 0x7c9
     894:	f2c0 0300 	movt	r3, #0
     898:	4798      	blx	r3
}
     89a:	bd70      	pop	{r4, r5, r6, pc}

0000089c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     89c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     89e:	6813      	ldr	r3, [r2, #0]
     8a0:	2102      	movs	r1, #2
     8a2:	430b      	orrs	r3, r1
     8a4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8a6:	3101      	adds	r1, #1
     8a8:	69d3      	ldr	r3, [r2, #28]
     8aa:	4219      	tst	r1, r3
     8ac:	d1fc      	bne.n	8a8 <_usart_sync_enable+0xc>
}
     8ae:	4770      	bx	lr

000008b0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     8b0:	6803      	ldr	r3, [r0, #0]
     8b2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     8b4:	8519      	strh	r1, [r3, #40]	; 0x28
}
     8b6:	4770      	bx	lr

000008b8 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     8b8:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     8ba:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     8bc:	b2c0      	uxtb	r0, r0
}
     8be:	4770      	bx	lr

000008c0 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     8c0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     8c2:	7e18      	ldrb	r0, [r3, #24]
     8c4:	2301      	movs	r3, #1
     8c6:	4018      	ands	r0, r3
}
     8c8:	4770      	bx	lr

000008ca <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     8ca:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     8cc:	7e18      	ldrb	r0, [r3, #24]
     8ce:	0780      	lsls	r0, r0, #30
     8d0:	0fc0      	lsrs	r0, r0, #31
}
     8d2:	4770      	bx	lr

000008d4 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     8d4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     8d6:	7e18      	ldrb	r0, [r3, #24]
     8d8:	0740      	lsls	r0, r0, #29
     8da:	0fc0      	lsrs	r0, r0, #31
}
     8dc:	4770      	bx	lr

000008de <kernel_init>:
#include "inc/manager.h"
#include "inc/results.h"
#include "inc/types.h"
#include "inc/test_module.h"

SOS_Result_t kernel_init(){
     8de:	b510      	push	{r4, lr}
	init_stack();
     8e0:	f640 1301 	movw	r3, #2305	; 0x901
     8e4:	f2c0 0300 	movt	r3, #0
     8e8:	4798      	blx	r3
    init_modules();
     8ea:	f640 1303 	movw	r3, #2307	; 0x903
     8ee:	f2c0 0300 	movt	r3, #0
     8f2:	4798      	blx	r3
    init_test_module();
     8f4:	f640 4361 	movw	r3, #3169	; 0xc61
     8f8:	f2c0 0300 	movt	r3, #0
     8fc:	4798      	blx	r3
    

}
     8fe:	bd10      	pop	{r4, pc}

00000900 <init_stack>:

void init_stack(){
	

    kernel_stack_pointer=(StackType_t*) kernel_stack;
}
     900:	4770      	bx	lr

00000902 <init_modules>:
    } 
}



SOS_Result_t init_modules(void){
     902:	f640 43c4 	movw	r3, #3268	; 0xcc4
     906:	f2c2 0300 	movt	r3, #8192	; 0x2000
     90a:	0019      	movs	r1, r3
     90c:	31c8      	adds	r1, #200	; 0xc8
    int i;
    for (i=0;i<MODULES_MAX;i++){
        modules[i].module_id=0;
     90e:	2200      	movs	r2, #0
     910:	601a      	str	r2, [r3, #0]
        modules[i].module_entry=NULL;
     912:	609a      	str	r2, [r3, #8]
     914:	3314      	adds	r3, #20
    for (i=0;i<MODULES_MAX;i++){
     916:	428b      	cmp	r3, r1
     918:	d1fa      	bne.n	910 <init_modules+0xe>

    }
}
     91a:	4770      	bx	lr

0000091c <add_module>:

SOS_Result_t add_module(SOS_ModuleEntry_t module_enrty,SOS_ModuleID_t module_id,SOS_Manifest_t manifest){
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if((module_id==0)||(module_enrty==NULL)){
     91e:	b1c9      	cbz	r1, 954 <add_module+0x38>
     920:	b1d8      	cbz	r0, 95a <add_module+0x3e>
        return -SOS_ERROR_INVAL;
    }
    
    modules[modules_index].module_id=module_id;
     922:	f240 0588 	movw	r5, #136	; 0x88
     926:	f2c2 0500 	movt	r5, #8192	; 0x2000
     92a:	682c      	ldr	r4, [r5, #0]
     92c:	f640 46c4 	movw	r6, #3268	; 0xcc4
     930:	f2c2 0600 	movt	r6, #8192	; 0x2000
     934:	00a3      	lsls	r3, r4, #2
     936:	191f      	adds	r7, r3, r4
     938:	00bf      	lsls	r7, r7, #2
     93a:	51b9      	str	r1, [r7, r6]
    modules[modules_index].module_entry=module_enrty;
     93c:	003b      	movs	r3, r7
     93e:	46b4      	mov	ip, r6
     940:	4463      	add	r3, ip
     942:	6098      	str	r0, [r3, #8]
    modules[modules_index].module_manifest=manifest;
     944:	605a      	str	r2, [r3, #4]

    modules_index++;
     946:	3401      	adds	r4, #1
     948:	602c      	str	r4, [r5, #0]
    if(modules_index>=MODULES_MAX){
     94a:	2c09      	cmp	r4, #9
     94c:	d904      	bls.n	958 <add_module+0x3c>
        return -SOS_ERROR_NO_FREE_SM;
     94e:	2005      	movs	r0, #5
     950:	4240      	negs	r0, r0
     952:	e001      	b.n	958 <add_module+0x3c>
        return -SOS_ERROR_INVAL;
     954:	2002      	movs	r0, #2
     956:	4240      	negs	r0, r0
    }

    
}
     958:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -SOS_ERROR_INVAL;
     95a:	2002      	movs	r0, #2
     95c:	4240      	negs	r0, r0
     95e:	e7fb      	b.n	958 <add_module+0x3c>

00000960 <call_module>:

 
 
 void call_module( uint32_t command_id, 
    SOS_Operation_t *operation,Module_t* module_entry){	
		__asm volatile(
     960:	f3ef 8514 	mrs	r5, CONTROL
     964:	2403      	movs	r4, #3
     966:	4325      	orrs	r5, r4
     968:	f385 8814 	msr	CONTROL, r5
     96c:	f3bf 8f4f 	dsb	sy
     970:	f3bf 8f6f 	isb	sy
     974:	4710      	bx	r2
	...

00000978 <SOS_invoke_command>:
){
     978:	b5f0      	push	{r4, r5, r6, r7, lr}
     97a:	46de      	mov	lr, fp
     97c:	4657      	mov	r7, sl
     97e:	b580      	push	{r7, lr}
     980:	b083      	sub	sp, #12
     982:	9100      	str	r1, [sp, #0]
     984:	9201      	str	r2, [sp, #4]
    for(;i<modules_index;i++){
     986:	f240 0388 	movw	r3, #136	; 0x88
     98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     98e:	6819      	ldr	r1, [r3, #0]
     990:	2900      	cmp	r1, #0
     992:	d100      	bne.n	996 <SOS_invoke_command+0x1e>
     994:	e09d      	b.n	ad2 <sys_call_return_label+0xa>
        if(modules[i].module_id==module_id){
     996:	f640 43c4 	movw	r3, #3268	; 0xcc4
     99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	4298      	cmp	r0, r3
     9a2:	d100      	bne.n	9a6 <SOS_invoke_command+0x2e>
     9a4:	e09a      	b.n	adc <sys_call_return_label+0x14>
     9a6:	4b51      	ldr	r3, [pc, #324]	; (aec <sys_call_return_label+0x24>)
     9a8:	2400      	movs	r4, #0
    for(;i<modules_index;i++){
     9aa:	3401      	adds	r4, #1
     9ac:	428c      	cmp	r4, r1
     9ae:	d100      	bne.n	9b2 <SOS_invoke_command+0x3a>
     9b0:	e08f      	b.n	ad2 <sys_call_return_label+0xa>
     9b2:	3314      	adds	r3, #20
        if(modules[i].module_id==module_id){
     9b4:	001a      	movs	r2, r3
     9b6:	3a14      	subs	r2, #20
     9b8:	6812      	ldr	r2, [r2, #0]
     9ba:	4282      	cmp	r2, r0
     9bc:	d1f5      	bne.n	9aa <SOS_invoke_command+0x32>
           cur_call_moudle_frame=memory_alloc(sizeof(struct CallModuleFrame));
     9be:	2050      	movs	r0, #80	; 0x50
     9c0:	f640 23f5 	movw	r3, #2805	; 0xaf5
     9c4:	f2c0 0300 	movt	r3, #0
     9c8:	4798      	blx	r3
     9ca:	0007      	movs	r7, r0
           if(call_moudle_frame_head!=NULL){
     9cc:	f240 0388 	movw	r3, #136	; 0x88
     9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9d4:	685b      	ldr	r3, [r3, #4]
     9d6:	2b00      	cmp	r3, #0
     9d8:	d100      	bne.n	9dc <SOS_invoke_command+0x64>
     9da:	e081      	b.n	ae0 <sys_call_return_label+0x18>
               cur_call_moudle_frame->next=call_moudle_frame_head;
     9dc:	224c      	movs	r2, #76	; 0x4c
     9de:	5483      	strb	r3, [r0, r2]
     9e0:	0a19      	lsrs	r1, r3, #8
     9e2:	3201      	adds	r2, #1
     9e4:	5481      	strb	r1, [r0, r2]
     9e6:	0c19      	lsrs	r1, r3, #16
     9e8:	3201      	adds	r2, #1
     9ea:	5481      	strb	r1, [r0, r2]
     9ec:	0e1b      	lsrs	r3, r3, #24
     9ee:	3201      	adds	r2, #1
     9f0:	5483      	strb	r3, [r0, r2]
               call_moudle_frame_head=cur_call_moudle_frame;
     9f2:	f240 0388 	movw	r3, #136	; 0x88
     9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9fa:	6058      	str	r0, [r3, #4]
           cur_call_moudle_frame->cur_call_ID=call_ID;
     9fc:	f240 0200 	movw	r2, #0
     a00:	f2c2 0200 	movt	r2, #8192	; 0x2000
     a04:	6813      	ldr	r3, [r2, #0]
     a06:	f240 0b44 	movw	fp, #68	; 0x44
     a0a:	4659      	mov	r1, fp
     a0c:	547b      	strb	r3, [r7, r1]
     a0e:	0a19      	lsrs	r1, r3, #8
     a10:	f240 0a45 	movw	sl, #69	; 0x45
     a14:	4650      	mov	r0, sl
     a16:	5439      	strb	r1, [r7, r0]
     a18:	0c19      	lsrs	r1, r3, #16
     a1a:	2646      	movs	r6, #70	; 0x46
     a1c:	55b9      	strb	r1, [r7, r6]
     a1e:	0e19      	lsrs	r1, r3, #24
     a20:	2547      	movs	r5, #71	; 0x47
     a22:	5579      	strb	r1, [r7, r5]
           call_ID++;
     a24:	3301      	adds	r3, #1
     a26:	6013      	str	r3, [r2, #0]
           module_stack = memory_alloc(SOS_MODULE_STACK_SIZE);
     a28:	30e7      	adds	r0, #231	; 0xe7
     a2a:	f640 23f5 	movw	r3, #2805	; 0xaf5
     a2e:	f2c0 0300 	movt	r3, #0
     a32:	4798      	blx	r3
		   module_stack+=(SOS_MODULE_STACK_SIZE);
     a34:	302d      	adds	r0, #45	; 0x2d
     a36:	30ff      	adds	r0, #255	; 0xff
		   cur_call_moudle_frame->module_stack=module_stack;
     a38:	2348      	movs	r3, #72	; 0x48
     a3a:	54f8      	strb	r0, [r7, r3]
     a3c:	0a02      	lsrs	r2, r0, #8
     a3e:	3301      	adds	r3, #1
     a40:	54fa      	strb	r2, [r7, r3]
     a42:	0c02      	lsrs	r2, r0, #16
     a44:	3301      	adds	r3, #1
     a46:	54fa      	strb	r2, [r7, r3]
     a48:	0e02      	lsrs	r2, r0, #24
     a4a:	3301      	adds	r3, #1
     a4c:	54fa      	strb	r2, [r7, r3]
		   __asm volatile(
     a4e:	b41f      	push	{r0, r1, r2, r3, r4}
     a50:	b410      	push	{r4}
     a52:	1c3c      	adds	r4, r7, #0
     a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a56:	1c23      	adds	r3, r4, #0
     a58:	bc10      	pop	{r4}
     a5a:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
     a5c:	4640      	mov	r0, r8
     a5e:	4649      	mov	r1, r9
     a60:	4652      	mov	r2, sl
     a62:	465c      	mov	r4, fp
     a64:	c317      	stmia	r3!, {r0, r1, r2, r4}
     a66:	f3ef 8008 	mrs	r0, MSP
     a6a:	f3ef 8114 	mrs	r1, CONTROL
     a6e:	4a20      	ldr	r2, [pc, #128]	; (af0 <sys_call_return_label+0x28>)
     a70:	4674      	mov	r4, lr
     a72:	c317      	stmia	r3!, {r0, r1, r2, r4}
     a74:	f3ef 8005 	mrs	r0, IPSR
     a78:	c301      	stmia	r3!, {r0}
     a7a:	bc1f      	pop	{r0, r1, r2, r3, r4}
		    ::"r"(module_stack),"r"(cur_call_moudle_frame->cur_call_ID)
     a7c:	465b      	mov	r3, fp
     a7e:	5cfb      	ldrb	r3, [r7, r3]
     a80:	4652      	mov	r2, sl
     a82:	5cba      	ldrb	r2, [r7, r2]
     a84:	0212      	lsls	r2, r2, #8
     a86:	431a      	orrs	r2, r3
     a88:	5dbb      	ldrb	r3, [r7, r6]
     a8a:	041b      	lsls	r3, r3, #16
     a8c:	431a      	orrs	r2, r3
     a8e:	5d7b      	ldrb	r3, [r7, r5]
     a90:	061b      	lsls	r3, r3, #24
     a92:	4313      	orrs	r3, r2
		    __asm volatile(
     a94:	b403      	push	{r0, r1}
     a96:	1c19      	adds	r1, r3, #0
     a98:	1c00      	adds	r0, r0, #0
     a9a:	3804      	subs	r0, #4
     a9c:	c002      	stmia	r0!, {r1}
     a9e:	3804      	subs	r0, #4
     aa0:	f380 8809 	msr	PSP, r0
     aa4:	bc03      	pop	{r0, r1}
			call_module( command_id,operation,modules[i].module_entry);
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	191c      	adds	r4, r3, r4
     aaa:	00a4      	lsls	r4, r4, #2
     aac:	f640 43c4 	movw	r3, #3268	; 0xcc4
     ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ab4:	469c      	mov	ip, r3
     ab6:	4464      	add	r4, ip
     ab8:	68a2      	ldr	r2, [r4, #8]
     aba:	9901      	ldr	r1, [sp, #4]
     abc:	9800      	ldr	r0, [sp, #0]
     abe:	f640 1361 	movw	r3, #2401	; 0x961
     ac2:	f2c0 0300 	movt	r3, #0
     ac6:	4798      	blx	r3

00000ac8 <sys_call_return_label>:
			__asm volatile
     ac8:	bc02      	pop	{r1}
     aca:	468e      	mov	lr, r1
     acc:	bc1e      	pop	{r1, r2, r3, r4}
     ace:	bc01      	pop	{r0}
     ad0:	1c00      	adds	r0, r0, #0
}
     ad2:	b003      	add	sp, #12
     ad4:	bc0c      	pop	{r2, r3}
     ad6:	4692      	mov	sl, r2
     ad8:	469b      	mov	fp, r3
     ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int i=0;
     adc:	2400      	movs	r4, #0
     ade:	e76e      	b.n	9be <SOS_invoke_command+0x46>
               call_moudle_frame_head=cur_call_moudle_frame;
     ae0:	f240 0388 	movw	r3, #136	; 0x88
     ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ae8:	6058      	str	r0, [r3, #4]
     aea:	e787      	b.n	9fc <SOS_invoke_command+0x84>
     aec:	20000cd8 	.word	0x20000cd8
     af0:	00000ac8 	.word	0x00000ac8

00000af4 <memory_alloc>:


#include "inc/memory.h"
#include "secure_heap.h"

void* memory_alloc(size_t size){
     af4:	b510      	push	{r4, lr}
	return pvPortMalloc(size);
     af6:	f640 5367 	movw	r3, #3431	; 0xd67
     afa:	f2c0 0300 	movt	r3, #0
     afe:	4798      	blx	r3
}
     b00:	bd10      	pop	{r4, pc}

00000b02 <sos_return>:
	}
}


void sos_return(struct CallModuleFrame* index){
	__asm volatile(
     b02:	1c04      	adds	r4, r0, #0
     b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     b06:	b401      	push	{r0}
     b08:	1c20      	adds	r0, r4, #0
     b0a:	3010      	adds	r0, #16
     b0c:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     b0e:	46a0      	mov	r8, r4
     b10:	46a9      	mov	r9, r5
     b12:	46b2      	mov	sl, r6
     b14:	46bb      	mov	fp, r7
     b16:	3820      	subs	r0, #32
     b18:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     b1a:	b41e      	push	{r1, r2, r3, r4}
     b1c:	3010      	adds	r0, #16
     b1e:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
     b20:	f381 8808 	msr	MSP, r1
     b24:	f382 8814 	msr	CONTROL, r2
     b28:	2201      	movs	r2, #1
     b2a:	4313      	orrs	r3, r2
     b2c:	469e      	mov	lr, r3
     b2e:	c802      	ldmia	r0!, {r1}
     b30:	f380 8805 	msr	IPSR, r0
     b34:	b410      	push	{r4}
     b36:	4770      	bx	lr

00000b38 <vPortSVCHandler_C>:
{
     b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b3a:	46de      	mov	lr, fp
     b3c:	4657      	mov	r7, sl
     b3e:	464e      	mov	r6, r9
     b40:	4645      	mov	r5, r8
     b42:	b5e0      	push	{r5, r6, r7, lr}
	uint32_t a1 = pulCallerStackAddress[8];
     b44:	6a03      	ldr	r3, [r0, #32]
     b46:	4698      	mov	r8, r3
	uint32_t a2 = pulCallerStackAddress[9];
     b48:	6a43      	ldr	r3, [r0, #36]	; 0x24
     b4a:	4699      	mov	r9, r3
	uint32_t a3 = pulCallerStackAddress[10];
     b4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
     b4e:	469a      	mov	sl, r3
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
     b50:	6983      	ldr	r3, [r0, #24]
     b52:	3b02      	subs	r3, #2
	switch( ucSVCNumber )
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	2b04      	cmp	r3, #4
     b58:	d038      	beq.n	bcc <vPortSVCHandler_C+0x94>
     b5a:	2b05      	cmp	r3, #5
     b5c:	d13e      	bne.n	bdc <vPortSVCHandler_C+0xa4>
			__asm volatile(
     b5e:	b418      	push	{r3, r4}
     b60:	f3ef 8309 	mrs	r3, PSP
     b64:	3320      	adds	r3, #32
     b66:	3310      	adds	r3, #16
     b68:	681c      	ldr	r4, [r3, #0]
     b6a:	1c25      	adds	r5, r4, #0
     b6c:	bc18      	pop	{r3, r4}
			index=call_moudle_frame_head;
     b6e:	f240 038c 	movw	r3, #140	; 0x8c
     b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b76:	681c      	ldr	r4, [r3, #0]
			while(index!=NULL){
     b78:	b344      	cbz	r4, bcc <vPortSVCHandler_C+0x94>
				if(index->cur_call_ID==call_ID_from_stack){
     b7a:	f240 0b44 	movw	fp, #68	; 0x44
     b7e:	2745      	movs	r7, #69	; 0x45
     b80:	2646      	movs	r6, #70	; 0x46
     b82:	e00e      	b.n	ba2 <vPortSVCHandler_C+0x6a>
				index=index->next;
     b84:	234c      	movs	r3, #76	; 0x4c
     b86:	5ce2      	ldrb	r2, [r4, r3]
     b88:	3301      	adds	r3, #1
     b8a:	5ce3      	ldrb	r3, [r4, r3]
     b8c:	021b      	lsls	r3, r3, #8
     b8e:	431a      	orrs	r2, r3
     b90:	234e      	movs	r3, #78	; 0x4e
     b92:	5ce3      	ldrb	r3, [r4, r3]
     b94:	041b      	lsls	r3, r3, #16
     b96:	4313      	orrs	r3, r2
     b98:	224f      	movs	r2, #79	; 0x4f
     b9a:	5ca4      	ldrb	r4, [r4, r2]
     b9c:	0624      	lsls	r4, r4, #24
     b9e:	431c      	orrs	r4, r3
			while(index!=NULL){
     ba0:	b1a4      	cbz	r4, bcc <vPortSVCHandler_C+0x94>
				if(index->cur_call_ID==call_ID_from_stack){
     ba2:	465b      	mov	r3, fp
     ba4:	5ce3      	ldrb	r3, [r4, r3]
     ba6:	5de2      	ldrb	r2, [r4, r7]
     ba8:	0212      	lsls	r2, r2, #8
     baa:	431a      	orrs	r2, r3
     bac:	5da3      	ldrb	r3, [r4, r6]
     bae:	041b      	lsls	r3, r3, #16
     bb0:	431a      	orrs	r2, r3
     bb2:	2347      	movs	r3, #71	; 0x47
     bb4:	5ce3      	ldrb	r3, [r4, r3]
     bb6:	061b      	lsls	r3, r3, #24
     bb8:	4313      	orrs	r3, r2
     bba:	429d      	cmp	r5, r3
     bbc:	d1e2      	bne.n	b84 <vPortSVCHandler_C+0x4c>
					sos_return( index);
     bbe:	0020      	movs	r0, r4
     bc0:	f640 3303 	movw	r3, #2819	; 0xb03
     bc4:	f2c0 0300 	movt	r3, #0
     bc8:	4798      	blx	r3
     bca:	e7db      	b.n	b84 <vPortSVCHandler_C+0x4c>
			return SOS_invoke_command((SOS_ModuleID_t)a1, (uint32_t)a2, (SOS_Operation_t *) a3);
     bcc:	4652      	mov	r2, sl
     bce:	4649      	mov	r1, r9
     bd0:	4640      	mov	r0, r8
     bd2:	f640 1379 	movw	r3, #2425	; 0x979
     bd6:	f2c0 0300 	movt	r3, #0
     bda:	4798      	blx	r3
}
     bdc:	bc3c      	pop	{r2, r3, r4, r5}
     bde:	4690      	mov	r8, r2
     be0:	4699      	mov	r9, r3
     be2:	46a2      	mov	sl, r4
     be4:	46ab      	mov	fp, r5
     be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00000bf0 <SVCall_Handler>:
	);
}

void SVCall_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
     bf0:	2004      	movs	r0, #4
     bf2:	4671      	mov	r1, lr
     bf4:	4208      	tst	r0, r1
     bf6:	d003      	beq.n	c00 <stacking_used_msp>
     bf8:	f3ef 8009 	mrs	r0, PSP
     bfc:	4a04      	ldr	r2, [pc, #16]	; (c10 <svchandler_address_const>)
     bfe:	4710      	bx	r2

00000c00 <stacking_used_msp>:
     c00:	f3ef 8008 	mrs	r0, MSP
     c04:	4a02      	ldr	r2, [pc, #8]	; (c10 <svchandler_address_const>)
     c06:	4710      	bx	r2
     c08:	46c0      	nop			; (mov r8, r8)
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	46c0      	nop			; (mov r8, r8)
     c0e:	46c0      	nop			; (mov r8, r8)

00000c10 <svchandler_address_const>:
     c10:	00000b39 	.word	0x00000b39

00000c14 <syscall_return>:
		
	);
}

void syscall_return(int ret){
	__asm volatile
     c14:	b401      	push	{r0}
     c16:	2000      	movs	r0, #0
     c18:	f380 8805 	msr	IPSR, r0
	__asm volatile
     c1c:	2109      	movs	r1, #9
     c1e:	2204      	movs	r2, #4
     c20:	2303      	movs	r3, #3
     c22:	1c04      	adds	r4, r0, #0
     c24:	1c1d      	adds	r5, r3, #0
     c26:	1c16      	adds	r6, r2, #0
     c28:	1c0f      	adds	r7, r1, #0
     c2a:	b480      	push	{r7}
     c2c:	b440      	push	{r6}
     c2e:	b420      	push	{r5}
     c30:	b410      	push	{r4}
     c32:	df05      	svc	5
		"	push {r0}											\n"
		"	mov r0, #0x0										\n"
		"	msr ipsr, r0										\n"
	);
	syscall(SYS_module_return,ret,3,4,9);
}
     c34:	4770      	bx	lr

00000c36 <syscall_nsc_call_module>:
	__asm volatile
     c36:	2300      	movs	r3, #0
     c38:	1c04      	adds	r4, r0, #0
     c3a:	1c0d      	adds	r5, r1, #0
     c3c:	1c16      	adds	r6, r2, #0
     c3e:	1c1f      	adds	r7, r3, #0
     c40:	b480      	push	{r7}
     c42:	b440      	push	{r6}
     c44:	b420      	push	{r5}
     c46:	b410      	push	{r4}
     c48:	df04      	svc	4

void syscall_nsc_call_module(uint32_t module_id,uint32_t command_id,uint32_t *operation){
	syscall(SYS_nsc_call_module, module_id, command_id, operation, 0);
     c4a:	4770      	bx	lr

00000c4c <invoke_entry>:

SOS_Result_t invoke_entry(
    uint32_t command_id,
    SOS_Operation_t  *operation
){
    switch (command_id)
     c4c:	2801      	cmp	r0, #1
     c4e:	d000      	beq.n	c52 <invoke_entry+0x6>

        }

        default:
        {
            return SOS_ERROR_NOT_IMPLEMENTED;
     c50:	2003      	movs	r0, #3
        }
            
    }

     syscall_return(SYS_module_return);
     c52:	2005      	movs	r0, #5
     c54:	f640 4315 	movw	r3, #3093	; 0xc15
     c58:	f2c0 0300 	movt	r3, #0
     c5c:	4798      	blx	r3
}
     c5e:	e7f8      	b.n	c52 <invoke_entry+0x6>

00000c60 <init_test_module>:

SOS_Result_t init_test_module(){
     c60:	b510      	push	{r4, lr}
    return add_module(invoke_entry,SOS_TEST_MOUDLE_ID,maniifest);
     c62:	f240 0390 	movw	r3, #144	; 0x90
     c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c6a:	681a      	ldr	r2, [r3, #0]
     c6c:	f640 404d 	movw	r0, #3149	; 0xc4d
     c70:	f2c0 0000 	movt	r0, #0
     c74:	f241 2134 	movw	r1, #4660	; 0x1234
     c78:	f640 131d 	movw	r3, #2333	; 0x91d
     c7c:	f2c0 0300 	movt	r3, #0
     c80:	4798      	blx	r3
    
}
     c82:	bd10      	pop	{r4, pc}

00000c84 <func_plus3>:
/**
 * \brief This function will return a value of input parameter plus three.
 */
int func_plus3(int x)
{
	return x + 3;
     c84:	3003      	adds	r0, #3
}
     c86:	4770      	bx	lr

00000c88 <func_minus2>:
/**
 * \brief This function will return a value of input parameter minus two.
 */
int func_minus2(int x)
{
	return x - 2;
     c88:	3802      	subs	r0, #2
}
     c8a:	4770      	bx	lr

00000c8c <main>:
 * - Sets the non-secure main stack (MSP_NS)
 * - Gets the non-secure reset handler
 * - Jumps to the non-secure software application
 */
int main(void)
{
     c8c:	b510      	push	{r4, lr}
	funcptr_void NonSecure_ResetHandler;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     c8e:	f240 23a5 	movw	r3, #677	; 0x2a5
     c92:	f2c0 0300 	movt	r3, #0
     c96:	4798      	blx	r3
	
	/* Init the SOS kernel */
	kernel_init();
     c98:	f640 03df 	movw	r3, #2271	; 0x8df
     c9c:	f2c0 0300 	movt	r3, #0
     ca0:	4798      	blx	r3
	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(CONF_TZ_START_NS)));
     ca2:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	f383 8888 	msr	MSP_NS, r3

	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((CONF_TZ_START_NS) + 4U)));
     cac:	f248 0304 	movw	r3, #32772	; 0x8004

	/* Start non-secure state software application */
	NonSecure_ResetHandler();
     cb0:	681c      	ldr	r4, [r3, #0]
     cb2:	0864      	lsrs	r4, r4, #1
     cb4:	0064      	lsls	r4, r4, #1
     cb6:	0020      	movs	r0, r4
     cb8:	0021      	movs	r1, r4
     cba:	0022      	movs	r2, r4
     cbc:	0023      	movs	r3, r4
     cbe:	f000 f9dd 	bl	107c <__gnu_cmse_nonsecure_call>

	/* Replace with your application code */
	while (1) {
		__NOP();
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	e7fd      	b.n	cc2 <main+0x36>

00000cc6 <__acle_se_SecureContext_LoadContext>:
     cc6:	f3ef 8105 	mrs	r1, IPSR
     cca:	b121      	cbz	r1, cd6 <load_ctx_therad_mode>
     ccc:	c806      	ldmia	r0!, {r1, r2}
     cce:	f382 880b 	msr	PSPLIM, r2
     cd2:	f381 8809 	msr	PSP, r1

00000cd6 <load_ctx_therad_mode>:
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	2000      	movs	r0, #0
     cda:	0001      	movs	r1, r0
     cdc:	0002      	movs	r2, r0
     cde:	0003      	movs	r3, r0
     ce0:	4684      	mov	ip, r0
     ce2:	f38e 8800 	msr	CPSR_f, lr
     ce6:	4774      	bxns	lr

00000ce8 <__acle_se_SecureContext_SaveContext>:
     ce8:	f3ef 8105 	mrs	r1, IPSR
     cec:	b139      	cbz	r1, cfe <save_ctx_therad_mode>
     cee:	f3ef 8109 	mrs	r1, PSP
     cf2:	6001      	str	r1, [r0, #0]
     cf4:	2100      	movs	r1, #0
     cf6:	f381 880b 	msr	PSPLIM, r1
     cfa:	f381 8809 	msr	PSP, r1

00000cfe <save_ctx_therad_mode>:
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	2000      	movs	r0, #0
     d02:	0001      	movs	r1, r0
     d04:	0002      	movs	r2, r0
     d06:	0003      	movs	r3, r0
     d08:	4684      	mov	ip, r0
     d0a:	f38e 8800 	msr	CPSR_f, lr
     d0e:	4774      	bxns	lr

00000d10 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * secureheapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     d10:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 * than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     d12:	f240 0394 	movw	r3, #148	; 0x94
     d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d1a:	681a      	ldr	r2, [r3, #0]
     d1c:	4282      	cmp	r2, r0
     d1e:	d31c      	bcc.n	d5a <prvInsertBlockIntoFreeList+0x4a>
	}

	/* Do the block being inserted, and the block it is being inserted after
	 * make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     d20:	685c      	ldr	r4, [r3, #4]
     d22:	1919      	adds	r1, r3, r4
     d24:	4288      	cmp	r0, r1
     d26:	d103      	bne.n	d30 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     d28:	6841      	ldr	r1, [r0, #4]
     d2a:	1909      	adds	r1, r1, r4
     d2c:	6059      	str	r1, [r3, #4]
     d2e:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	 * make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     d30:	6844      	ldr	r4, [r0, #4]
     d32:	1901      	adds	r1, r0, r4
     d34:	428a      	cmp	r2, r1
     d36:	d114      	bne.n	d62 <prvInsertBlockIntoFreeList+0x52>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     d38:	f240 0194 	movw	r1, #148	; 0x94
     d3c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     d40:	6889      	ldr	r1, [r1, #8]
     d42:	428a      	cmp	r2, r1
     d44:	d00b      	beq.n	d5e <prvInsertBlockIntoFreeList+0x4e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     d46:	6852      	ldr	r2, [r2, #4]
     d48:	1912      	adds	r2, r2, r4
     d4a:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     d4c:	681a      	ldr	r2, [r3, #0]
     d4e:	6812      	ldr	r2, [r2, #0]
     d50:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	 * before and the block after, then it's pxNextFreeBlock pointer will have
	 * already been set, and should not be set here as that would make it point
	 * to itself. */
	if( pxIterator != pxBlockToInsert )
     d52:	4298      	cmp	r0, r3
     d54:	d000      	beq.n	d58 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     d56:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     d58:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     d5a:	0013      	movs	r3, r2
     d5c:	e7dd      	b.n	d1a <prvInsertBlockIntoFreeList+0xa>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     d5e:	6002      	str	r2, [r0, #0]
     d60:	e7f7      	b.n	d52 <prvInsertBlockIntoFreeList+0x42>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     d62:	6002      	str	r2, [r0, #0]
     d64:	e7f5      	b.n	d52 <prvInsertBlockIntoFreeList+0x42>

00000d66 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	/* If this is the first call to malloc then the heap will require
	 * initialisation to setup the list of free blocks. */
	if( pxEnd == NULL )
     d68:	f240 0394 	movw	r3, #148	; 0x94
     d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d70:	689b      	ldr	r3, [r3, #8]
     d72:	b313      	cbz	r3, dba <pvPortMalloc+0x54>

	/* Check the requested block size is not so large that the top bit is set.
	 * The top bit of the block size member of the BlockLink_t structure is used
	 * to determine who owns the block - the application or the kernel, so it
	 * must be free. */
	if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     d74:	f640 4394 	movw	r3, #3220	; 0xc94
     d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d7c:	695e      	ldr	r6, [r3, #20]
     d7e:	4230      	tst	r0, r6
     d80:	d000      	beq.n	d84 <pvPortMalloc+0x1e>
     d82:	e089      	b.n	e98 <pvPortMalloc+0x132>
	{
		/* The wanted size is increased so it can contain a BlockLink_t
		 * structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     d84:	2800      	cmp	r0, #0
     d86:	d100      	bne.n	d8a <pvPortMalloc+0x24>
     d88:	e088      	b.n	e9c <pvPortMalloc+0x136>
		{
			xWantedSize += xHeapStructSize;
     d8a:	0003      	movs	r3, r0
     d8c:	3308      	adds	r3, #8

			/* Ensure that blocks are always aligned to the required number of
			 * bytes. */
			if( ( xWantedSize & secureportBYTE_ALIGNMENT_MASK ) != 0x00 )
     d8e:	075a      	lsls	r2, r3, #29
     d90:	d002      	beq.n	d98 <pvPortMalloc+0x32>
			{
				/* Byte alignment required. */
				xWantedSize += ( secureportBYTE_ALIGNMENT - ( xWantedSize & secureportBYTE_ALIGNMENT_MASK ) );
     d92:	2207      	movs	r2, #7
     d94:	4393      	bics	r3, r2
     d96:	3308      	adds	r3, #8
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     d98:	2b00      	cmp	r3, #0
     d9a:	d100      	bne.n	d9e <pvPortMalloc+0x38>
     d9c:	e080      	b.n	ea0 <pvPortMalloc+0x13a>
     d9e:	f640 4294 	movw	r2, #3220	; 0xc94
     da2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     da6:	6917      	ldr	r7, [r2, #16]
     da8:	42bb      	cmp	r3, r7
     daa:	d900      	bls.n	dae <pvPortMalloc+0x48>
     dac:	e07a      	b.n	ea4 <pvPortMalloc+0x13e>
		{
			/* Traverse the list from the start (lowest address) block until
			 * one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     dae:	f240 0294 	movw	r2, #148	; 0x94
     db2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     db6:	6814      	ldr	r4, [r2, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     db8:	e02d      	b.n	e16 <pvPortMalloc+0xb0>
	uxAddress = ( size_t ) ucHeap;
     dba:	f240 0394 	movw	r3, #148	; 0x94
     dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dc2:	330c      	adds	r3, #12
size_t xTotalHeapSize = secureconfigTOTAL_HEAP_SIZE;
     dc4:	f640 4200 	movw	r2, #3072	; 0xc00
	if( ( uxAddress & secureportBYTE_ALIGNMENT_MASK ) != 0 )
     dc8:	0759      	lsls	r1, r3, #29
     dca:	d007      	beq.n	ddc <pvPortMalloc+0x76>
		uxAddress += ( secureportBYTE_ALIGNMENT - 1 );
     dcc:	1dd9      	adds	r1, r3, #7
		uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     dce:	2207      	movs	r2, #7
     dd0:	4391      	bics	r1, r2
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
     dd2:	f640 4c00 	movw	ip, #3072	; 0xc00
     dd6:	4463      	add	r3, ip
     dd8:	1a5a      	subs	r2, r3, r1
		uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     dda:	000b      	movs	r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     ddc:	f240 0194 	movw	r1, #148	; 0x94
     de0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     de4:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
     de6:	2400      	movs	r4, #0
     de8:	604c      	str	r4, [r1, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     dea:	189a      	adds	r2, r3, r2
	uxAddress -= xHeapStructSize;
     dec:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     dee:	2507      	movs	r5, #7
     df0:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
     df2:	608a      	str	r2, [r1, #8]
	pxEnd->xBlockSize = 0;
     df4:	6054      	str	r4, [r2, #4]
	pxEnd->pxNextFreeBlock = NULL;
     df6:	6014      	str	r4, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     df8:	1ad1      	subs	r1, r2, r3
     dfa:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     dfc:	601a      	str	r2, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     dfe:	f640 4394 	movw	r3, #3220	; 0xc94
     e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e06:	60d9      	str	r1, [r3, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e08:	6119      	str	r1, [r3, #16]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * secureheapBITS_PER_BYTE ) - 1 );
     e0a:	2280      	movs	r2, #128	; 0x80
     e0c:	0612      	lsls	r2, r2, #24
     e0e:	615a      	str	r2, [r3, #20]
     e10:	e7b0      	b.n	d74 <pvPortMalloc+0xe>
     e12:	0022      	movs	r2, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     e14:	000c      	movs	r4, r1
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     e16:	6861      	ldr	r1, [r4, #4]
     e18:	428b      	cmp	r3, r1
     e1a:	d902      	bls.n	e22 <pvPortMalloc+0xbc>
     e1c:	6821      	ldr	r1, [r4, #0]
     e1e:	2900      	cmp	r1, #0
     e20:	d1f7      	bne.n	e12 <pvPortMalloc+0xac>
			}

			/* If the end marker was reached then a block of adequate size was
			 * not found. */
			if( pxBlock != pxEnd )
     e22:	f240 0194 	movw	r1, #148	; 0x94
     e26:	f2c2 0100 	movt	r1, #8192	; 0x2000
     e2a:	6889      	ldr	r1, [r1, #8]
     e2c:	428c      	cmp	r4, r1
     e2e:	d03b      	beq.n	ea8 <pvPortMalloc+0x142>
			{
				/* Return the memory space pointed to - jumping over the
				 * BlockLink_t structure at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     e30:	6815      	ldr	r5, [r2, #0]

				/* This block is being returned for use so must be taken out
				 * of the list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     e32:	6821      	ldr	r1, [r4, #0]
     e34:	6011      	str	r1, [r2, #0]

				/* If the block is larger than required it can be split into
				 * two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > secureheapMINIMUM_BLOCK_SIZE )
     e36:	6862      	ldr	r2, [r4, #4]
     e38:	1ad2      	subs	r2, r2, r3
     e3a:	2a10      	cmp	r2, #16
     e3c:	d90f      	bls.n	e5e <pvPortMalloc+0xf8>
				{
					/* This block is to be split into two.  Create a new
					 * block following the number of bytes requested. The void
					 * cast is used to prevent byte alignment warnings from the
					 * compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     e3e:	18e0      	adds	r0, r4, r3
					secureportASSERT( ( ( ( size_t ) pxNewBlockLink ) & secureportBYTE_ALIGNMENT_MASK ) == 0 );
     e40:	0741      	lsls	r1, r0, #29
     e42:	d005      	beq.n	e50 <pvPortMalloc+0xea>
     e44:	2301      	movs	r3, #1
     e46:	f383 8810 	msr	PRIMASK, r3
     e4a:	f383 8890 	msr	PRIMASK_NS, r3
     e4e:	e7fe      	b.n	e4e <pvPortMalloc+0xe8>

					/* Calculate the sizes of two blocks split from the single
					 * block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     e50:	6042      	str	r2, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
     e52:	6063      	str	r3, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( pxNewBlockLink );
     e54:	f640 5311 	movw	r3, #3345	; 0xd11
     e58:	f2c0 0300 	movt	r3, #0
     e5c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     e5e:	6861      	ldr	r1, [r4, #4]
     e60:	1a7f      	subs	r7, r7, r1
     e62:	f640 4294 	movw	r2, #3220	; 0xc94
     e66:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e6a:	6117      	str	r7, [r2, #16]

				if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     e6c:	68d2      	ldr	r2, [r2, #12]
     e6e:	4297      	cmp	r7, r2
     e70:	d204      	bcs.n	e7c <pvPortMalloc+0x116>
				{
					xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     e72:	f640 4294 	movw	r2, #3220	; 0xc94
     e76:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e7a:	60d7      	str	r7, [r2, #12]
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     e7c:	0028      	movs	r0, r5
     e7e:	3008      	adds	r0, #8
					mtCOVERAGE_TEST_MARKER();
				}

				/* The block is being returned - it is allocated and owned by
				 * the application and has no "next" block. */
				pxBlock->xBlockSize |= xBlockAllocatedBit;
     e80:	430e      	orrs	r6, r1
     e82:	6066      	str	r6, [r4, #4]
				pxBlock->pxNextFreeBlock = NULL;
     e84:	2300      	movs	r3, #0
     e86:	6023      	str	r3, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	secureportASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) secureportBYTE_ALIGNMENT_MASK ) == 0 );
     e88:	0743      	lsls	r3, r0, #29
     e8a:	d008      	beq.n	e9e <pvPortMalloc+0x138>
     e8c:	2301      	movs	r3, #1
     e8e:	f383 8810 	msr	PRIMASK, r3
     e92:	f383 8890 	msr	PRIMASK_NS, r3
     e96:	e7fe      	b.n	e96 <pvPortMalloc+0x130>
     e98:	2000      	movs	r0, #0
     e9a:	e000      	b.n	e9e <pvPortMalloc+0x138>
void *pvReturn = NULL;
     e9c:	2000      	movs	r0, #0
	return pvReturn;
}
     e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ea0:	2000      	movs	r0, #0
     ea2:	e7fc      	b.n	e9e <pvPortMalloc+0x138>
     ea4:	2000      	movs	r0, #0
     ea6:	e7fa      	b.n	e9e <pvPortMalloc+0x138>
     ea8:	2000      	movs	r0, #0
	return pvReturn;
     eaa:	e7f8      	b.n	e9e <pvPortMalloc+0x138>

00000eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     eac:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     eae:	b380      	cbz	r0, f12 <vPortFree+0x66>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		secureportASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
     eb0:	0003      	movs	r3, r0
     eb2:	3b08      	subs	r3, #8
     eb4:	685b      	ldr	r3, [r3, #4]
     eb6:	f640 4294 	movw	r2, #3220	; 0xc94
     eba:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ebe:	6952      	ldr	r2, [r2, #20]
     ec0:	421a      	tst	r2, r3
     ec2:	d105      	bne.n	ed0 <vPortFree+0x24>
     ec4:	2301      	movs	r3, #1
     ec6:	f383 8810 	msr	PRIMASK, r3
     eca:	f383 8890 	msr	PRIMASK_NS, r3
     ece:	e7fe      	b.n	ece <vPortFree+0x22>
		secureportASSERT( pxLink->pxNextFreeBlock == NULL );
     ed0:	0001      	movs	r1, r0
     ed2:	3908      	subs	r1, #8
     ed4:	6809      	ldr	r1, [r1, #0]
     ed6:	b129      	cbz	r1, ee4 <vPortFree+0x38>
     ed8:	2301      	movs	r3, #1
     eda:	f383 8810 	msr	PRIMASK, r3
     ede:	f383 8890 	msr	PRIMASK_NS, r3
     ee2:	e7fe      	b.n	ee2 <vPortFree+0x36>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				 * allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     ee4:	3808      	subs	r0, #8
     ee6:	4393      	bics	r3, r2
     ee8:	6043      	str	r3, [r0, #4]

				secureportDISABLE_NON_SECURE_INTERRUPTS();
     eea:	2301      	movs	r3, #1
     eec:	f383 8890 	msr	PRIMASK_NS, r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     ef0:	f640 4394 	movw	r3, #3220	; 0xc94
     ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ef8:	6842      	ldr	r2, [r0, #4]
     efa:	6919      	ldr	r1, [r3, #16]
     efc:	468c      	mov	ip, r1
     efe:	4462      	add	r2, ip
     f00:	611a      	str	r2, [r3, #16]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     f02:	f640 5311 	movw	r3, #3345	; 0xd11
     f06:	f2c0 0300 	movt	r3, #0
     f0a:	4798      	blx	r3
				}
				secureportENABLE_NON_SECURE_INTERRUPTS();
     f0c:	2300      	movs	r3, #0
     f0e:	f383 8890 	msr	PRIMASK_NS, r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     f12:	bd10      	pop	{r4, pc}

00000f14 <__acle_se_SecureInit_DePrioritizeNSExceptions>:
     f14:	f3ef 8305 	mrs	r3, IPSR
     f18:	b16b      	cbz	r3, f36 <__acle_se_SecureInit_DePrioritizeNSExceptions+0x22>
     f1a:	f64e 520c 	movw	r2, #60684	; 0xed0c
     f1e:	f2ce 0200 	movt	r2, #57344	; 0xe000
     f22:	6811      	ldr	r1, [r2, #0]
     f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
     f28:	4019      	ands	r1, r3
     f2a:	f244 0300 	movw	r3, #16384	; 0x4000
     f2e:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
     f32:	430b      	orrs	r3, r1
     f34:	6013      	str	r3, [r2, #0]
     f36:	2000      	movs	r0, #0
     f38:	0001      	movs	r1, r0
     f3a:	0002      	movs	r2, r0
     f3c:	0003      	movs	r3, r0
     f3e:	4684      	mov	ip, r0
     f40:	f38e 8800 	msr	CPSR_f, lr
     f44:	4774      	bxns	lr
	...

00000f48 <__acle_se_SecureInit_EnableNSFPUAccess>:
     f48:	f3ef 8305 	mrs	r3, IPSR
     f4c:	b1ab      	cbz	r3, f7a <__acle_se_SecureInit_EnableNSFPUAccess+0x32>
     f4e:	f64e 538c 	movw	r3, #60812	; 0xed8c
     f52:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f56:	681a      	ldr	r2, [r3, #0]
     f58:	f640 4100 	movw	r1, #3072	; 0xc00
     f5c:	430a      	orrs	r2, r1
     f5e:	601a      	str	r2, [r3, #0]
     f60:	f64e 7334 	movw	r3, #61236	; 0xef34
     f64:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f68:	681a      	ldr	r2, [r3, #0]
     f6a:	4908      	ldr	r1, [pc, #32]	; (f8c <__acle_se_SecureInit_EnableNSFPUAccess+0x44>)
     f6c:	400a      	ands	r2, r1
     f6e:	601a      	str	r2, [r3, #0]
     f70:	6819      	ldr	r1, [r3, #0]
     f72:	2280      	movs	r2, #128	; 0x80
     f74:	04d2      	lsls	r2, r2, #19
     f76:	430a      	orrs	r2, r1
     f78:	601a      	str	r2, [r3, #0]
     f7a:	2000      	movs	r0, #0
     f7c:	0001      	movs	r1, r0
     f7e:	0002      	movs	r2, r0
     f80:	0003      	movs	r3, r0
     f82:	4684      	mov	ip, r0
     f84:	f38e 8800 	msr	CPSR_f, lr
     f88:	4774      	bxns	lr
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	dfffffff 	.word	0xdfffffff

00000f90 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
     f90:	b510      	push	{r4, lr}
     f92:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
     f94:	b960      	cbnz	r0, fb0 <_read+0x20>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
     f96:	0011      	movs	r1, r2
     f98:	0018      	movs	r0, r3
     f9a:	f241 0311 	movw	r3, #4113	; 0x1011
     f9e:	f2c0 0300 	movt	r3, #0
     fa2:	4798      	blx	r3
     fa4:	2800      	cmp	r0, #0
     fa6:	db00      	blt.n	faa <_read+0x1a>
	if (n < 0) {
		return -1;
	}

	return n;
}
     fa8:	bd10      	pop	{r4, pc}
     faa:	2001      	movs	r0, #1
     fac:	4240      	negs	r0, r0
     fae:	e7fb      	b.n	fa8 <_read+0x18>
		return -1;
     fb0:	2001      	movs	r0, #1
     fb2:	4240      	negs	r0, r0
     fb4:	e7f8      	b.n	fa8 <_read+0x18>

00000fb6 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
     fb6:	b510      	push	{r4, lr}
     fb8:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     fba:	3801      	subs	r0, #1
     fbc:	2802      	cmp	r0, #2
     fbe:	d80c      	bhi.n	fda <_write+0x24>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
     fc0:	0011      	movs	r1, r2
     fc2:	0018      	movs	r0, r3
     fc4:	f241 0335 	movw	r3, #4149	; 0x1035
     fc8:	f2c0 0300 	movt	r3, #0
     fcc:	4798      	blx	r3
     fce:	2800      	cmp	r0, #0
     fd0:	db00      	blt.n	fd4 <_write+0x1e>
	if (n < 0) {
		return -1;
	}

	return n;
}
     fd2:	bd10      	pop	{r4, pc}
     fd4:	2001      	movs	r0, #1
     fd6:	4240      	negs	r0, r0
     fd8:	e7fb      	b.n	fd2 <_write+0x1c>
		return -1;
     fda:	2001      	movs	r0, #1
     fdc:	4240      	negs	r0, r0
     fde:	e7f8      	b.n	fd2 <_write+0x1c>

00000fe0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
     fe4:	f240 0504 	movw	r5, #4
     fe8:	f2c2 0500 	movt	r5, #8192	; 0x2000
     fec:	682b      	ldr	r3, [r5, #0]
     fee:	6898      	ldr	r0, [r3, #8]
     ff0:	2100      	movs	r1, #0
     ff2:	f241 1441 	movw	r4, #4417	; 0x1141
     ff6:	f2c0 0400 	movt	r4, #0
     ffa:	47a0      	blx	r4
	setbuf(stdin, NULL);
     ffc:	682b      	ldr	r3, [r5, #0]
     ffe:	6858      	ldr	r0, [r3, #4]
    1000:	2100      	movs	r1, #0
    1002:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1004:	f640 43ac 	movw	r3, #3244	; 0xcac
    1008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    100c:	601e      	str	r6, [r3, #0]
}
    100e:	bd70      	pop	{r4, r5, r6, pc}

00001010 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1010:	b510      	push	{r4, lr}
    1012:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1014:	f640 43ac 	movw	r3, #3244	; 0xcac
    1018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    101c:	6818      	ldr	r0, [r3, #0]
    101e:	b138      	cbz	r0, 1030 <stdio_io_read+0x20>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1020:	b28a      	uxth	r2, r1
    1022:	0021      	movs	r1, r4
    1024:	f240 438b 	movw	r3, #1163	; 0x48b
    1028:	f2c0 0300 	movt	r3, #0
    102c:	4798      	blx	r3
}
    102e:	bd10      	pop	{r4, pc}
		return 0;
    1030:	2000      	movs	r0, #0
    1032:	e7fc      	b.n	102e <stdio_io_read+0x1e>

00001034 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1034:	b510      	push	{r4, lr}
    1036:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1038:	f640 43ac 	movw	r3, #3244	; 0xcac
    103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1040:	6818      	ldr	r0, [r3, #0]
    1042:	b138      	cbz	r0, 1054 <stdio_io_write+0x20>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1044:	b28a      	uxth	r2, r1
    1046:	0021      	movs	r1, r4
    1048:	f240 4355 	movw	r3, #1109	; 0x455
    104c:	f2c0 0300 	movt	r3, #0
    1050:	4798      	blx	r3
}
    1052:	bd10      	pop	{r4, pc}
		return 0;
    1054:	2000      	movs	r0, #0
    1056:	e7fc      	b.n	1052 <stdio_io_write+0x1e>

00001058 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1058:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    105a:	f640 44b8 	movw	r4, #3256	; 0xcb8
    105e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1062:	0020      	movs	r0, r4
    1064:	f240 6305 	movw	r3, #1541	; 0x605
    1068:	f2c0 0300 	movt	r3, #0
    106c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    106e:	0020      	movs	r0, r4
    1070:	f640 73e1 	movw	r3, #4065	; 0xfe1
    1074:	f2c0 0300 	movt	r3, #0
    1078:	4798      	blx	r3
}
    107a:	bd10      	pop	{r4, pc}

0000107c <__gnu_cmse_nonsecure_call>:
    107c:	b5e0      	push	{r5, r6, r7, lr}
    107e:	4645      	mov	r5, r8
    1080:	464e      	mov	r6, r9
    1082:	4657      	mov	r7, sl
    1084:	b4e0      	push	{r5, r6, r7}
    1086:	465d      	mov	r5, fp
    1088:	b420      	push	{r5}
    108a:	4625      	mov	r5, r4
    108c:	4626      	mov	r6, r4
    108e:	4627      	mov	r7, r4
    1090:	46a0      	mov	r8, r4
    1092:	46a1      	mov	r9, r4
    1094:	46a2      	mov	sl, r4
    1096:	46a3      	mov	fp, r4
    1098:	46a4      	mov	ip, r4
    109a:	f384 8800 	msr	CPSR_f, r4
    109e:	47a4      	blxns	r4
    10a0:	bc20      	pop	{r5}
    10a2:	46ab      	mov	fp, r5
    10a4:	bce0      	pop	{r5, r6, r7}
    10a6:	46ba      	mov	sl, r7
    10a8:	46b1      	mov	r9, r6
    10aa:	46a8      	mov	r8, r5
    10ac:	bde0      	pop	{r5, r6, r7, pc}
	...

000010b0 <__libc_init_array>:
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	2500      	movs	r5, #0
    10b4:	4b0e      	ldr	r3, [pc, #56]	; (10f0 <__libc_init_array+0x40>)
    10b6:	4c0f      	ldr	r4, [pc, #60]	; (10f4 <__libc_init_array+0x44>)
    10b8:	1ae4      	subs	r4, r4, r3
    10ba:	10a4      	asrs	r4, r4, #2
    10bc:	42a5      	cmp	r5, r4
    10be:	d109      	bne.n	10d4 <__libc_init_array+0x24>
    10c0:	2500      	movs	r5, #0
    10c2:	f001 f863 	bl	218c <_init>
    10c6:	4c0c      	ldr	r4, [pc, #48]	; (10f8 <__libc_init_array+0x48>)
    10c8:	4b0c      	ldr	r3, [pc, #48]	; (10fc <__libc_init_array+0x4c>)
    10ca:	1ae4      	subs	r4, r4, r3
    10cc:	10a4      	asrs	r4, r4, #2
    10ce:	42a5      	cmp	r5, r4
    10d0:	d107      	bne.n	10e2 <__libc_init_array+0x32>
    10d2:	bd70      	pop	{r4, r5, r6, pc}
    10d4:	4a06      	ldr	r2, [pc, #24]	; (10f0 <__libc_init_array+0x40>)
    10d6:	00ab      	lsls	r3, r5, #2
    10d8:	189b      	adds	r3, r3, r2
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	4798      	blx	r3
    10de:	3501      	adds	r5, #1
    10e0:	e7ec      	b.n	10bc <__libc_init_array+0xc>
    10e2:	4a06      	ldr	r2, [pc, #24]	; (10fc <__libc_init_array+0x4c>)
    10e4:	00ab      	lsls	r3, r5, #2
    10e6:	189b      	adds	r3, r3, r2
    10e8:	681b      	ldr	r3, [r3, #0]
    10ea:	4798      	blx	r3
    10ec:	3501      	adds	r5, #1
    10ee:	e7ee      	b.n	10ce <__libc_init_array+0x1e>
    10f0:	00002198 	.word	0x00002198
    10f4:	00002198 	.word	0x00002198
    10f8:	0000219c 	.word	0x0000219c
    10fc:	00002198 	.word	0x00002198

00001100 <memset>:
    1100:	0003      	movs	r3, r0
    1102:	1882      	adds	r2, r0, r2
    1104:	4293      	cmp	r3, r2
    1106:	d100      	bne.n	110a <memset+0xa>
    1108:	4770      	bx	lr
    110a:	7019      	strb	r1, [r3, #0]
    110c:	3301      	adds	r3, #1
    110e:	e7f9      	b.n	1104 <memset+0x4>

00001110 <iprintf>:
    1110:	b40f      	push	{r0, r1, r2, r3}
    1112:	4b0a      	ldr	r3, [pc, #40]	; (113c <iprintf+0x2c>)
    1114:	b513      	push	{r0, r1, r4, lr}
    1116:	681c      	ldr	r4, [r3, #0]
    1118:	b124      	cbz	r4, 1124 <iprintf+0x14>
    111a:	69a3      	ldr	r3, [r4, #24]
    111c:	b913      	cbnz	r3, 1124 <iprintf+0x14>
    111e:	0020      	movs	r0, r4
    1120:	f000 fa78 	bl	1614 <__sinit>
    1124:	ab05      	add	r3, sp, #20
    1126:	9a04      	ldr	r2, [sp, #16]
    1128:	68a1      	ldr	r1, [r4, #8]
    112a:	0020      	movs	r0, r4
    112c:	9301      	str	r3, [sp, #4]
    112e:	f000 fc41 	bl	19b4 <_vfiprintf_r>
    1132:	bc16      	pop	{r1, r2, r4}
    1134:	bc08      	pop	{r3}
    1136:	b004      	add	sp, #16
    1138:	4718      	bx	r3
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	20000004 	.word	0x20000004

00001140 <setbuf>:
    1140:	424a      	negs	r2, r1
    1142:	414a      	adcs	r2, r1
    1144:	b510      	push	{r4, lr}
    1146:	0052      	lsls	r2, r2, #1
    1148:	f240 4300 	movw	r3, #1024	; 0x400
    114c:	f000 f802 	bl	1154 <setvbuf>
    1150:	bd10      	pop	{r4, pc}
	...

00001154 <setvbuf>:
    1154:	b5f0      	push	{r4, r5, r6, r7, lr}
    1156:	001d      	movs	r5, r3
    1158:	4b4d      	ldr	r3, [pc, #308]	; (1290 <setvbuf+0x13c>)
    115a:	b085      	sub	sp, #20
    115c:	681e      	ldr	r6, [r3, #0]
    115e:	0004      	movs	r4, r0
    1160:	000f      	movs	r7, r1
    1162:	9200      	str	r2, [sp, #0]
    1164:	b126      	cbz	r6, 1170 <setvbuf+0x1c>
    1166:	69b3      	ldr	r3, [r6, #24]
    1168:	b913      	cbnz	r3, 1170 <setvbuf+0x1c>
    116a:	0030      	movs	r0, r6
    116c:	f000 fa52 	bl	1614 <__sinit>
    1170:	4b48      	ldr	r3, [pc, #288]	; (1294 <setvbuf+0x140>)
    1172:	429c      	cmp	r4, r3
    1174:	d14f      	bne.n	1216 <setvbuf+0xc2>
    1176:	6874      	ldr	r4, [r6, #4]
    1178:	9b00      	ldr	r3, [sp, #0]
    117a:	2b02      	cmp	r3, #2
    117c:	d005      	beq.n	118a <setvbuf+0x36>
    117e:	2b01      	cmp	r3, #1
    1180:	d900      	bls.n	1184 <setvbuf+0x30>
    1182:	e082      	b.n	128a <setvbuf+0x136>
    1184:	2d00      	cmp	r5, #0
    1186:	da00      	bge.n	118a <setvbuf+0x36>
    1188:	e07f      	b.n	128a <setvbuf+0x136>
    118a:	0021      	movs	r1, r4
    118c:	0030      	movs	r0, r6
    118e:	f000 f9d5 	bl	153c <_fflush_r>
    1192:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1194:	b141      	cbz	r1, 11a8 <setvbuf+0x54>
    1196:	0023      	movs	r3, r4
    1198:	3344      	adds	r3, #68	; 0x44
    119a:	4299      	cmp	r1, r3
    119c:	d002      	beq.n	11a4 <setvbuf+0x50>
    119e:	0030      	movs	r0, r6
    11a0:	f000 fb38 	bl	1814 <_free_r>
    11a4:	2300      	movs	r3, #0
    11a6:	6363      	str	r3, [r4, #52]	; 0x34
    11a8:	2300      	movs	r3, #0
    11aa:	61a3      	str	r3, [r4, #24]
    11ac:	6063      	str	r3, [r4, #4]
    11ae:	89a3      	ldrh	r3, [r4, #12]
    11b0:	061b      	lsls	r3, r3, #24
    11b2:	d503      	bpl.n	11bc <setvbuf+0x68>
    11b4:	6921      	ldr	r1, [r4, #16]
    11b6:	0030      	movs	r0, r6
    11b8:	f000 fb2c 	bl	1814 <_free_r>
    11bc:	89a3      	ldrh	r3, [r4, #12]
    11be:	4a36      	ldr	r2, [pc, #216]	; (1298 <setvbuf+0x144>)
    11c0:	4013      	ands	r3, r2
    11c2:	81a3      	strh	r3, [r4, #12]
    11c4:	9b00      	ldr	r3, [sp, #0]
    11c6:	2b02      	cmp	r3, #2
    11c8:	d059      	beq.n	127e <setvbuf+0x12a>
    11ca:	ab03      	add	r3, sp, #12
    11cc:	aa02      	add	r2, sp, #8
    11ce:	0021      	movs	r1, r4
    11d0:	0030      	movs	r0, r6
    11d2:	f000 faad 	bl	1730 <__swhatbuf_r>
    11d6:	89a3      	ldrh	r3, [r4, #12]
    11d8:	4318      	orrs	r0, r3
    11da:	81a0      	strh	r0, [r4, #12]
    11dc:	bb2d      	cbnz	r5, 122a <setvbuf+0xd6>
    11de:	9d02      	ldr	r5, [sp, #8]
    11e0:	0028      	movs	r0, r5
    11e2:	f000 fb0d 	bl	1800 <malloc>
    11e6:	9501      	str	r5, [sp, #4]
    11e8:	0007      	movs	r7, r0
    11ea:	2800      	cmp	r0, #0
    11ec:	d141      	bne.n	1272 <setvbuf+0x11e>
    11ee:	9b02      	ldr	r3, [sp, #8]
    11f0:	9301      	str	r3, [sp, #4]
    11f2:	42ab      	cmp	r3, r5
    11f4:	d137      	bne.n	1266 <setvbuf+0x112>
    11f6:	2001      	movs	r0, #1
    11f8:	4240      	negs	r0, r0
    11fa:	2302      	movs	r3, #2
    11fc:	89a2      	ldrh	r2, [r4, #12]
    11fe:	4313      	orrs	r3, r2
    1200:	81a3      	strh	r3, [r4, #12]
    1202:	2300      	movs	r3, #0
    1204:	60a3      	str	r3, [r4, #8]
    1206:	0023      	movs	r3, r4
    1208:	3347      	adds	r3, #71	; 0x47
    120a:	6023      	str	r3, [r4, #0]
    120c:	6123      	str	r3, [r4, #16]
    120e:	2301      	movs	r3, #1
    1210:	6163      	str	r3, [r4, #20]
    1212:	b005      	add	sp, #20
    1214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1216:	4b21      	ldr	r3, [pc, #132]	; (129c <setvbuf+0x148>)
    1218:	429c      	cmp	r4, r3
    121a:	d101      	bne.n	1220 <setvbuf+0xcc>
    121c:	68b4      	ldr	r4, [r6, #8]
    121e:	e7ab      	b.n	1178 <setvbuf+0x24>
    1220:	4b1f      	ldr	r3, [pc, #124]	; (12a0 <setvbuf+0x14c>)
    1222:	429c      	cmp	r4, r3
    1224:	d1a8      	bne.n	1178 <setvbuf+0x24>
    1226:	68f4      	ldr	r4, [r6, #12]
    1228:	e7a6      	b.n	1178 <setvbuf+0x24>
    122a:	2f00      	cmp	r7, #0
    122c:	d0d8      	beq.n	11e0 <setvbuf+0x8c>
    122e:	69b3      	ldr	r3, [r6, #24]
    1230:	b913      	cbnz	r3, 1238 <setvbuf+0xe4>
    1232:	0030      	movs	r0, r6
    1234:	f000 f9ee 	bl	1614 <__sinit>
    1238:	9b00      	ldr	r3, [sp, #0]
    123a:	2b01      	cmp	r3, #1
    123c:	d103      	bne.n	1246 <setvbuf+0xf2>
    123e:	89a3      	ldrh	r3, [r4, #12]
    1240:	9a00      	ldr	r2, [sp, #0]
    1242:	431a      	orrs	r2, r3
    1244:	81a2      	strh	r2, [r4, #12]
    1246:	2008      	movs	r0, #8
    1248:	89a3      	ldrh	r3, [r4, #12]
    124a:	6027      	str	r7, [r4, #0]
    124c:	4018      	ands	r0, r3
    124e:	6127      	str	r7, [r4, #16]
    1250:	6165      	str	r5, [r4, #20]
    1252:	b1c0      	cbz	r0, 1286 <setvbuf+0x132>
    1254:	2001      	movs	r0, #1
    1256:	4018      	ands	r0, r3
    1258:	2300      	movs	r3, #0
    125a:	b190      	cbz	r0, 1282 <setvbuf+0x12e>
    125c:	426d      	negs	r5, r5
    125e:	60a3      	str	r3, [r4, #8]
    1260:	61a5      	str	r5, [r4, #24]
    1262:	0018      	movs	r0, r3
    1264:	e7d5      	b.n	1212 <setvbuf+0xbe>
    1266:	9801      	ldr	r0, [sp, #4]
    1268:	f000 faca 	bl	1800 <malloc>
    126c:	0007      	movs	r7, r0
    126e:	2800      	cmp	r0, #0
    1270:	d0c1      	beq.n	11f6 <setvbuf+0xa2>
    1272:	2380      	movs	r3, #128	; 0x80
    1274:	89a2      	ldrh	r2, [r4, #12]
    1276:	9d01      	ldr	r5, [sp, #4]
    1278:	4313      	orrs	r3, r2
    127a:	81a3      	strh	r3, [r4, #12]
    127c:	e7d7      	b.n	122e <setvbuf+0xda>
    127e:	2000      	movs	r0, #0
    1280:	e7bb      	b.n	11fa <setvbuf+0xa6>
    1282:	60a5      	str	r5, [r4, #8]
    1284:	e7c5      	b.n	1212 <setvbuf+0xbe>
    1286:	60a0      	str	r0, [r4, #8]
    1288:	e7c3      	b.n	1212 <setvbuf+0xbe>
    128a:	2001      	movs	r0, #1
    128c:	4240      	negs	r0, r0
    128e:	e7c0      	b.n	1212 <setvbuf+0xbe>
    1290:	20000004 	.word	0x20000004
    1294:	00002118 	.word	0x00002118
    1298:	fffff35c 	.word	0xfffff35c
    129c:	00002138 	.word	0x00002138
    12a0:	000020f8 	.word	0x000020f8

000012a4 <__swbuf_r>:
    12a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12a6:	0005      	movs	r5, r0
    12a8:	000e      	movs	r6, r1
    12aa:	0014      	movs	r4, r2
    12ac:	b118      	cbz	r0, 12b6 <__swbuf_r+0x12>
    12ae:	6983      	ldr	r3, [r0, #24]
    12b0:	b90b      	cbnz	r3, 12b6 <__swbuf_r+0x12>
    12b2:	f000 f9af 	bl	1614 <__sinit>
    12b6:	4b21      	ldr	r3, [pc, #132]	; (133c <__swbuf_r+0x98>)
    12b8:	429c      	cmp	r4, r3
    12ba:	d12a      	bne.n	1312 <__swbuf_r+0x6e>
    12bc:	686c      	ldr	r4, [r5, #4]
    12be:	69a3      	ldr	r3, [r4, #24]
    12c0:	60a3      	str	r3, [r4, #8]
    12c2:	89a3      	ldrh	r3, [r4, #12]
    12c4:	071b      	lsls	r3, r3, #28
    12c6:	d52e      	bpl.n	1326 <__swbuf_r+0x82>
    12c8:	6923      	ldr	r3, [r4, #16]
    12ca:	b363      	cbz	r3, 1326 <__swbuf_r+0x82>
    12cc:	6823      	ldr	r3, [r4, #0]
    12ce:	6922      	ldr	r2, [r4, #16]
    12d0:	b2f7      	uxtb	r7, r6
    12d2:	1a98      	subs	r0, r3, r2
    12d4:	6963      	ldr	r3, [r4, #20]
    12d6:	b2f6      	uxtb	r6, r6
    12d8:	4298      	cmp	r0, r3
    12da:	db04      	blt.n	12e6 <__swbuf_r+0x42>
    12dc:	0021      	movs	r1, r4
    12de:	0028      	movs	r0, r5
    12e0:	f000 f92c 	bl	153c <_fflush_r>
    12e4:	bb28      	cbnz	r0, 1332 <__swbuf_r+0x8e>
    12e6:	68a3      	ldr	r3, [r4, #8]
    12e8:	3001      	adds	r0, #1
    12ea:	3b01      	subs	r3, #1
    12ec:	60a3      	str	r3, [r4, #8]
    12ee:	6823      	ldr	r3, [r4, #0]
    12f0:	1c5a      	adds	r2, r3, #1
    12f2:	6022      	str	r2, [r4, #0]
    12f4:	701f      	strb	r7, [r3, #0]
    12f6:	6963      	ldr	r3, [r4, #20]
    12f8:	4298      	cmp	r0, r3
    12fa:	d004      	beq.n	1306 <__swbuf_r+0x62>
    12fc:	89a3      	ldrh	r3, [r4, #12]
    12fe:	07db      	lsls	r3, r3, #31
    1300:	d519      	bpl.n	1336 <__swbuf_r+0x92>
    1302:	2e0a      	cmp	r6, #10
    1304:	d117      	bne.n	1336 <__swbuf_r+0x92>
    1306:	0021      	movs	r1, r4
    1308:	0028      	movs	r0, r5
    130a:	f000 f917 	bl	153c <_fflush_r>
    130e:	b190      	cbz	r0, 1336 <__swbuf_r+0x92>
    1310:	e00f      	b.n	1332 <__swbuf_r+0x8e>
    1312:	4b0b      	ldr	r3, [pc, #44]	; (1340 <__swbuf_r+0x9c>)
    1314:	429c      	cmp	r4, r3
    1316:	d101      	bne.n	131c <__swbuf_r+0x78>
    1318:	68ac      	ldr	r4, [r5, #8]
    131a:	e7d0      	b.n	12be <__swbuf_r+0x1a>
    131c:	4b09      	ldr	r3, [pc, #36]	; (1344 <__swbuf_r+0xa0>)
    131e:	429c      	cmp	r4, r3
    1320:	d1cd      	bne.n	12be <__swbuf_r+0x1a>
    1322:	68ec      	ldr	r4, [r5, #12]
    1324:	e7cb      	b.n	12be <__swbuf_r+0x1a>
    1326:	0021      	movs	r1, r4
    1328:	0028      	movs	r0, r5
    132a:	f000 f80d 	bl	1348 <__swsetup_r>
    132e:	2800      	cmp	r0, #0
    1330:	d0cc      	beq.n	12cc <__swbuf_r+0x28>
    1332:	2601      	movs	r6, #1
    1334:	4276      	negs	r6, r6
    1336:	0030      	movs	r0, r6
    1338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	00002118 	.word	0x00002118
    1340:	00002138 	.word	0x00002138
    1344:	000020f8 	.word	0x000020f8

00001348 <__swsetup_r>:
    1348:	4b34      	ldr	r3, [pc, #208]	; (141c <__swsetup_r+0xd4>)
    134a:	b570      	push	{r4, r5, r6, lr}
    134c:	681d      	ldr	r5, [r3, #0]
    134e:	0006      	movs	r6, r0
    1350:	000c      	movs	r4, r1
    1352:	b125      	cbz	r5, 135e <__swsetup_r+0x16>
    1354:	69ab      	ldr	r3, [r5, #24]
    1356:	b913      	cbnz	r3, 135e <__swsetup_r+0x16>
    1358:	0028      	movs	r0, r5
    135a:	f000 f95b 	bl	1614 <__sinit>
    135e:	4b30      	ldr	r3, [pc, #192]	; (1420 <__swsetup_r+0xd8>)
    1360:	429c      	cmp	r4, r3
    1362:	d10f      	bne.n	1384 <__swsetup_r+0x3c>
    1364:	686c      	ldr	r4, [r5, #4]
    1366:	230c      	movs	r3, #12
    1368:	5ee2      	ldrsh	r2, [r4, r3]
    136a:	b293      	uxth	r3, r2
    136c:	0719      	lsls	r1, r3, #28
    136e:	d42c      	bmi.n	13ca <__swsetup_r+0x82>
    1370:	06d9      	lsls	r1, r3, #27
    1372:	d411      	bmi.n	1398 <__swsetup_r+0x50>
    1374:	2309      	movs	r3, #9
    1376:	2001      	movs	r0, #1
    1378:	6033      	str	r3, [r6, #0]
    137a:	3337      	adds	r3, #55	; 0x37
    137c:	4313      	orrs	r3, r2
    137e:	81a3      	strh	r3, [r4, #12]
    1380:	4240      	negs	r0, r0
    1382:	bd70      	pop	{r4, r5, r6, pc}
    1384:	4b27      	ldr	r3, [pc, #156]	; (1424 <__swsetup_r+0xdc>)
    1386:	429c      	cmp	r4, r3
    1388:	d101      	bne.n	138e <__swsetup_r+0x46>
    138a:	68ac      	ldr	r4, [r5, #8]
    138c:	e7eb      	b.n	1366 <__swsetup_r+0x1e>
    138e:	4b26      	ldr	r3, [pc, #152]	; (1428 <__swsetup_r+0xe0>)
    1390:	429c      	cmp	r4, r3
    1392:	d1e8      	bne.n	1366 <__swsetup_r+0x1e>
    1394:	68ec      	ldr	r4, [r5, #12]
    1396:	e7e6      	b.n	1366 <__swsetup_r+0x1e>
    1398:	075b      	lsls	r3, r3, #29
    139a:	d512      	bpl.n	13c2 <__swsetup_r+0x7a>
    139c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    139e:	b141      	cbz	r1, 13b2 <__swsetup_r+0x6a>
    13a0:	0023      	movs	r3, r4
    13a2:	3344      	adds	r3, #68	; 0x44
    13a4:	4299      	cmp	r1, r3
    13a6:	d002      	beq.n	13ae <__swsetup_r+0x66>
    13a8:	0030      	movs	r0, r6
    13aa:	f000 fa33 	bl	1814 <_free_r>
    13ae:	2300      	movs	r3, #0
    13b0:	6363      	str	r3, [r4, #52]	; 0x34
    13b2:	2224      	movs	r2, #36	; 0x24
    13b4:	89a3      	ldrh	r3, [r4, #12]
    13b6:	4393      	bics	r3, r2
    13b8:	81a3      	strh	r3, [r4, #12]
    13ba:	2300      	movs	r3, #0
    13bc:	6063      	str	r3, [r4, #4]
    13be:	6923      	ldr	r3, [r4, #16]
    13c0:	6023      	str	r3, [r4, #0]
    13c2:	2308      	movs	r3, #8
    13c4:	89a2      	ldrh	r2, [r4, #12]
    13c6:	4313      	orrs	r3, r2
    13c8:	81a3      	strh	r3, [r4, #12]
    13ca:	6923      	ldr	r3, [r4, #16]
    13cc:	b95b      	cbnz	r3, 13e6 <__swsetup_r+0x9e>
    13ce:	f240 2180 	movw	r1, #640	; 0x280
    13d2:	f240 2200 	movw	r2, #512	; 0x200
    13d6:	89a3      	ldrh	r3, [r4, #12]
    13d8:	400b      	ands	r3, r1
    13da:	4293      	cmp	r3, r2
    13dc:	d003      	beq.n	13e6 <__swsetup_r+0x9e>
    13de:	0021      	movs	r1, r4
    13e0:	0030      	movs	r0, r6
    13e2:	f000 f9cd 	bl	1780 <__smakebuf_r>
    13e6:	2301      	movs	r3, #1
    13e8:	89a2      	ldrh	r2, [r4, #12]
    13ea:	4013      	ands	r3, r2
    13ec:	b18b      	cbz	r3, 1412 <__swsetup_r+0xca>
    13ee:	2300      	movs	r3, #0
    13f0:	60a3      	str	r3, [r4, #8]
    13f2:	6963      	ldr	r3, [r4, #20]
    13f4:	425b      	negs	r3, r3
    13f6:	61a3      	str	r3, [r4, #24]
    13f8:	6923      	ldr	r3, [r4, #16]
    13fa:	2000      	movs	r0, #0
    13fc:	2b00      	cmp	r3, #0
    13fe:	d1c0      	bne.n	1382 <__swsetup_r+0x3a>
    1400:	230c      	movs	r3, #12
    1402:	5ee2      	ldrsh	r2, [r4, r3]
    1404:	0613      	lsls	r3, r2, #24
    1406:	d5bc      	bpl.n	1382 <__swsetup_r+0x3a>
    1408:	2340      	movs	r3, #64	; 0x40
    140a:	4313      	orrs	r3, r2
    140c:	81a3      	strh	r3, [r4, #12]
    140e:	3801      	subs	r0, #1
    1410:	e7b7      	b.n	1382 <__swsetup_r+0x3a>
    1412:	0792      	lsls	r2, r2, #30
    1414:	d400      	bmi.n	1418 <__swsetup_r+0xd0>
    1416:	6963      	ldr	r3, [r4, #20]
    1418:	60a3      	str	r3, [r4, #8]
    141a:	e7ed      	b.n	13f8 <__swsetup_r+0xb0>
    141c:	20000004 	.word	0x20000004
    1420:	00002118 	.word	0x00002118
    1424:	00002138 	.word	0x00002138
    1428:	000020f8 	.word	0x000020f8

0000142c <__sflush_r>:
    142c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    142e:	898a      	ldrh	r2, [r1, #12]
    1430:	0005      	movs	r5, r0
    1432:	000c      	movs	r4, r1
    1434:	0713      	lsls	r3, r2, #28
    1436:	d45e      	bmi.n	14f6 <__sflush_r+0xca>
    1438:	684b      	ldr	r3, [r1, #4]
    143a:	2b00      	cmp	r3, #0
    143c:	dc04      	bgt.n	1448 <__sflush_r+0x1c>
    143e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1440:	2b00      	cmp	r3, #0
    1442:	dc01      	bgt.n	1448 <__sflush_r+0x1c>
    1444:	2000      	movs	r0, #0
    1446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1448:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    144a:	2f00      	cmp	r7, #0
    144c:	d0fa      	beq.n	1444 <__sflush_r+0x18>
    144e:	2300      	movs	r3, #0
    1450:	682e      	ldr	r6, [r5, #0]
    1452:	602b      	str	r3, [r5, #0]
    1454:	f241 0300 	movw	r3, #4096	; 0x1000
    1458:	401a      	ands	r2, r3
    145a:	b392      	cbz	r2, 14c2 <__sflush_r+0x96>
    145c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    145e:	89a3      	ldrh	r3, [r4, #12]
    1460:	075b      	lsls	r3, r3, #29
    1462:	d505      	bpl.n	1470 <__sflush_r+0x44>
    1464:	6863      	ldr	r3, [r4, #4]
    1466:	1ac0      	subs	r0, r0, r3
    1468:	6b63      	ldr	r3, [r4, #52]	; 0x34
    146a:	b10b      	cbz	r3, 1470 <__sflush_r+0x44>
    146c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    146e:	1ac0      	subs	r0, r0, r3
    1470:	0002      	movs	r2, r0
    1472:	6a21      	ldr	r1, [r4, #32]
    1474:	2300      	movs	r3, #0
    1476:	0028      	movs	r0, r5
    1478:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    147a:	47b8      	blx	r7
    147c:	89a1      	ldrh	r1, [r4, #12]
    147e:	1c43      	adds	r3, r0, #1
    1480:	d106      	bne.n	1490 <__sflush_r+0x64>
    1482:	682b      	ldr	r3, [r5, #0]
    1484:	2b1d      	cmp	r3, #29
    1486:	d830      	bhi.n	14ea <__sflush_r+0xbe>
    1488:	4a2b      	ldr	r2, [pc, #172]	; (1538 <__sflush_r+0x10c>)
    148a:	40da      	lsrs	r2, r3
    148c:	07d3      	lsls	r3, r2, #31
    148e:	d52c      	bpl.n	14ea <__sflush_r+0xbe>
    1490:	2300      	movs	r3, #0
    1492:	6063      	str	r3, [r4, #4]
    1494:	6923      	ldr	r3, [r4, #16]
    1496:	6023      	str	r3, [r4, #0]
    1498:	04cb      	lsls	r3, r1, #19
    149a:	d504      	bpl.n	14a6 <__sflush_r+0x7a>
    149c:	1c43      	adds	r3, r0, #1
    149e:	d101      	bne.n	14a4 <__sflush_r+0x78>
    14a0:	682b      	ldr	r3, [r5, #0]
    14a2:	b903      	cbnz	r3, 14a6 <__sflush_r+0x7a>
    14a4:	6560      	str	r0, [r4, #84]	; 0x54
    14a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    14a8:	602e      	str	r6, [r5, #0]
    14aa:	2900      	cmp	r1, #0
    14ac:	d0ca      	beq.n	1444 <__sflush_r+0x18>
    14ae:	0023      	movs	r3, r4
    14b0:	3344      	adds	r3, #68	; 0x44
    14b2:	4299      	cmp	r1, r3
    14b4:	d002      	beq.n	14bc <__sflush_r+0x90>
    14b6:	0028      	movs	r0, r5
    14b8:	f000 f9ac 	bl	1814 <_free_r>
    14bc:	2000      	movs	r0, #0
    14be:	6360      	str	r0, [r4, #52]	; 0x34
    14c0:	e7c1      	b.n	1446 <__sflush_r+0x1a>
    14c2:	2301      	movs	r3, #1
    14c4:	6a21      	ldr	r1, [r4, #32]
    14c6:	0028      	movs	r0, r5
    14c8:	47b8      	blx	r7
    14ca:	1c43      	adds	r3, r0, #1
    14cc:	d1c7      	bne.n	145e <__sflush_r+0x32>
    14ce:	682b      	ldr	r3, [r5, #0]
    14d0:	2b00      	cmp	r3, #0
    14d2:	d0c4      	beq.n	145e <__sflush_r+0x32>
    14d4:	2b1d      	cmp	r3, #29
    14d6:	d001      	beq.n	14dc <__sflush_r+0xb0>
    14d8:	2b16      	cmp	r3, #22
    14da:	d101      	bne.n	14e0 <__sflush_r+0xb4>
    14dc:	602e      	str	r6, [r5, #0]
    14de:	e7b1      	b.n	1444 <__sflush_r+0x18>
    14e0:	2340      	movs	r3, #64	; 0x40
    14e2:	89a2      	ldrh	r2, [r4, #12]
    14e4:	4313      	orrs	r3, r2
    14e6:	81a3      	strh	r3, [r4, #12]
    14e8:	e7ad      	b.n	1446 <__sflush_r+0x1a>
    14ea:	2340      	movs	r3, #64	; 0x40
    14ec:	430b      	orrs	r3, r1
    14ee:	2001      	movs	r0, #1
    14f0:	81a3      	strh	r3, [r4, #12]
    14f2:	4240      	negs	r0, r0
    14f4:	e7a7      	b.n	1446 <__sflush_r+0x1a>
    14f6:	690f      	ldr	r7, [r1, #16]
    14f8:	2f00      	cmp	r7, #0
    14fa:	d0a3      	beq.n	1444 <__sflush_r+0x18>
    14fc:	680b      	ldr	r3, [r1, #0]
    14fe:	600f      	str	r7, [r1, #0]
    1500:	1bdb      	subs	r3, r3, r7
    1502:	9301      	str	r3, [sp, #4]
    1504:	2300      	movs	r3, #0
    1506:	0792      	lsls	r2, r2, #30
    1508:	d100      	bne.n	150c <__sflush_r+0xe0>
    150a:	694b      	ldr	r3, [r1, #20]
    150c:	60a3      	str	r3, [r4, #8]
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	2b00      	cmp	r3, #0
    1512:	dc00      	bgt.n	1516 <__sflush_r+0xea>
    1514:	e796      	b.n	1444 <__sflush_r+0x18>
    1516:	9b01      	ldr	r3, [sp, #4]
    1518:	003a      	movs	r2, r7
    151a:	6a21      	ldr	r1, [r4, #32]
    151c:	0028      	movs	r0, r5
    151e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1520:	47b0      	blx	r6
    1522:	2800      	cmp	r0, #0
    1524:	dc03      	bgt.n	152e <__sflush_r+0x102>
    1526:	2340      	movs	r3, #64	; 0x40
    1528:	89a2      	ldrh	r2, [r4, #12]
    152a:	4313      	orrs	r3, r2
    152c:	e7df      	b.n	14ee <__sflush_r+0xc2>
    152e:	9b01      	ldr	r3, [sp, #4]
    1530:	183f      	adds	r7, r7, r0
    1532:	1a1b      	subs	r3, r3, r0
    1534:	9301      	str	r3, [sp, #4]
    1536:	e7ea      	b.n	150e <__sflush_r+0xe2>
    1538:	20400001 	.word	0x20400001

0000153c <_fflush_r>:
    153c:	690b      	ldr	r3, [r1, #16]
    153e:	b570      	push	{r4, r5, r6, lr}
    1540:	0005      	movs	r5, r0
    1542:	000c      	movs	r4, r1
    1544:	b90b      	cbnz	r3, 154a <_fflush_r+0xe>
    1546:	2000      	movs	r0, #0
    1548:	bd70      	pop	{r4, r5, r6, pc}
    154a:	b118      	cbz	r0, 1554 <_fflush_r+0x18>
    154c:	6983      	ldr	r3, [r0, #24]
    154e:	b90b      	cbnz	r3, 1554 <_fflush_r+0x18>
    1550:	f000 f860 	bl	1614 <__sinit>
    1554:	4b0b      	ldr	r3, [pc, #44]	; (1584 <_fflush_r+0x48>)
    1556:	429c      	cmp	r4, r3
    1558:	d109      	bne.n	156e <_fflush_r+0x32>
    155a:	686c      	ldr	r4, [r5, #4]
    155c:	220c      	movs	r2, #12
    155e:	5ea3      	ldrsh	r3, [r4, r2]
    1560:	2b00      	cmp	r3, #0
    1562:	d0f0      	beq.n	1546 <_fflush_r+0xa>
    1564:	0021      	movs	r1, r4
    1566:	0028      	movs	r0, r5
    1568:	f7ff ff60 	bl	142c <__sflush_r>
    156c:	e7ec      	b.n	1548 <_fflush_r+0xc>
    156e:	4b06      	ldr	r3, [pc, #24]	; (1588 <_fflush_r+0x4c>)
    1570:	429c      	cmp	r4, r3
    1572:	d101      	bne.n	1578 <_fflush_r+0x3c>
    1574:	68ac      	ldr	r4, [r5, #8]
    1576:	e7f1      	b.n	155c <_fflush_r+0x20>
    1578:	4b04      	ldr	r3, [pc, #16]	; (158c <_fflush_r+0x50>)
    157a:	429c      	cmp	r4, r3
    157c:	d1ee      	bne.n	155c <_fflush_r+0x20>
    157e:	68ec      	ldr	r4, [r5, #12]
    1580:	e7ec      	b.n	155c <_fflush_r+0x20>
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	00002118 	.word	0x00002118
    1588:	00002138 	.word	0x00002138
    158c:	000020f8 	.word	0x000020f8

00001590 <_cleanup_r>:
    1590:	b510      	push	{r4, lr}
    1592:	4902      	ldr	r1, [pc, #8]	; (159c <_cleanup_r+0xc>)
    1594:	f000 f8ac 	bl	16f0 <_fwalk_reent>
    1598:	bd10      	pop	{r4, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	0000153d 	.word	0x0000153d

000015a0 <std.isra.0>:
    15a0:	2300      	movs	r3, #0
    15a2:	b510      	push	{r4, lr}
    15a4:	0004      	movs	r4, r0
    15a6:	6003      	str	r3, [r0, #0]
    15a8:	6043      	str	r3, [r0, #4]
    15aa:	6083      	str	r3, [r0, #8]
    15ac:	8181      	strh	r1, [r0, #12]
    15ae:	6643      	str	r3, [r0, #100]	; 0x64
    15b0:	81c2      	strh	r2, [r0, #14]
    15b2:	6103      	str	r3, [r0, #16]
    15b4:	6143      	str	r3, [r0, #20]
    15b6:	6183      	str	r3, [r0, #24]
    15b8:	0019      	movs	r1, r3
    15ba:	2208      	movs	r2, #8
    15bc:	305c      	adds	r0, #92	; 0x5c
    15be:	f7ff fd9f 	bl	1100 <memset>
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <std.isra.0+0x38>)
    15c4:	6224      	str	r4, [r4, #32]
    15c6:	6263      	str	r3, [r4, #36]	; 0x24
    15c8:	4b04      	ldr	r3, [pc, #16]	; (15dc <std.isra.0+0x3c>)
    15ca:	62a3      	str	r3, [r4, #40]	; 0x28
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <std.isra.0+0x40>)
    15ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    15d0:	4b04      	ldr	r3, [pc, #16]	; (15e4 <std.isra.0+0x44>)
    15d2:	6323      	str	r3, [r4, #48]	; 0x30
    15d4:	bd10      	pop	{r4, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	00001f01 	.word	0x00001f01
    15dc:	00001f29 	.word	0x00001f29
    15e0:	00001f61 	.word	0x00001f61
    15e4:	00001f8d 	.word	0x00001f8d

000015e8 <__sfmoreglue>:
    15e8:	b570      	push	{r4, r5, r6, lr}
    15ea:	2568      	movs	r5, #104	; 0x68
    15ec:	1e4a      	subs	r2, r1, #1
    15ee:	4355      	muls	r5, r2
    15f0:	000e      	movs	r6, r1
    15f2:	0029      	movs	r1, r5
    15f4:	3174      	adds	r1, #116	; 0x74
    15f6:	f000 f957 	bl	18a8 <_malloc_r>
    15fa:	0004      	movs	r4, r0
    15fc:	b140      	cbz	r0, 1610 <__sfmoreglue+0x28>
    15fe:	2100      	movs	r1, #0
    1600:	002a      	movs	r2, r5
    1602:	6001      	str	r1, [r0, #0]
    1604:	6046      	str	r6, [r0, #4]
    1606:	300c      	adds	r0, #12
    1608:	60a0      	str	r0, [r4, #8]
    160a:	3268      	adds	r2, #104	; 0x68
    160c:	f7ff fd78 	bl	1100 <memset>
    1610:	0020      	movs	r0, r4
    1612:	bd70      	pop	{r4, r5, r6, pc}

00001614 <__sinit>:
    1614:	6983      	ldr	r3, [r0, #24]
    1616:	b513      	push	{r0, r1, r4, lr}
    1618:	0004      	movs	r4, r0
    161a:	bb43      	cbnz	r3, 166e <__sinit+0x5a>
    161c:	6483      	str	r3, [r0, #72]	; 0x48
    161e:	64c3      	str	r3, [r0, #76]	; 0x4c
    1620:	6503      	str	r3, [r0, #80]	; 0x50
    1622:	4b13      	ldr	r3, [pc, #76]	; (1670 <__sinit+0x5c>)
    1624:	4a13      	ldr	r2, [pc, #76]	; (1674 <__sinit+0x60>)
    1626:	681b      	ldr	r3, [r3, #0]
    1628:	6282      	str	r2, [r0, #40]	; 0x28
    162a:	9301      	str	r3, [sp, #4]
    162c:	4298      	cmp	r0, r3
    162e:	d101      	bne.n	1634 <__sinit+0x20>
    1630:	2301      	movs	r3, #1
    1632:	6183      	str	r3, [r0, #24]
    1634:	0020      	movs	r0, r4
    1636:	f000 f81f 	bl	1678 <__sfp>
    163a:	6060      	str	r0, [r4, #4]
    163c:	0020      	movs	r0, r4
    163e:	f000 f81b 	bl	1678 <__sfp>
    1642:	60a0      	str	r0, [r4, #8]
    1644:	0020      	movs	r0, r4
    1646:	f000 f817 	bl	1678 <__sfp>
    164a:	2200      	movs	r2, #0
    164c:	60e0      	str	r0, [r4, #12]
    164e:	2104      	movs	r1, #4
    1650:	6860      	ldr	r0, [r4, #4]
    1652:	f7ff ffa5 	bl	15a0 <std.isra.0>
    1656:	2201      	movs	r2, #1
    1658:	2109      	movs	r1, #9
    165a:	68a0      	ldr	r0, [r4, #8]
    165c:	f7ff ffa0 	bl	15a0 <std.isra.0>
    1660:	2202      	movs	r2, #2
    1662:	2112      	movs	r1, #18
    1664:	68e0      	ldr	r0, [r4, #12]
    1666:	f7ff ff9b 	bl	15a0 <std.isra.0>
    166a:	2301      	movs	r3, #1
    166c:	61a3      	str	r3, [r4, #24]
    166e:	bd13      	pop	{r0, r1, r4, pc}
    1670:	000020f4 	.word	0x000020f4
    1674:	00001591 	.word	0x00001591

00001678 <__sfp>:
    1678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    167a:	4b1c      	ldr	r3, [pc, #112]	; (16ec <__sfp+0x74>)
    167c:	0007      	movs	r7, r0
    167e:	681e      	ldr	r6, [r3, #0]
    1680:	69b3      	ldr	r3, [r6, #24]
    1682:	b913      	cbnz	r3, 168a <__sfp+0x12>
    1684:	0030      	movs	r0, r6
    1686:	f7ff ffc5 	bl	1614 <__sinit>
    168a:	3648      	adds	r6, #72	; 0x48
    168c:	68b4      	ldr	r4, [r6, #8]
    168e:	6873      	ldr	r3, [r6, #4]
    1690:	3b01      	subs	r3, #1
    1692:	d503      	bpl.n	169c <__sfp+0x24>
    1694:	6833      	ldr	r3, [r6, #0]
    1696:	b133      	cbz	r3, 16a6 <__sfp+0x2e>
    1698:	6836      	ldr	r6, [r6, #0]
    169a:	e7f7      	b.n	168c <__sfp+0x14>
    169c:	220c      	movs	r2, #12
    169e:	5ea5      	ldrsh	r5, [r4, r2]
    16a0:	b16d      	cbz	r5, 16be <__sfp+0x46>
    16a2:	3468      	adds	r4, #104	; 0x68
    16a4:	e7f4      	b.n	1690 <__sfp+0x18>
    16a6:	2104      	movs	r1, #4
    16a8:	0038      	movs	r0, r7
    16aa:	f7ff ff9d 	bl	15e8 <__sfmoreglue>
    16ae:	6030      	str	r0, [r6, #0]
    16b0:	2800      	cmp	r0, #0
    16b2:	d1f1      	bne.n	1698 <__sfp+0x20>
    16b4:	230c      	movs	r3, #12
    16b6:	0004      	movs	r4, r0
    16b8:	603b      	str	r3, [r7, #0]
    16ba:	0020      	movs	r0, r4
    16bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16be:	2301      	movs	r3, #1
    16c0:	0020      	movs	r0, r4
    16c2:	425b      	negs	r3, r3
    16c4:	81e3      	strh	r3, [r4, #14]
    16c6:	3302      	adds	r3, #2
    16c8:	81a3      	strh	r3, [r4, #12]
    16ca:	6665      	str	r5, [r4, #100]	; 0x64
    16cc:	6025      	str	r5, [r4, #0]
    16ce:	60a5      	str	r5, [r4, #8]
    16d0:	6065      	str	r5, [r4, #4]
    16d2:	6125      	str	r5, [r4, #16]
    16d4:	6165      	str	r5, [r4, #20]
    16d6:	61a5      	str	r5, [r4, #24]
    16d8:	2208      	movs	r2, #8
    16da:	0029      	movs	r1, r5
    16dc:	305c      	adds	r0, #92	; 0x5c
    16de:	f7ff fd0f 	bl	1100 <memset>
    16e2:	6365      	str	r5, [r4, #52]	; 0x34
    16e4:	63a5      	str	r5, [r4, #56]	; 0x38
    16e6:	64a5      	str	r5, [r4, #72]	; 0x48
    16e8:	64e5      	str	r5, [r4, #76]	; 0x4c
    16ea:	e7e6      	b.n	16ba <__sfp+0x42>
    16ec:	000020f4 	.word	0x000020f4

000016f0 <_fwalk_reent>:
    16f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16f2:	0004      	movs	r4, r0
    16f4:	0007      	movs	r7, r0
    16f6:	2600      	movs	r6, #0
    16f8:	9101      	str	r1, [sp, #4]
    16fa:	3448      	adds	r4, #72	; 0x48
    16fc:	b90c      	cbnz	r4, 1702 <_fwalk_reent+0x12>
    16fe:	0030      	movs	r0, r6
    1700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1702:	6863      	ldr	r3, [r4, #4]
    1704:	68a5      	ldr	r5, [r4, #8]
    1706:	9300      	str	r3, [sp, #0]
    1708:	9b00      	ldr	r3, [sp, #0]
    170a:	3b01      	subs	r3, #1
    170c:	9300      	str	r3, [sp, #0]
    170e:	d501      	bpl.n	1714 <_fwalk_reent+0x24>
    1710:	6824      	ldr	r4, [r4, #0]
    1712:	e7f3      	b.n	16fc <_fwalk_reent+0xc>
    1714:	89ab      	ldrh	r3, [r5, #12]
    1716:	2b01      	cmp	r3, #1
    1718:	d908      	bls.n	172c <_fwalk_reent+0x3c>
    171a:	220e      	movs	r2, #14
    171c:	5eab      	ldrsh	r3, [r5, r2]
    171e:	3301      	adds	r3, #1
    1720:	d004      	beq.n	172c <_fwalk_reent+0x3c>
    1722:	0029      	movs	r1, r5
    1724:	0038      	movs	r0, r7
    1726:	9b01      	ldr	r3, [sp, #4]
    1728:	4798      	blx	r3
    172a:	4306      	orrs	r6, r0
    172c:	3568      	adds	r5, #104	; 0x68
    172e:	e7eb      	b.n	1708 <_fwalk_reent+0x18>

00001730 <__swhatbuf_r>:
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	000e      	movs	r6, r1
    1734:	001d      	movs	r5, r3
    1736:	230e      	movs	r3, #14
    1738:	5ec9      	ldrsh	r1, [r1, r3]
    173a:	b090      	sub	sp, #64	; 0x40
    173c:	0014      	movs	r4, r2
    173e:	2900      	cmp	r1, #0
    1740:	da07      	bge.n	1752 <__swhatbuf_r+0x22>
    1742:	2300      	movs	r3, #0
    1744:	602b      	str	r3, [r5, #0]
    1746:	89b3      	ldrh	r3, [r6, #12]
    1748:	061b      	lsls	r3, r3, #24
    174a:	d411      	bmi.n	1770 <__swhatbuf_r+0x40>
    174c:	f240 4300 	movw	r3, #1024	; 0x400
    1750:	e00f      	b.n	1772 <__swhatbuf_r+0x42>
    1752:	aa01      	add	r2, sp, #4
    1754:	f000 fc42 	bl	1fdc <_fstat_r>
    1758:	2800      	cmp	r0, #0
    175a:	dbf2      	blt.n	1742 <__swhatbuf_r+0x12>
    175c:	f24f 0200 	movw	r2, #61440	; 0xf000
    1760:	9b02      	ldr	r3, [sp, #8]
    1762:	4013      	ands	r3, r2
    1764:	4a05      	ldr	r2, [pc, #20]	; (177c <__swhatbuf_r+0x4c>)
    1766:	189b      	adds	r3, r3, r2
    1768:	425a      	negs	r2, r3
    176a:	4153      	adcs	r3, r2
    176c:	602b      	str	r3, [r5, #0]
    176e:	e7ed      	b.n	174c <__swhatbuf_r+0x1c>
    1770:	2340      	movs	r3, #64	; 0x40
    1772:	2000      	movs	r0, #0
    1774:	6023      	str	r3, [r4, #0]
    1776:	b010      	add	sp, #64	; 0x40
    1778:	bd70      	pop	{r4, r5, r6, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	ffffe000 	.word	0xffffe000

00001780 <__smakebuf_r>:
    1780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1782:	2602      	movs	r6, #2
    1784:	898b      	ldrh	r3, [r1, #12]
    1786:	0005      	movs	r5, r0
    1788:	000c      	movs	r4, r1
    178a:	4233      	tst	r3, r6
    178c:	d006      	beq.n	179c <__smakebuf_r+0x1c>
    178e:	0023      	movs	r3, r4
    1790:	3347      	adds	r3, #71	; 0x47
    1792:	6023      	str	r3, [r4, #0]
    1794:	6123      	str	r3, [r4, #16]
    1796:	2301      	movs	r3, #1
    1798:	6163      	str	r3, [r4, #20]
    179a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    179c:	ab01      	add	r3, sp, #4
    179e:	466a      	mov	r2, sp
    17a0:	f7ff ffc6 	bl	1730 <__swhatbuf_r>
    17a4:	9900      	ldr	r1, [sp, #0]
    17a6:	0007      	movs	r7, r0
    17a8:	0028      	movs	r0, r5
    17aa:	f000 f87d 	bl	18a8 <_malloc_r>
    17ae:	b940      	cbnz	r0, 17c2 <__smakebuf_r+0x42>
    17b0:	220c      	movs	r2, #12
    17b2:	5ea3      	ldrsh	r3, [r4, r2]
    17b4:	059a      	lsls	r2, r3, #22
    17b6:	d4f0      	bmi.n	179a <__smakebuf_r+0x1a>
    17b8:	2203      	movs	r2, #3
    17ba:	4393      	bics	r3, r2
    17bc:	431e      	orrs	r6, r3
    17be:	81a6      	strh	r6, [r4, #12]
    17c0:	e7e5      	b.n	178e <__smakebuf_r+0xe>
    17c2:	4b0e      	ldr	r3, [pc, #56]	; (17fc <__smakebuf_r+0x7c>)
    17c4:	62ab      	str	r3, [r5, #40]	; 0x28
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	89a2      	ldrh	r2, [r4, #12]
    17ca:	6020      	str	r0, [r4, #0]
    17cc:	4313      	orrs	r3, r2
    17ce:	81a3      	strh	r3, [r4, #12]
    17d0:	9b00      	ldr	r3, [sp, #0]
    17d2:	6120      	str	r0, [r4, #16]
    17d4:	6163      	str	r3, [r4, #20]
    17d6:	9b01      	ldr	r3, [sp, #4]
    17d8:	b163      	cbz	r3, 17f4 <__smakebuf_r+0x74>
    17da:	230e      	movs	r3, #14
    17dc:	5ee1      	ldrsh	r1, [r4, r3]
    17de:	0028      	movs	r0, r5
    17e0:	f000 fc0e 	bl	2000 <_isatty_r>
    17e4:	b130      	cbz	r0, 17f4 <__smakebuf_r+0x74>
    17e6:	2203      	movs	r2, #3
    17e8:	89a3      	ldrh	r3, [r4, #12]
    17ea:	4393      	bics	r3, r2
    17ec:	001a      	movs	r2, r3
    17ee:	2301      	movs	r3, #1
    17f0:	4313      	orrs	r3, r2
    17f2:	81a3      	strh	r3, [r4, #12]
    17f4:	89a0      	ldrh	r0, [r4, #12]
    17f6:	4338      	orrs	r0, r7
    17f8:	81a0      	strh	r0, [r4, #12]
    17fa:	e7ce      	b.n	179a <__smakebuf_r+0x1a>
    17fc:	00001591 	.word	0x00001591

00001800 <malloc>:
    1800:	b510      	push	{r4, lr}
    1802:	4b03      	ldr	r3, [pc, #12]	; (1810 <malloc+0x10>)
    1804:	0001      	movs	r1, r0
    1806:	6818      	ldr	r0, [r3, #0]
    1808:	f000 f84e 	bl	18a8 <_malloc_r>
    180c:	bd10      	pop	{r4, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	20000004 	.word	0x20000004

00001814 <_free_r>:
    1814:	b570      	push	{r4, r5, r6, lr}
    1816:	0005      	movs	r5, r0
    1818:	b181      	cbz	r1, 183c <_free_r+0x28>
    181a:	1f0c      	subs	r4, r1, #4
    181c:	6823      	ldr	r3, [r4, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	da00      	bge.n	1824 <_free_r+0x10>
    1822:	18e4      	adds	r4, r4, r3
    1824:	0028      	movs	r0, r5
    1826:	f000 fc18 	bl	205a <__malloc_lock>
    182a:	4a1e      	ldr	r2, [pc, #120]	; (18a4 <_free_r+0x90>)
    182c:	6813      	ldr	r3, [r2, #0]
    182e:	0011      	movs	r1, r2
    1830:	b92b      	cbnz	r3, 183e <_free_r+0x2a>
    1832:	6063      	str	r3, [r4, #4]
    1834:	6014      	str	r4, [r2, #0]
    1836:	0028      	movs	r0, r5
    1838:	f000 fc10 	bl	205c <__malloc_unlock>
    183c:	bd70      	pop	{r4, r5, r6, pc}
    183e:	42a3      	cmp	r3, r4
    1840:	d90b      	bls.n	185a <_free_r+0x46>
    1842:	6822      	ldr	r2, [r4, #0]
    1844:	18a0      	adds	r0, r4, r2
    1846:	4283      	cmp	r3, r0
    1848:	d103      	bne.n	1852 <_free_r+0x3e>
    184a:	6818      	ldr	r0, [r3, #0]
    184c:	685b      	ldr	r3, [r3, #4]
    184e:	1882      	adds	r2, r0, r2
    1850:	6022      	str	r2, [r4, #0]
    1852:	6063      	str	r3, [r4, #4]
    1854:	600c      	str	r4, [r1, #0]
    1856:	e7ee      	b.n	1836 <_free_r+0x22>
    1858:	0013      	movs	r3, r2
    185a:	685a      	ldr	r2, [r3, #4]
    185c:	b10a      	cbz	r2, 1862 <_free_r+0x4e>
    185e:	42a2      	cmp	r2, r4
    1860:	d9fa      	bls.n	1858 <_free_r+0x44>
    1862:	6819      	ldr	r1, [r3, #0]
    1864:	1858      	adds	r0, r3, r1
    1866:	42a0      	cmp	r0, r4
    1868:	d10b      	bne.n	1882 <_free_r+0x6e>
    186a:	6820      	ldr	r0, [r4, #0]
    186c:	1809      	adds	r1, r1, r0
    186e:	1858      	adds	r0, r3, r1
    1870:	6019      	str	r1, [r3, #0]
    1872:	4282      	cmp	r2, r0
    1874:	d1df      	bne.n	1836 <_free_r+0x22>
    1876:	6810      	ldr	r0, [r2, #0]
    1878:	6852      	ldr	r2, [r2, #4]
    187a:	1841      	adds	r1, r0, r1
    187c:	6019      	str	r1, [r3, #0]
    187e:	605a      	str	r2, [r3, #4]
    1880:	e7d9      	b.n	1836 <_free_r+0x22>
    1882:	42a0      	cmp	r0, r4
    1884:	d902      	bls.n	188c <_free_r+0x78>
    1886:	230c      	movs	r3, #12
    1888:	602b      	str	r3, [r5, #0]
    188a:	e7d4      	b.n	1836 <_free_r+0x22>
    188c:	6821      	ldr	r1, [r4, #0]
    188e:	1860      	adds	r0, r4, r1
    1890:	4282      	cmp	r2, r0
    1892:	d103      	bne.n	189c <_free_r+0x88>
    1894:	6810      	ldr	r0, [r2, #0]
    1896:	6852      	ldr	r2, [r2, #4]
    1898:	1841      	adds	r1, r0, r1
    189a:	6021      	str	r1, [r4, #0]
    189c:	6062      	str	r2, [r4, #4]
    189e:	605c      	str	r4, [r3, #4]
    18a0:	e7c9      	b.n	1836 <_free_r+0x22>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	20000cb0 	.word	0x20000cb0

000018a8 <_malloc_r>:
    18a8:	2303      	movs	r3, #3
    18aa:	b570      	push	{r4, r5, r6, lr}
    18ac:	1ccd      	adds	r5, r1, #3
    18ae:	439d      	bics	r5, r3
    18b0:	3508      	adds	r5, #8
    18b2:	0006      	movs	r6, r0
    18b4:	2d0c      	cmp	r5, #12
    18b6:	d21c      	bcs.n	18f2 <_malloc_r+0x4a>
    18b8:	250c      	movs	r5, #12
    18ba:	42a9      	cmp	r1, r5
    18bc:	d81b      	bhi.n	18f6 <_malloc_r+0x4e>
    18be:	0030      	movs	r0, r6
    18c0:	f000 fbcb 	bl	205a <__malloc_lock>
    18c4:	4a25      	ldr	r2, [pc, #148]	; (195c <_malloc_r+0xb4>)
    18c6:	6814      	ldr	r4, [r2, #0]
    18c8:	0021      	movs	r1, r4
    18ca:	b9c1      	cbnz	r1, 18fe <_malloc_r+0x56>
    18cc:	4c24      	ldr	r4, [pc, #144]	; (1960 <_malloc_r+0xb8>)
    18ce:	6823      	ldr	r3, [r4, #0]
    18d0:	b91b      	cbnz	r3, 18da <_malloc_r+0x32>
    18d2:	0030      	movs	r0, r6
    18d4:	f000 fb04 	bl	1ee0 <_sbrk_r>
    18d8:	6020      	str	r0, [r4, #0]
    18da:	0029      	movs	r1, r5
    18dc:	0030      	movs	r0, r6
    18de:	f000 faff 	bl	1ee0 <_sbrk_r>
    18e2:	1c43      	adds	r3, r0, #1
    18e4:	d12d      	bne.n	1942 <_malloc_r+0x9a>
    18e6:	230c      	movs	r3, #12
    18e8:	0030      	movs	r0, r6
    18ea:	6033      	str	r3, [r6, #0]
    18ec:	f000 fbb6 	bl	205c <__malloc_unlock>
    18f0:	e003      	b.n	18fa <_malloc_r+0x52>
    18f2:	2d00      	cmp	r5, #0
    18f4:	dae1      	bge.n	18ba <_malloc_r+0x12>
    18f6:	230c      	movs	r3, #12
    18f8:	6033      	str	r3, [r6, #0]
    18fa:	2000      	movs	r0, #0
    18fc:	bd70      	pop	{r4, r5, r6, pc}
    18fe:	680b      	ldr	r3, [r1, #0]
    1900:	1b5b      	subs	r3, r3, r5
    1902:	d41b      	bmi.n	193c <_malloc_r+0x94>
    1904:	2b0b      	cmp	r3, #11
    1906:	d903      	bls.n	1910 <_malloc_r+0x68>
    1908:	600b      	str	r3, [r1, #0]
    190a:	18cc      	adds	r4, r1, r3
    190c:	6025      	str	r5, [r4, #0]
    190e:	e003      	b.n	1918 <_malloc_r+0x70>
    1910:	428c      	cmp	r4, r1
    1912:	d10f      	bne.n	1934 <_malloc_r+0x8c>
    1914:	6863      	ldr	r3, [r4, #4]
    1916:	6013      	str	r3, [r2, #0]
    1918:	0030      	movs	r0, r6
    191a:	f000 fb9f 	bl	205c <__malloc_unlock>
    191e:	0020      	movs	r0, r4
    1920:	2207      	movs	r2, #7
    1922:	300b      	adds	r0, #11
    1924:	1d23      	adds	r3, r4, #4
    1926:	4390      	bics	r0, r2
    1928:	1ac3      	subs	r3, r0, r3
    192a:	2b00      	cmp	r3, #0
    192c:	d0e6      	beq.n	18fc <_malloc_r+0x54>
    192e:	425a      	negs	r2, r3
    1930:	50e2      	str	r2, [r4, r3]
    1932:	e7e3      	b.n	18fc <_malloc_r+0x54>
    1934:	684b      	ldr	r3, [r1, #4]
    1936:	6063      	str	r3, [r4, #4]
    1938:	000c      	movs	r4, r1
    193a:	e7ed      	b.n	1918 <_malloc_r+0x70>
    193c:	000c      	movs	r4, r1
    193e:	6849      	ldr	r1, [r1, #4]
    1940:	e7c3      	b.n	18ca <_malloc_r+0x22>
    1942:	2303      	movs	r3, #3
    1944:	1cc4      	adds	r4, r0, #3
    1946:	439c      	bics	r4, r3
    1948:	42a0      	cmp	r0, r4
    194a:	d0df      	beq.n	190c <_malloc_r+0x64>
    194c:	1a21      	subs	r1, r4, r0
    194e:	0030      	movs	r0, r6
    1950:	f000 fac6 	bl	1ee0 <_sbrk_r>
    1954:	1c43      	adds	r3, r0, #1
    1956:	d1d9      	bne.n	190c <_malloc_r+0x64>
    1958:	e7c5      	b.n	18e6 <_malloc_r+0x3e>
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	20000cb0 	.word	0x20000cb0
    1960:	20000cb4 	.word	0x20000cb4

00001964 <__sfputc_r>:
    1964:	6893      	ldr	r3, [r2, #8]
    1966:	b510      	push	{r4, lr}
    1968:	3b01      	subs	r3, #1
    196a:	6093      	str	r3, [r2, #8]
    196c:	2b00      	cmp	r3, #0
    196e:	da05      	bge.n	197c <__sfputc_r+0x18>
    1970:	6994      	ldr	r4, [r2, #24]
    1972:	42a3      	cmp	r3, r4
    1974:	db08      	blt.n	1988 <__sfputc_r+0x24>
    1976:	b2cb      	uxtb	r3, r1
    1978:	2b0a      	cmp	r3, #10
    197a:	d005      	beq.n	1988 <__sfputc_r+0x24>
    197c:	6813      	ldr	r3, [r2, #0]
    197e:	1c58      	adds	r0, r3, #1
    1980:	6010      	str	r0, [r2, #0]
    1982:	7019      	strb	r1, [r3, #0]
    1984:	b2c8      	uxtb	r0, r1
    1986:	bd10      	pop	{r4, pc}
    1988:	f7ff fc8c 	bl	12a4 <__swbuf_r>
    198c:	e7fb      	b.n	1986 <__sfputc_r+0x22>

0000198e <__sfputs_r>:
    198e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1990:	0006      	movs	r6, r0
    1992:	000f      	movs	r7, r1
    1994:	0014      	movs	r4, r2
    1996:	18d5      	adds	r5, r2, r3
    1998:	42ac      	cmp	r4, r5
    199a:	d101      	bne.n	19a0 <__sfputs_r+0x12>
    199c:	2000      	movs	r0, #0
    199e:	e007      	b.n	19b0 <__sfputs_r+0x22>
    19a0:	7821      	ldrb	r1, [r4, #0]
    19a2:	003a      	movs	r2, r7
    19a4:	0030      	movs	r0, r6
    19a6:	f7ff ffdd 	bl	1964 <__sfputc_r>
    19aa:	3401      	adds	r4, #1
    19ac:	1c43      	adds	r3, r0, #1
    19ae:	d1f3      	bne.n	1998 <__sfputs_r+0xa>
    19b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000019b4 <_vfiprintf_r>:
    19b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b6:	b09f      	sub	sp, #124	; 0x7c
    19b8:	9002      	str	r0, [sp, #8]
    19ba:	000f      	movs	r7, r1
    19bc:	0016      	movs	r6, r2
    19be:	9305      	str	r3, [sp, #20]
    19c0:	b120      	cbz	r0, 19cc <_vfiprintf_r+0x18>
    19c2:	6983      	ldr	r3, [r0, #24]
    19c4:	9304      	str	r3, [sp, #16]
    19c6:	b90b      	cbnz	r3, 19cc <_vfiprintf_r+0x18>
    19c8:	f7ff fe24 	bl	1614 <__sinit>
    19cc:	4b7e      	ldr	r3, [pc, #504]	; (1bc8 <_vfiprintf_r+0x214>)
    19ce:	429f      	cmp	r7, r3
    19d0:	d15b      	bne.n	1a8a <_vfiprintf_r+0xd6>
    19d2:	9b02      	ldr	r3, [sp, #8]
    19d4:	685f      	ldr	r7, [r3, #4]
    19d6:	89bb      	ldrh	r3, [r7, #12]
    19d8:	071b      	lsls	r3, r3, #28
    19da:	d562      	bpl.n	1aa2 <_vfiprintf_r+0xee>
    19dc:	693b      	ldr	r3, [r7, #16]
    19de:	2b00      	cmp	r3, #0
    19e0:	d05f      	beq.n	1aa2 <_vfiprintf_r+0xee>
    19e2:	2300      	movs	r3, #0
    19e4:	ad06      	add	r5, sp, #24
    19e6:	616b      	str	r3, [r5, #20]
    19e8:	3320      	adds	r3, #32
    19ea:	766b      	strb	r3, [r5, #25]
    19ec:	3310      	adds	r3, #16
    19ee:	76ab      	strb	r3, [r5, #26]
    19f0:	0034      	movs	r4, r6
    19f2:	7823      	ldrb	r3, [r4, #0]
    19f4:	2b00      	cmp	r3, #0
    19f6:	d15e      	bne.n	1ab6 <_vfiprintf_r+0x102>
    19f8:	1ba3      	subs	r3, r4, r6
    19fa:	9304      	str	r3, [sp, #16]
    19fc:	b16b      	cbz	r3, 1a1a <_vfiprintf_r+0x66>
    19fe:	1ba3      	subs	r3, r4, r6
    1a00:	0032      	movs	r2, r6
    1a02:	0039      	movs	r1, r7
    1a04:	9802      	ldr	r0, [sp, #8]
    1a06:	f7ff ffc2 	bl	198e <__sfputs_r>
    1a0a:	1c43      	adds	r3, r0, #1
    1a0c:	d100      	bne.n	1a10 <_vfiprintf_r+0x5c>
    1a0e:	e0cb      	b.n	1ba8 <_vfiprintf_r+0x1f4>
    1a10:	696a      	ldr	r2, [r5, #20]
    1a12:	9b04      	ldr	r3, [sp, #16]
    1a14:	4694      	mov	ip, r2
    1a16:	4463      	add	r3, ip
    1a18:	616b      	str	r3, [r5, #20]
    1a1a:	7823      	ldrb	r3, [r4, #0]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d100      	bne.n	1a22 <_vfiprintf_r+0x6e>
    1a20:	e0c2      	b.n	1ba8 <_vfiprintf_r+0x1f4>
    1a22:	2201      	movs	r2, #1
    1a24:	2300      	movs	r3, #0
    1a26:	4252      	negs	r2, r2
    1a28:	606a      	str	r2, [r5, #4]
    1a2a:	a902      	add	r1, sp, #8
    1a2c:	3254      	adds	r2, #84	; 0x54
    1a2e:	1852      	adds	r2, r2, r1
    1a30:	3401      	adds	r4, #1
    1a32:	602b      	str	r3, [r5, #0]
    1a34:	60eb      	str	r3, [r5, #12]
    1a36:	60ab      	str	r3, [r5, #8]
    1a38:	7013      	strb	r3, [r2, #0]
    1a3a:	65ab      	str	r3, [r5, #88]	; 0x58
    1a3c:	4e63      	ldr	r6, [pc, #396]	; (1bcc <_vfiprintf_r+0x218>)
    1a3e:	2205      	movs	r2, #5
    1a40:	7821      	ldrb	r1, [r4, #0]
    1a42:	0030      	movs	r0, r6
    1a44:	f000 fafe 	bl	2044 <memchr>
    1a48:	1c62      	adds	r2, r4, #1
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d137      	bne.n	1abe <_vfiprintf_r+0x10a>
    1a4e:	6829      	ldr	r1, [r5, #0]
    1a50:	06cb      	lsls	r3, r1, #27
    1a52:	d504      	bpl.n	1a5e <_vfiprintf_r+0xaa>
    1a54:	2353      	movs	r3, #83	; 0x53
    1a56:	ae02      	add	r6, sp, #8
    1a58:	3020      	adds	r0, #32
    1a5a:	199b      	adds	r3, r3, r6
    1a5c:	7018      	strb	r0, [r3, #0]
    1a5e:	070b      	lsls	r3, r1, #28
    1a60:	d504      	bpl.n	1a6c <_vfiprintf_r+0xb8>
    1a62:	2353      	movs	r3, #83	; 0x53
    1a64:	202b      	movs	r0, #43	; 0x2b
    1a66:	ae02      	add	r6, sp, #8
    1a68:	199b      	adds	r3, r3, r6
    1a6a:	7018      	strb	r0, [r3, #0]
    1a6c:	7823      	ldrb	r3, [r4, #0]
    1a6e:	2b2a      	cmp	r3, #42	; 0x2a
    1a70:	d02d      	beq.n	1ace <_vfiprintf_r+0x11a>
    1a72:	2100      	movs	r1, #0
    1a74:	200a      	movs	r0, #10
    1a76:	2601      	movs	r6, #1
    1a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a7a:	7822      	ldrb	r2, [r4, #0]
    1a7c:	3a30      	subs	r2, #48	; 0x30
    1a7e:	2a09      	cmp	r2, #9
    1a80:	d969      	bls.n	1b56 <_vfiprintf_r+0x1a2>
    1a82:	2900      	cmp	r1, #0
    1a84:	d02b      	beq.n	1ade <_vfiprintf_r+0x12a>
    1a86:	9309      	str	r3, [sp, #36]	; 0x24
    1a88:	e029      	b.n	1ade <_vfiprintf_r+0x12a>
    1a8a:	4b51      	ldr	r3, [pc, #324]	; (1bd0 <_vfiprintf_r+0x21c>)
    1a8c:	429f      	cmp	r7, r3
    1a8e:	d102      	bne.n	1a96 <_vfiprintf_r+0xe2>
    1a90:	9b02      	ldr	r3, [sp, #8]
    1a92:	689f      	ldr	r7, [r3, #8]
    1a94:	e79f      	b.n	19d6 <_vfiprintf_r+0x22>
    1a96:	4b4f      	ldr	r3, [pc, #316]	; (1bd4 <_vfiprintf_r+0x220>)
    1a98:	429f      	cmp	r7, r3
    1a9a:	d19c      	bne.n	19d6 <_vfiprintf_r+0x22>
    1a9c:	9b02      	ldr	r3, [sp, #8]
    1a9e:	68df      	ldr	r7, [r3, #12]
    1aa0:	e799      	b.n	19d6 <_vfiprintf_r+0x22>
    1aa2:	0039      	movs	r1, r7
    1aa4:	9802      	ldr	r0, [sp, #8]
    1aa6:	f7ff fc4f 	bl	1348 <__swsetup_r>
    1aaa:	2800      	cmp	r0, #0
    1aac:	d099      	beq.n	19e2 <_vfiprintf_r+0x2e>
    1aae:	2001      	movs	r0, #1
    1ab0:	4240      	negs	r0, r0
    1ab2:	b01f      	add	sp, #124	; 0x7c
    1ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab6:	2b25      	cmp	r3, #37	; 0x25
    1ab8:	d09e      	beq.n	19f8 <_vfiprintf_r+0x44>
    1aba:	3401      	adds	r4, #1
    1abc:	e799      	b.n	19f2 <_vfiprintf_r+0x3e>
    1abe:	2301      	movs	r3, #1
    1ac0:	1b80      	subs	r0, r0, r6
    1ac2:	4083      	lsls	r3, r0
    1ac4:	6829      	ldr	r1, [r5, #0]
    1ac6:	0014      	movs	r4, r2
    1ac8:	430b      	orrs	r3, r1
    1aca:	602b      	str	r3, [r5, #0]
    1acc:	e7b6      	b.n	1a3c <_vfiprintf_r+0x88>
    1ace:	9b05      	ldr	r3, [sp, #20]
    1ad0:	1d18      	adds	r0, r3, #4
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	9005      	str	r0, [sp, #20]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	db37      	blt.n	1b4a <_vfiprintf_r+0x196>
    1ada:	9309      	str	r3, [sp, #36]	; 0x24
    1adc:	0014      	movs	r4, r2
    1ade:	7823      	ldrb	r3, [r4, #0]
    1ae0:	2b2e      	cmp	r3, #46	; 0x2e
    1ae2:	d10b      	bne.n	1afc <_vfiprintf_r+0x148>
    1ae4:	7863      	ldrb	r3, [r4, #1]
    1ae6:	1c62      	adds	r2, r4, #1
    1ae8:	2b2a      	cmp	r3, #42	; 0x2a
    1aea:	d13c      	bne.n	1b66 <_vfiprintf_r+0x1b2>
    1aec:	9b05      	ldr	r3, [sp, #20]
    1aee:	3402      	adds	r4, #2
    1af0:	1d1a      	adds	r2, r3, #4
    1af2:	681b      	ldr	r3, [r3, #0]
    1af4:	9205      	str	r2, [sp, #20]
    1af6:	2b00      	cmp	r3, #0
    1af8:	db32      	blt.n	1b60 <_vfiprintf_r+0x1ac>
    1afa:	9307      	str	r3, [sp, #28]
    1afc:	4e36      	ldr	r6, [pc, #216]	; (1bd8 <_vfiprintf_r+0x224>)
    1afe:	7821      	ldrb	r1, [r4, #0]
    1b00:	2203      	movs	r2, #3
    1b02:	0030      	movs	r0, r6
    1b04:	f000 fa9e 	bl	2044 <memchr>
    1b08:	b130      	cbz	r0, 1b18 <_vfiprintf_r+0x164>
    1b0a:	2340      	movs	r3, #64	; 0x40
    1b0c:	1b80      	subs	r0, r0, r6
    1b0e:	4083      	lsls	r3, r0
    1b10:	682a      	ldr	r2, [r5, #0]
    1b12:	3401      	adds	r4, #1
    1b14:	4313      	orrs	r3, r2
    1b16:	602b      	str	r3, [r5, #0]
    1b18:	7821      	ldrb	r1, [r4, #0]
    1b1a:	2206      	movs	r2, #6
    1b1c:	482f      	ldr	r0, [pc, #188]	; (1bdc <_vfiprintf_r+0x228>)
    1b1e:	1c66      	adds	r6, r4, #1
    1b20:	7629      	strb	r1, [r5, #24]
    1b22:	f000 fa8f 	bl	2044 <memchr>
    1b26:	2800      	cmp	r0, #0
    1b28:	d044      	beq.n	1bb4 <_vfiprintf_r+0x200>
    1b2a:	4b2d      	ldr	r3, [pc, #180]	; (1be0 <_vfiprintf_r+0x22c>)
    1b2c:	bb83      	cbnz	r3, 1b90 <_vfiprintf_r+0x1dc>
    1b2e:	6829      	ldr	r1, [r5, #0]
    1b30:	9b05      	ldr	r3, [sp, #20]
    1b32:	2207      	movs	r2, #7
    1b34:	05c9      	lsls	r1, r1, #23
    1b36:	d529      	bpl.n	1b8c <_vfiprintf_r+0x1d8>
    1b38:	189b      	adds	r3, r3, r2
    1b3a:	4393      	bics	r3, r2
    1b3c:	3308      	adds	r3, #8
    1b3e:	9305      	str	r3, [sp, #20]
    1b40:	696b      	ldr	r3, [r5, #20]
    1b42:	9a03      	ldr	r2, [sp, #12]
    1b44:	189b      	adds	r3, r3, r2
    1b46:	616b      	str	r3, [r5, #20]
    1b48:	e752      	b.n	19f0 <_vfiprintf_r+0x3c>
    1b4a:	425b      	negs	r3, r3
    1b4c:	60eb      	str	r3, [r5, #12]
    1b4e:	2302      	movs	r3, #2
    1b50:	430b      	orrs	r3, r1
    1b52:	602b      	str	r3, [r5, #0]
    1b54:	e7c2      	b.n	1adc <_vfiprintf_r+0x128>
    1b56:	4343      	muls	r3, r0
    1b58:	3401      	adds	r4, #1
    1b5a:	189b      	adds	r3, r3, r2
    1b5c:	0031      	movs	r1, r6
    1b5e:	e78c      	b.n	1a7a <_vfiprintf_r+0xc6>
    1b60:	2301      	movs	r3, #1
    1b62:	425b      	negs	r3, r3
    1b64:	e7c9      	b.n	1afa <_vfiprintf_r+0x146>
    1b66:	2300      	movs	r3, #0
    1b68:	0014      	movs	r4, r2
    1b6a:	200a      	movs	r0, #10
    1b6c:	001a      	movs	r2, r3
    1b6e:	2601      	movs	r6, #1
    1b70:	606b      	str	r3, [r5, #4]
    1b72:	7821      	ldrb	r1, [r4, #0]
    1b74:	3930      	subs	r1, #48	; 0x30
    1b76:	2909      	cmp	r1, #9
    1b78:	d903      	bls.n	1b82 <_vfiprintf_r+0x1ce>
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d0be      	beq.n	1afc <_vfiprintf_r+0x148>
    1b7e:	9207      	str	r2, [sp, #28]
    1b80:	e7bc      	b.n	1afc <_vfiprintf_r+0x148>
    1b82:	4342      	muls	r2, r0
    1b84:	3401      	adds	r4, #1
    1b86:	1852      	adds	r2, r2, r1
    1b88:	0033      	movs	r3, r6
    1b8a:	e7f2      	b.n	1b72 <_vfiprintf_r+0x1be>
    1b8c:	3307      	adds	r3, #7
    1b8e:	e7d4      	b.n	1b3a <_vfiprintf_r+0x186>
    1b90:	ab05      	add	r3, sp, #20
    1b92:	9300      	str	r3, [sp, #0]
    1b94:	003a      	movs	r2, r7
    1b96:	4b13      	ldr	r3, [pc, #76]	; (1be4 <_vfiprintf_r+0x230>)
    1b98:	0029      	movs	r1, r5
    1b9a:	9802      	ldr	r0, [sp, #8]
    1b9c:	e000      	b.n	1ba0 <_vfiprintf_r+0x1ec>
    1b9e:	bf00      	nop
    1ba0:	9003      	str	r0, [sp, #12]
    1ba2:	9b03      	ldr	r3, [sp, #12]
    1ba4:	3301      	adds	r3, #1
    1ba6:	d1cb      	bne.n	1b40 <_vfiprintf_r+0x18c>
    1ba8:	89bb      	ldrh	r3, [r7, #12]
    1baa:	065b      	lsls	r3, r3, #25
    1bac:	d500      	bpl.n	1bb0 <_vfiprintf_r+0x1fc>
    1bae:	e77e      	b.n	1aae <_vfiprintf_r+0xfa>
    1bb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1bb2:	e77e      	b.n	1ab2 <_vfiprintf_r+0xfe>
    1bb4:	ab05      	add	r3, sp, #20
    1bb6:	9300      	str	r3, [sp, #0]
    1bb8:	003a      	movs	r2, r7
    1bba:	4b0a      	ldr	r3, [pc, #40]	; (1be4 <_vfiprintf_r+0x230>)
    1bbc:	0029      	movs	r1, r5
    1bbe:	9802      	ldr	r0, [sp, #8]
    1bc0:	f000 f87e 	bl	1cc0 <_printf_i>
    1bc4:	e7ec      	b.n	1ba0 <_vfiprintf_r+0x1ec>
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	00002118 	.word	0x00002118
    1bcc:	00002158 	.word	0x00002158
    1bd0:	00002138 	.word	0x00002138
    1bd4:	000020f8 	.word	0x000020f8
    1bd8:	0000215e 	.word	0x0000215e
    1bdc:	00002162 	.word	0x00002162
    1be0:	00000000 	.word	0x00000000
    1be4:	0000198f 	.word	0x0000198f

00001be8 <_printf_common>:
    1be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bea:	0015      	movs	r5, r2
    1bec:	9301      	str	r3, [sp, #4]
    1bee:	688a      	ldr	r2, [r1, #8]
    1bf0:	690b      	ldr	r3, [r1, #16]
    1bf2:	9000      	str	r0, [sp, #0]
    1bf4:	000c      	movs	r4, r1
    1bf6:	4293      	cmp	r3, r2
    1bf8:	da00      	bge.n	1bfc <_printf_common+0x14>
    1bfa:	0013      	movs	r3, r2
    1bfc:	0022      	movs	r2, r4
    1bfe:	602b      	str	r3, [r5, #0]
    1c00:	3243      	adds	r2, #67	; 0x43
    1c02:	7812      	ldrb	r2, [r2, #0]
    1c04:	b10a      	cbz	r2, 1c0a <_printf_common+0x22>
    1c06:	3301      	adds	r3, #1
    1c08:	602b      	str	r3, [r5, #0]
    1c0a:	6823      	ldr	r3, [r4, #0]
    1c0c:	069b      	lsls	r3, r3, #26
    1c0e:	d502      	bpl.n	1c16 <_printf_common+0x2e>
    1c10:	682b      	ldr	r3, [r5, #0]
    1c12:	3302      	adds	r3, #2
    1c14:	602b      	str	r3, [r5, #0]
    1c16:	2706      	movs	r7, #6
    1c18:	6823      	ldr	r3, [r4, #0]
    1c1a:	401f      	ands	r7, r3
    1c1c:	b33f      	cbz	r7, 1c6e <_printf_common+0x86>
    1c1e:	0023      	movs	r3, r4
    1c20:	3343      	adds	r3, #67	; 0x43
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	1e5a      	subs	r2, r3, #1
    1c26:	4193      	sbcs	r3, r2
    1c28:	6822      	ldr	r2, [r4, #0]
    1c2a:	0692      	lsls	r2, r2, #26
    1c2c:	d430      	bmi.n	1c90 <_printf_common+0xa8>
    1c2e:	0022      	movs	r2, r4
    1c30:	9901      	ldr	r1, [sp, #4]
    1c32:	3243      	adds	r2, #67	; 0x43
    1c34:	9800      	ldr	r0, [sp, #0]
    1c36:	9e08      	ldr	r6, [sp, #32]
    1c38:	47b0      	blx	r6
    1c3a:	1c43      	adds	r3, r0, #1
    1c3c:	d025      	beq.n	1c8a <_printf_common+0xa2>
    1c3e:	2306      	movs	r3, #6
    1c40:	6820      	ldr	r0, [r4, #0]
    1c42:	682a      	ldr	r2, [r5, #0]
    1c44:	68e1      	ldr	r1, [r4, #12]
    1c46:	4003      	ands	r3, r0
    1c48:	2500      	movs	r5, #0
    1c4a:	2b04      	cmp	r3, #4
    1c4c:	d103      	bne.n	1c56 <_printf_common+0x6e>
    1c4e:	1a8d      	subs	r5, r1, r2
    1c50:	43eb      	mvns	r3, r5
    1c52:	17db      	asrs	r3, r3, #31
    1c54:	401d      	ands	r5, r3
    1c56:	68a3      	ldr	r3, [r4, #8]
    1c58:	6922      	ldr	r2, [r4, #16]
    1c5a:	4293      	cmp	r3, r2
    1c5c:	dd01      	ble.n	1c62 <_printf_common+0x7a>
    1c5e:	1a9b      	subs	r3, r3, r2
    1c60:	18ed      	adds	r5, r5, r3
    1c62:	2700      	movs	r7, #0
    1c64:	42bd      	cmp	r5, r7
    1c66:	d120      	bne.n	1caa <_printf_common+0xc2>
    1c68:	2000      	movs	r0, #0
    1c6a:	e010      	b.n	1c8e <_printf_common+0xa6>
    1c6c:	3701      	adds	r7, #1
    1c6e:	68e3      	ldr	r3, [r4, #12]
    1c70:	682a      	ldr	r2, [r5, #0]
    1c72:	1a9b      	subs	r3, r3, r2
    1c74:	429f      	cmp	r7, r3
    1c76:	dad2      	bge.n	1c1e <_printf_common+0x36>
    1c78:	0022      	movs	r2, r4
    1c7a:	2301      	movs	r3, #1
    1c7c:	3219      	adds	r2, #25
    1c7e:	9901      	ldr	r1, [sp, #4]
    1c80:	9800      	ldr	r0, [sp, #0]
    1c82:	9e08      	ldr	r6, [sp, #32]
    1c84:	47b0      	blx	r6
    1c86:	1c43      	adds	r3, r0, #1
    1c88:	d1f0      	bne.n	1c6c <_printf_common+0x84>
    1c8a:	2001      	movs	r0, #1
    1c8c:	4240      	negs	r0, r0
    1c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c90:	2030      	movs	r0, #48	; 0x30
    1c92:	18e1      	adds	r1, r4, r3
    1c94:	3143      	adds	r1, #67	; 0x43
    1c96:	7008      	strb	r0, [r1, #0]
    1c98:	0021      	movs	r1, r4
    1c9a:	1c5a      	adds	r2, r3, #1
    1c9c:	3145      	adds	r1, #69	; 0x45
    1c9e:	7809      	ldrb	r1, [r1, #0]
    1ca0:	18a2      	adds	r2, r4, r2
    1ca2:	3243      	adds	r2, #67	; 0x43
    1ca4:	3302      	adds	r3, #2
    1ca6:	7011      	strb	r1, [r2, #0]
    1ca8:	e7c1      	b.n	1c2e <_printf_common+0x46>
    1caa:	0022      	movs	r2, r4
    1cac:	2301      	movs	r3, #1
    1cae:	321a      	adds	r2, #26
    1cb0:	9901      	ldr	r1, [sp, #4]
    1cb2:	9800      	ldr	r0, [sp, #0]
    1cb4:	9e08      	ldr	r6, [sp, #32]
    1cb6:	47b0      	blx	r6
    1cb8:	1c43      	adds	r3, r0, #1
    1cba:	d0e6      	beq.n	1c8a <_printf_common+0xa2>
    1cbc:	3701      	adds	r7, #1
    1cbe:	e7d1      	b.n	1c64 <_printf_common+0x7c>

00001cc0 <_printf_i>:
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	000e      	movs	r6, r1
    1cc4:	b089      	sub	sp, #36	; 0x24
    1cc6:	9305      	str	r3, [sp, #20]
    1cc8:	9003      	str	r0, [sp, #12]
    1cca:	9204      	str	r2, [sp, #16]
    1ccc:	7e0a      	ldrb	r2, [r1, #24]
    1cce:	000c      	movs	r4, r1
    1cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1cd2:	3643      	adds	r6, #67	; 0x43
    1cd4:	2a6e      	cmp	r2, #110	; 0x6e
    1cd6:	d100      	bne.n	1cda <_printf_i+0x1a>
    1cd8:	e08b      	b.n	1df2 <_printf_i+0x132>
    1cda:	d817      	bhi.n	1d0c <_printf_i+0x4c>
    1cdc:	2a63      	cmp	r2, #99	; 0x63
    1cde:	d02c      	beq.n	1d3a <_printf_i+0x7a>
    1ce0:	d808      	bhi.n	1cf4 <_printf_i+0x34>
    1ce2:	2a00      	cmp	r2, #0
    1ce4:	d100      	bne.n	1ce8 <_printf_i+0x28>
    1ce6:	e095      	b.n	1e14 <_printf_i+0x154>
    1ce8:	2a58      	cmp	r2, #88	; 0x58
    1cea:	d065      	beq.n	1db8 <_printf_i+0xf8>
    1cec:	0025      	movs	r5, r4
    1cee:	3542      	adds	r5, #66	; 0x42
    1cf0:	702a      	strb	r2, [r5, #0]
    1cf2:	e029      	b.n	1d48 <_printf_i+0x88>
    1cf4:	2a64      	cmp	r2, #100	; 0x64
    1cf6:	d001      	beq.n	1cfc <_printf_i+0x3c>
    1cf8:	2a69      	cmp	r2, #105	; 0x69
    1cfa:	d1f7      	bne.n	1cec <_printf_i+0x2c>
    1cfc:	6821      	ldr	r1, [r4, #0]
    1cfe:	681a      	ldr	r2, [r3, #0]
    1d00:	0608      	lsls	r0, r1, #24
    1d02:	d523      	bpl.n	1d4c <_printf_i+0x8c>
    1d04:	1d11      	adds	r1, r2, #4
    1d06:	6019      	str	r1, [r3, #0]
    1d08:	6813      	ldr	r3, [r2, #0]
    1d0a:	e025      	b.n	1d58 <_printf_i+0x98>
    1d0c:	2a73      	cmp	r2, #115	; 0x73
    1d0e:	d100      	bne.n	1d12 <_printf_i+0x52>
    1d10:	e084      	b.n	1e1c <_printf_i+0x15c>
    1d12:	d808      	bhi.n	1d26 <_printf_i+0x66>
    1d14:	2a6f      	cmp	r2, #111	; 0x6f
    1d16:	d027      	beq.n	1d68 <_printf_i+0xa8>
    1d18:	2a70      	cmp	r2, #112	; 0x70
    1d1a:	d1e7      	bne.n	1cec <_printf_i+0x2c>
    1d1c:	2220      	movs	r2, #32
    1d1e:	6809      	ldr	r1, [r1, #0]
    1d20:	430a      	orrs	r2, r1
    1d22:	6022      	str	r2, [r4, #0]
    1d24:	e003      	b.n	1d2e <_printf_i+0x6e>
    1d26:	2a75      	cmp	r2, #117	; 0x75
    1d28:	d01e      	beq.n	1d68 <_printf_i+0xa8>
    1d2a:	2a78      	cmp	r2, #120	; 0x78
    1d2c:	d1de      	bne.n	1cec <_printf_i+0x2c>
    1d2e:	0022      	movs	r2, r4
    1d30:	2178      	movs	r1, #120	; 0x78
    1d32:	3245      	adds	r2, #69	; 0x45
    1d34:	7011      	strb	r1, [r2, #0]
    1d36:	4968      	ldr	r1, [pc, #416]	; (1ed8 <_printf_i+0x218>)
    1d38:	e041      	b.n	1dbe <_printf_i+0xfe>
    1d3a:	000d      	movs	r5, r1
    1d3c:	681a      	ldr	r2, [r3, #0]
    1d3e:	3542      	adds	r5, #66	; 0x42
    1d40:	1d11      	adds	r1, r2, #4
    1d42:	6019      	str	r1, [r3, #0]
    1d44:	6813      	ldr	r3, [r2, #0]
    1d46:	702b      	strb	r3, [r5, #0]
    1d48:	2301      	movs	r3, #1
    1d4a:	e074      	b.n	1e36 <_printf_i+0x176>
    1d4c:	0649      	lsls	r1, r1, #25
    1d4e:	d5d9      	bpl.n	1d04 <_printf_i+0x44>
    1d50:	1d11      	adds	r1, r2, #4
    1d52:	6019      	str	r1, [r3, #0]
    1d54:	2300      	movs	r3, #0
    1d56:	5ed3      	ldrsh	r3, [r2, r3]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	da02      	bge.n	1d62 <_printf_i+0xa2>
    1d5c:	222d      	movs	r2, #45	; 0x2d
    1d5e:	425b      	negs	r3, r3
    1d60:	7032      	strb	r2, [r6, #0]
    1d62:	495e      	ldr	r1, [pc, #376]	; (1edc <_printf_i+0x21c>)
    1d64:	220a      	movs	r2, #10
    1d66:	e015      	b.n	1d94 <_printf_i+0xd4>
    1d68:	6820      	ldr	r0, [r4, #0]
    1d6a:	6819      	ldr	r1, [r3, #0]
    1d6c:	0605      	lsls	r5, r0, #24
    1d6e:	d503      	bpl.n	1d78 <_printf_i+0xb8>
    1d70:	1d08      	adds	r0, r1, #4
    1d72:	6018      	str	r0, [r3, #0]
    1d74:	680b      	ldr	r3, [r1, #0]
    1d76:	e005      	b.n	1d84 <_printf_i+0xc4>
    1d78:	0640      	lsls	r0, r0, #25
    1d7a:	d5f9      	bpl.n	1d70 <_printf_i+0xb0>
    1d7c:	1d08      	adds	r0, r1, #4
    1d7e:	6018      	str	r0, [r3, #0]
    1d80:	680b      	ldr	r3, [r1, #0]
    1d82:	b29b      	uxth	r3, r3
    1d84:	4955      	ldr	r1, [pc, #340]	; (1edc <_printf_i+0x21c>)
    1d86:	2a6f      	cmp	r2, #111	; 0x6f
    1d88:	d131      	bne.n	1dee <_printf_i+0x12e>
    1d8a:	3a67      	subs	r2, #103	; 0x67
    1d8c:	0020      	movs	r0, r4
    1d8e:	2500      	movs	r5, #0
    1d90:	3043      	adds	r0, #67	; 0x43
    1d92:	7005      	strb	r5, [r0, #0]
    1d94:	6860      	ldr	r0, [r4, #4]
    1d96:	60a0      	str	r0, [r4, #8]
    1d98:	2800      	cmp	r0, #0
    1d9a:	db72      	blt.n	1e82 <_printf_i+0x1c2>
    1d9c:	2504      	movs	r5, #4
    1d9e:	6827      	ldr	r7, [r4, #0]
    1da0:	43af      	bics	r7, r5
    1da2:	6027      	str	r7, [r4, #0]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d16e      	bne.n	1e86 <_printf_i+0x1c6>
    1da8:	0035      	movs	r5, r6
    1daa:	2800      	cmp	r0, #0
    1dac:	d077      	beq.n	1e9e <_printf_i+0x1de>
    1dae:	0025      	movs	r5, r4
    1db0:	780b      	ldrb	r3, [r1, #0]
    1db2:	3542      	adds	r5, #66	; 0x42
    1db4:	702b      	strb	r3, [r5, #0]
    1db6:	e072      	b.n	1e9e <_printf_i+0x1de>
    1db8:	3145      	adds	r1, #69	; 0x45
    1dba:	700a      	strb	r2, [r1, #0]
    1dbc:	4947      	ldr	r1, [pc, #284]	; (1edc <_printf_i+0x21c>)
    1dbe:	681a      	ldr	r2, [r3, #0]
    1dc0:	6820      	ldr	r0, [r4, #0]
    1dc2:	1d15      	adds	r5, r2, #4
    1dc4:	601d      	str	r5, [r3, #0]
    1dc6:	6813      	ldr	r3, [r2, #0]
    1dc8:	0605      	lsls	r5, r0, #24
    1dca:	d50c      	bpl.n	1de6 <_printf_i+0x126>
    1dcc:	07c2      	lsls	r2, r0, #31
    1dce:	d502      	bpl.n	1dd6 <_printf_i+0x116>
    1dd0:	2220      	movs	r2, #32
    1dd2:	4310      	orrs	r0, r2
    1dd4:	6020      	str	r0, [r4, #0]
    1dd6:	2210      	movs	r2, #16
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d1d7      	bne.n	1d8c <_printf_i+0xcc>
    1ddc:	2020      	movs	r0, #32
    1dde:	6825      	ldr	r5, [r4, #0]
    1de0:	4385      	bics	r5, r0
    1de2:	6025      	str	r5, [r4, #0]
    1de4:	e7d2      	b.n	1d8c <_printf_i+0xcc>
    1de6:	0645      	lsls	r5, r0, #25
    1de8:	d5f0      	bpl.n	1dcc <_printf_i+0x10c>
    1dea:	b29b      	uxth	r3, r3
    1dec:	e7ee      	b.n	1dcc <_printf_i+0x10c>
    1dee:	220a      	movs	r2, #10
    1df0:	e7cc      	b.n	1d8c <_printf_i+0xcc>
    1df2:	6809      	ldr	r1, [r1, #0]
    1df4:	681a      	ldr	r2, [r3, #0]
    1df6:	0608      	lsls	r0, r1, #24
    1df8:	d505      	bpl.n	1e06 <_printf_i+0x146>
    1dfa:	1d11      	adds	r1, r2, #4
    1dfc:	6019      	str	r1, [r3, #0]
    1dfe:	6813      	ldr	r3, [r2, #0]
    1e00:	6962      	ldr	r2, [r4, #20]
    1e02:	601a      	str	r2, [r3, #0]
    1e04:	e006      	b.n	1e14 <_printf_i+0x154>
    1e06:	0649      	lsls	r1, r1, #25
    1e08:	d5f7      	bpl.n	1dfa <_printf_i+0x13a>
    1e0a:	1d11      	adds	r1, r2, #4
    1e0c:	6019      	str	r1, [r3, #0]
    1e0e:	6813      	ldr	r3, [r2, #0]
    1e10:	8aa2      	ldrh	r2, [r4, #20]
    1e12:	801a      	strh	r2, [r3, #0]
    1e14:	2300      	movs	r3, #0
    1e16:	0035      	movs	r5, r6
    1e18:	6123      	str	r3, [r4, #16]
    1e1a:	e04e      	b.n	1eba <_printf_i+0x1fa>
    1e1c:	681a      	ldr	r2, [r3, #0]
    1e1e:	1d11      	adds	r1, r2, #4
    1e20:	6019      	str	r1, [r3, #0]
    1e22:	6815      	ldr	r5, [r2, #0]
    1e24:	2100      	movs	r1, #0
    1e26:	6862      	ldr	r2, [r4, #4]
    1e28:	0028      	movs	r0, r5
    1e2a:	f000 f90b 	bl	2044 <memchr>
    1e2e:	b108      	cbz	r0, 1e34 <_printf_i+0x174>
    1e30:	1b40      	subs	r0, r0, r5
    1e32:	6060      	str	r0, [r4, #4]
    1e34:	6863      	ldr	r3, [r4, #4]
    1e36:	6123      	str	r3, [r4, #16]
    1e38:	2300      	movs	r3, #0
    1e3a:	7033      	strb	r3, [r6, #0]
    1e3c:	e03d      	b.n	1eba <_printf_i+0x1fa>
    1e3e:	6923      	ldr	r3, [r4, #16]
    1e40:	002a      	movs	r2, r5
    1e42:	9904      	ldr	r1, [sp, #16]
    1e44:	9803      	ldr	r0, [sp, #12]
    1e46:	9d05      	ldr	r5, [sp, #20]
    1e48:	47a8      	blx	r5
    1e4a:	1c43      	adds	r3, r0, #1
    1e4c:	d03f      	beq.n	1ece <_printf_i+0x20e>
    1e4e:	6823      	ldr	r3, [r4, #0]
    1e50:	2500      	movs	r5, #0
    1e52:	079b      	lsls	r3, r3, #30
    1e54:	d40f      	bmi.n	1e76 <_printf_i+0x1b6>
    1e56:	9b07      	ldr	r3, [sp, #28]
    1e58:	68e0      	ldr	r0, [r4, #12]
    1e5a:	4298      	cmp	r0, r3
    1e5c:	da39      	bge.n	1ed2 <_printf_i+0x212>
    1e5e:	0018      	movs	r0, r3
    1e60:	e037      	b.n	1ed2 <_printf_i+0x212>
    1e62:	0022      	movs	r2, r4
    1e64:	2301      	movs	r3, #1
    1e66:	3219      	adds	r2, #25
    1e68:	9904      	ldr	r1, [sp, #16]
    1e6a:	9803      	ldr	r0, [sp, #12]
    1e6c:	9e05      	ldr	r6, [sp, #20]
    1e6e:	47b0      	blx	r6
    1e70:	1c43      	adds	r3, r0, #1
    1e72:	d02c      	beq.n	1ece <_printf_i+0x20e>
    1e74:	3501      	adds	r5, #1
    1e76:	68e3      	ldr	r3, [r4, #12]
    1e78:	9a07      	ldr	r2, [sp, #28]
    1e7a:	1a9b      	subs	r3, r3, r2
    1e7c:	429d      	cmp	r5, r3
    1e7e:	dbf0      	blt.n	1e62 <_printf_i+0x1a2>
    1e80:	e7e9      	b.n	1e56 <_printf_i+0x196>
    1e82:	2b00      	cmp	r3, #0
    1e84:	d093      	beq.n	1dae <_printf_i+0xee>
    1e86:	0035      	movs	r5, r6
    1e88:	fbb3 f0f2 	udiv	r0, r3, r2
    1e8c:	0017      	movs	r7, r2
    1e8e:	4347      	muls	r7, r0
    1e90:	1bdb      	subs	r3, r3, r7
    1e92:	5ccb      	ldrb	r3, [r1, r3]
    1e94:	3d01      	subs	r5, #1
    1e96:	702b      	strb	r3, [r5, #0]
    1e98:	0003      	movs	r3, r0
    1e9a:	2800      	cmp	r0, #0
    1e9c:	d1f4      	bne.n	1e88 <_printf_i+0x1c8>
    1e9e:	2a08      	cmp	r2, #8
    1ea0:	d109      	bne.n	1eb6 <_printf_i+0x1f6>
    1ea2:	6823      	ldr	r3, [r4, #0]
    1ea4:	07db      	lsls	r3, r3, #31
    1ea6:	d506      	bpl.n	1eb6 <_printf_i+0x1f6>
    1ea8:	6863      	ldr	r3, [r4, #4]
    1eaa:	6922      	ldr	r2, [r4, #16]
    1eac:	4293      	cmp	r3, r2
    1eae:	dc02      	bgt.n	1eb6 <_printf_i+0x1f6>
    1eb0:	2330      	movs	r3, #48	; 0x30
    1eb2:	3d01      	subs	r5, #1
    1eb4:	702b      	strb	r3, [r5, #0]
    1eb6:	1b76      	subs	r6, r6, r5
    1eb8:	6126      	str	r6, [r4, #16]
    1eba:	9b05      	ldr	r3, [sp, #20]
    1ebc:	aa07      	add	r2, sp, #28
    1ebe:	9300      	str	r3, [sp, #0]
    1ec0:	0021      	movs	r1, r4
    1ec2:	9b04      	ldr	r3, [sp, #16]
    1ec4:	9803      	ldr	r0, [sp, #12]
    1ec6:	f7ff fe8f 	bl	1be8 <_printf_common>
    1eca:	1c43      	adds	r3, r0, #1
    1ecc:	d1b7      	bne.n	1e3e <_printf_i+0x17e>
    1ece:	2001      	movs	r0, #1
    1ed0:	4240      	negs	r0, r0
    1ed2:	b009      	add	sp, #36	; 0x24
    1ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	0000217a 	.word	0x0000217a
    1edc:	00002169 	.word	0x00002169

00001ee0 <_sbrk_r>:
    1ee0:	2300      	movs	r3, #0
    1ee2:	b570      	push	{r4, r5, r6, lr}
    1ee4:	4c05      	ldr	r4, [pc, #20]	; (1efc <_sbrk_r+0x1c>)
    1ee6:	0005      	movs	r5, r0
    1ee8:	0008      	movs	r0, r1
    1eea:	6023      	str	r3, [r4, #0]
    1eec:	f7fe fba5 	bl	63a <_sbrk>
    1ef0:	1c43      	adds	r3, r0, #1
    1ef2:	d102      	bne.n	1efa <_sbrk_r+0x1a>
    1ef4:	6823      	ldr	r3, [r4, #0]
    1ef6:	b103      	cbz	r3, 1efa <_sbrk_r+0x1a>
    1ef8:	602b      	str	r3, [r5, #0]
    1efa:	bd70      	pop	{r4, r5, r6, pc}
    1efc:	20000f80 	.word	0x20000f80

00001f00 <__sread>:
    1f00:	b570      	push	{r4, r5, r6, lr}
    1f02:	000c      	movs	r4, r1
    1f04:	250e      	movs	r5, #14
    1f06:	5f49      	ldrsh	r1, [r1, r5]
    1f08:	f000 f8aa 	bl	2060 <_read_r>
    1f0c:	2800      	cmp	r0, #0
    1f0e:	db03      	blt.n	1f18 <__sread+0x18>
    1f10:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1f12:	181b      	adds	r3, r3, r0
    1f14:	6563      	str	r3, [r4, #84]	; 0x54
    1f16:	bd70      	pop	{r4, r5, r6, pc}
    1f18:	89a3      	ldrh	r3, [r4, #12]
    1f1a:	4a02      	ldr	r2, [pc, #8]	; (1f24 <__sread+0x24>)
    1f1c:	4013      	ands	r3, r2
    1f1e:	81a3      	strh	r3, [r4, #12]
    1f20:	e7f9      	b.n	1f16 <__sread+0x16>
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	ffffefff 	.word	0xffffefff

00001f28 <__swrite>:
    1f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f2a:	001f      	movs	r7, r3
    1f2c:	898b      	ldrh	r3, [r1, #12]
    1f2e:	0005      	movs	r5, r0
    1f30:	000c      	movs	r4, r1
    1f32:	0016      	movs	r6, r2
    1f34:	05db      	lsls	r3, r3, #23
    1f36:	d505      	bpl.n	1f44 <__swrite+0x1c>
    1f38:	230e      	movs	r3, #14
    1f3a:	5ec9      	ldrsh	r1, [r1, r3]
    1f3c:	2200      	movs	r2, #0
    1f3e:	2302      	movs	r3, #2
    1f40:	f000 f86e 	bl	2020 <_lseek_r>
    1f44:	89a3      	ldrh	r3, [r4, #12]
    1f46:	4a05      	ldr	r2, [pc, #20]	; (1f5c <__swrite+0x34>)
    1f48:	0028      	movs	r0, r5
    1f4a:	4013      	ands	r3, r2
    1f4c:	81a3      	strh	r3, [r4, #12]
    1f4e:	0032      	movs	r2, r6
    1f50:	230e      	movs	r3, #14
    1f52:	5ee1      	ldrsh	r1, [r4, r3]
    1f54:	003b      	movs	r3, r7
    1f56:	f000 f81f 	bl	1f98 <_write_r>
    1f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f5c:	ffffefff 	.word	0xffffefff

00001f60 <__sseek>:
    1f60:	b570      	push	{r4, r5, r6, lr}
    1f62:	000c      	movs	r4, r1
    1f64:	250e      	movs	r5, #14
    1f66:	5f49      	ldrsh	r1, [r1, r5]
    1f68:	f000 f85a 	bl	2020 <_lseek_r>
    1f6c:	89a3      	ldrh	r3, [r4, #12]
    1f6e:	1c42      	adds	r2, r0, #1
    1f70:	d103      	bne.n	1f7a <__sseek+0x1a>
    1f72:	4a05      	ldr	r2, [pc, #20]	; (1f88 <__sseek+0x28>)
    1f74:	4013      	ands	r3, r2
    1f76:	81a3      	strh	r3, [r4, #12]
    1f78:	bd70      	pop	{r4, r5, r6, pc}
    1f7a:	f241 0200 	movw	r2, #4096	; 0x1000
    1f7e:	4313      	orrs	r3, r2
    1f80:	81a3      	strh	r3, [r4, #12]
    1f82:	6560      	str	r0, [r4, #84]	; 0x54
    1f84:	e7f8      	b.n	1f78 <__sseek+0x18>
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	ffffefff 	.word	0xffffefff

00001f8c <__sclose>:
    1f8c:	b510      	push	{r4, lr}
    1f8e:	230e      	movs	r3, #14
    1f90:	5ec9      	ldrsh	r1, [r1, r3]
    1f92:	f000 f813 	bl	1fbc <_close_r>
    1f96:	bd10      	pop	{r4, pc}

00001f98 <_write_r>:
    1f98:	b570      	push	{r4, r5, r6, lr}
    1f9a:	0005      	movs	r5, r0
    1f9c:	0008      	movs	r0, r1
    1f9e:	0011      	movs	r1, r2
    1fa0:	2200      	movs	r2, #0
    1fa2:	4c05      	ldr	r4, [pc, #20]	; (1fb8 <_write_r+0x20>)
    1fa4:	6022      	str	r2, [r4, #0]
    1fa6:	001a      	movs	r2, r3
    1fa8:	f7ff f805 	bl	fb6 <_write>
    1fac:	1c43      	adds	r3, r0, #1
    1fae:	d102      	bne.n	1fb6 <_write_r+0x1e>
    1fb0:	6823      	ldr	r3, [r4, #0]
    1fb2:	b103      	cbz	r3, 1fb6 <_write_r+0x1e>
    1fb4:	602b      	str	r3, [r5, #0]
    1fb6:	bd70      	pop	{r4, r5, r6, pc}
    1fb8:	20000f80 	.word	0x20000f80

00001fbc <_close_r>:
    1fbc:	2300      	movs	r3, #0
    1fbe:	b570      	push	{r4, r5, r6, lr}
    1fc0:	4c05      	ldr	r4, [pc, #20]	; (1fd8 <_close_r+0x1c>)
    1fc2:	0005      	movs	r5, r0
    1fc4:	0008      	movs	r0, r1
    1fc6:	6023      	str	r3, [r4, #0]
    1fc8:	f7fe fb50 	bl	66c <_close>
    1fcc:	1c43      	adds	r3, r0, #1
    1fce:	d102      	bne.n	1fd6 <_close_r+0x1a>
    1fd0:	6823      	ldr	r3, [r4, #0]
    1fd2:	b103      	cbz	r3, 1fd6 <_close_r+0x1a>
    1fd4:	602b      	str	r3, [r5, #0]
    1fd6:	bd70      	pop	{r4, r5, r6, pc}
    1fd8:	20000f80 	.word	0x20000f80

00001fdc <_fstat_r>:
    1fdc:	2300      	movs	r3, #0
    1fde:	b570      	push	{r4, r5, r6, lr}
    1fe0:	4c06      	ldr	r4, [pc, #24]	; (1ffc <_fstat_r+0x20>)
    1fe2:	0005      	movs	r5, r0
    1fe4:	0008      	movs	r0, r1
    1fe6:	0011      	movs	r1, r2
    1fe8:	6023      	str	r3, [r4, #0]
    1fea:	f7fe fb42 	bl	672 <_fstat>
    1fee:	1c43      	adds	r3, r0, #1
    1ff0:	d102      	bne.n	1ff8 <_fstat_r+0x1c>
    1ff2:	6823      	ldr	r3, [r4, #0]
    1ff4:	b103      	cbz	r3, 1ff8 <_fstat_r+0x1c>
    1ff6:	602b      	str	r3, [r5, #0]
    1ff8:	bd70      	pop	{r4, r5, r6, pc}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	20000f80 	.word	0x20000f80

00002000 <_isatty_r>:
    2000:	2300      	movs	r3, #0
    2002:	b570      	push	{r4, r5, r6, lr}
    2004:	4c05      	ldr	r4, [pc, #20]	; (201c <_isatty_r+0x1c>)
    2006:	0005      	movs	r5, r0
    2008:	0008      	movs	r0, r1
    200a:	6023      	str	r3, [r4, #0]
    200c:	f7fe fb36 	bl	67c <_isatty>
    2010:	1c43      	adds	r3, r0, #1
    2012:	d102      	bne.n	201a <_isatty_r+0x1a>
    2014:	6823      	ldr	r3, [r4, #0]
    2016:	b103      	cbz	r3, 201a <_isatty_r+0x1a>
    2018:	602b      	str	r3, [r5, #0]
    201a:	bd70      	pop	{r4, r5, r6, pc}
    201c:	20000f80 	.word	0x20000f80

00002020 <_lseek_r>:
    2020:	b570      	push	{r4, r5, r6, lr}
    2022:	0005      	movs	r5, r0
    2024:	0008      	movs	r0, r1
    2026:	0011      	movs	r1, r2
    2028:	2200      	movs	r2, #0
    202a:	4c05      	ldr	r4, [pc, #20]	; (2040 <_lseek_r+0x20>)
    202c:	6022      	str	r2, [r4, #0]
    202e:	001a      	movs	r2, r3
    2030:	f7fe fb26 	bl	680 <_lseek>
    2034:	1c43      	adds	r3, r0, #1
    2036:	d102      	bne.n	203e <_lseek_r+0x1e>
    2038:	6823      	ldr	r3, [r4, #0]
    203a:	b103      	cbz	r3, 203e <_lseek_r+0x1e>
    203c:	602b      	str	r3, [r5, #0]
    203e:	bd70      	pop	{r4, r5, r6, pc}
    2040:	20000f80 	.word	0x20000f80

00002044 <memchr>:
    2044:	b2c9      	uxtb	r1, r1
    2046:	1882      	adds	r2, r0, r2
    2048:	4290      	cmp	r0, r2
    204a:	d101      	bne.n	2050 <memchr+0xc>
    204c:	2000      	movs	r0, #0
    204e:	4770      	bx	lr
    2050:	7803      	ldrb	r3, [r0, #0]
    2052:	428b      	cmp	r3, r1
    2054:	d0fb      	beq.n	204e <memchr+0xa>
    2056:	3001      	adds	r0, #1
    2058:	e7f6      	b.n	2048 <memchr+0x4>

0000205a <__malloc_lock>:
    205a:	4770      	bx	lr

0000205c <__malloc_unlock>:
    205c:	4770      	bx	lr
	...

00002060 <_read_r>:
    2060:	b570      	push	{r4, r5, r6, lr}
    2062:	0005      	movs	r5, r0
    2064:	0008      	movs	r0, r1
    2066:	0011      	movs	r1, r2
    2068:	2200      	movs	r2, #0
    206a:	4c05      	ldr	r4, [pc, #20]	; (2080 <_read_r+0x20>)
    206c:	6022      	str	r2, [r4, #0]
    206e:	001a      	movs	r2, r3
    2070:	f7fe ff8e 	bl	f90 <_read>
    2074:	1c43      	adds	r3, r0, #1
    2076:	d102      	bne.n	207e <_read_r+0x1e>
    2078:	6823      	ldr	r3, [r4, #0]
    207a:	b103      	cbz	r3, 207e <_read_r+0x1e>
    207c:	602b      	str	r3, [r5, #0]
    207e:	bd70      	pop	{r4, r5, r6, pc}
    2080:	20000f80 	.word	0x20000f80
    2084:	682f2e2e 	.word	0x682f2e2e
    2088:	732f6c61 	.word	0x732f6c61
    208c:	682f6372 	.word	0x682f6372
    2090:	695f6c61 	.word	0x695f6c61
    2094:	00632e6f 	.word	0x00632e6f
    2098:	682f2e2e 	.word	0x682f2e2e
    209c:	732f6c61 	.word	0x732f6c61
    20a0:	682f6372 	.word	0x682f6372
    20a4:	755f6c61 	.word	0x755f6c61
    20a8:	74726173 	.word	0x74726173
    20ac:	6e79735f 	.word	0x6e79735f
    20b0:	00632e63 	.word	0x00632e63
    20b4:	42000400 	.word	0x42000400
    20b8:	42000800 	.word	0x42000800
    20bc:	42000c00 	.word	0x42000c00

000020c0 <_i2cms>:
	...
    20d8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    20e8:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000020f4 <_global_impure_ptr>:
    20f4:	20000008                                ... 

000020f8 <__sf_fake_stderr>:
	...

00002118 <__sf_fake_stdin>:
	...

00002138 <__sf_fake_stdout>:
	...
    2158:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2168:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2178:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2188:	00006665                                ef..

0000218c <_init>:
    218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2192:	bc08      	pop	{r3}
    2194:	469e      	mov	lr, r3
    2196:	4770      	bx	lr

00002198 <__init_array_start>:
    2198:	00000265 	.word	0x00000265

0000219c <_fini>:
    219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21a2:	bc08      	pop	{r3}
    21a4:	469e      	mov	lr, r3
    21a6:	4770      	bx	lr

000021a8 <__fini_array_start>:
    21a8:	00000239 	.word	0x00000239

Disassembly of section .gnu.sgstubs:

00007c00 <SecureInit_DePrioritizeNSExceptions>:
    7c00:	e97f e97f 	sg
    7c04:	f7f9 b986 	b.w	f14 <__acle_se_SecureInit_DePrioritizeNSExceptions>

00007c08 <SecureContext_AllocateContext>:
    7c08:	e97f e97f 	sg
    7c0c:	f7f8 ba85 	b.w	11a <__acle_se_SecureContext_AllocateContext>

00007c10 <nsc_func_plus3>:
    7c10:	e97f e97f 	sg
    7c14:	f7f8 bae0 	b.w	1d8 <__acle_se_nsc_func_plus3>

00007c18 <nsc_func_minus2>:
    7c18:	e97f e97f 	sg
    7c1c:	f7f8 baec 	b.w	1f8 <__acle_se_nsc_func_minus2>

00007c20 <nsc_printf>:
    7c20:	e97f e97f 	sg
    7c24:	f7f8 baf8 	b.w	218 <__acle_se_nsc_printf>

00007c28 <SecureContext_Init>:
    7c28:	e97f e97f 	sg
    7c2c:	f7f8 ba62 	b.w	f4 <__acle_se_SecureContext_Init>

00007c30 <SecureContext_LoadContext>:
    7c30:	e97f e97f 	sg
    7c34:	f7f9 b847 	b.w	cc6 <__acle_se_SecureContext_LoadContext>

00007c38 <SecureContext_SaveContext>:
    7c38:	e97f e97f 	sg
    7c3c:	f7f9 b854 	b.w	ce8 <__acle_se_SecureContext_SaveContext>

00007c40 <nsc_invoke_command>:
    7c40:	e97f e97f 	sg
    7c44:	f7f8 bab5 	b.w	1b2 <__acle_se_nsc_invoke_command>

00007c48 <SecureInit_EnableNSFPUAccess>:
    7c48:	e97f e97f 	sg
    7c4c:	f7f9 b97c 	b.w	f48 <__acle_se_SecureInit_EnableNSFPUAccess>

00007c50 <SecureContext_FreeContext>:
    7c50:	e97f e97f 	sg
    7c54:	f7f8 ba8e 	b.w	174 <__acle_se_SecureContext_FreeContext>
	...
