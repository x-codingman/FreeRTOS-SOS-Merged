
FreeRTOS-2-S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002468  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000060  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000070  20000000  00002468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000014a0  20000070  000024d8  00020070  2**2
                  ALLOC
  4 .heap         00000200  20001510  00003978  00020070  2**0
                  ALLOC
  5 .stack        00000400  20001710  00003b78  00020070  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001deee  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b38  00000000  00000000  00051f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a767  00000000  00000000  00055acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b10  00000000  00000000  00060232  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f20  00000000  00000000  00060d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001db08  00000000  00000000  00061c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010ca9  00000000  00000000  0007f76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00091b95  00000000  00000000  00090413  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002138  00000000  00000000  00121fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 1b 00 20 dd 02 00 00 db 02 00 00 db 02 00 00     ... ............
	...
      2c:	71 0d 00 00 00 00 00 00 00 00 00 00 db 02 00 00     q...............
      3c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      4c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      5c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      6c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      7c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      8c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      9c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      ac:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      bc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      cc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      dc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      ec:	db 02 00 00 db 02 00 00                             ........

000000f4 <__acle_se_SecureContext_Init>:
secureportNON_SECURE_CALLABLE void SecureContext_Init( void )
{
	uint32_t ulIPSR;

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
      f4:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
      f8:	b13b      	cbz	r3, 10a <__acle_se_SecureContext_Init+0x16>
	{
		/* No stack for thread mode until a task's context is loaded. */
		secureportSET_PSPLIM( securecontextNO_STACK );
      fa:	2300      	movs	r3, #0
      fc:	f383 880b 	msr	PSPLIM, r3
		secureportSET_PSP( securecontextNO_STACK );
     100:	f383 8809 	msr	PSP, r3
			secureportSET_CONTROL( securecontextCONTROL_VALUE_UNPRIVILEGED );
		}
		#else /* configENABLE_MPU */
		{
			/* Configure thread mode to use PSP and to be privileged.. */
			secureportSET_CONTROL( securecontextCONTROL_VALUE_PRIVILEGED );
     104:	3302      	adds	r3, #2
     106:	f383 8814 	msr	CONTROL, r3
		}
		#endif /* configENABLE_MPU */
	}
}
     10a:	2000      	movs	r0, #0
     10c:	0001      	movs	r1, r0
     10e:	0002      	movs	r2, r0
     110:	0003      	movs	r3, r0
     112:	4684      	mov	ip, r0
     114:	f38e 8800 	msr	CPSR_f, lr
     118:	4774      	bxns	lr

0000011a <__acle_se_SecureContext_AllocateContext>:
#if( configENABLE_MPU == 1 )
	secureportNON_SECURE_CALLABLE SecureContextHandle_t SecureContext_AllocateContext( uint32_t ulSecureStackSize, uint32_t ulIsTaskPrivileged )
#else /* configENABLE_MPU */
	secureportNON_SECURE_CALLABLE SecureContextHandle_t SecureContext_AllocateContext( uint32_t ulSecureStackSize )
#endif /* configENABLE_MPU */
{
     11a:	b570      	push	{r4, r5, r6, lr}
     11c:	0005      	movs	r5, r0
	#if( configENABLE_MPU == 1 )
		uint32_t *pulCurrentStackPointer = NULL;
	#endif /* configENABLE_MPU */

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
     11e:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
     122:	b32b      	cbz	r3, 170 <__acle_se_SecureContext_AllocateContext+0x56>
	{
		/* Allocate the context structure. */
		xSecureContextHandle = ( SecureContextHandle_t ) pvPortMalloc( sizeof( SecureContext_t ) );
     124:	200c      	movs	r0, #12
     126:	f640 7321 	movw	r3, #3873	; 0xf21
     12a:	f2c0 0300 	movt	r3, #0
     12e:	4798      	blx	r3
     130:	0004      	movs	r4, r0

		if( xSecureContextHandle != NULL )
     132:	b150      	cbz	r0, 14a <__acle_se_SecureContext_AllocateContext+0x30>
		{
			/* Allocate the stack space. */
			pucStackMemory = pvPortMalloc( ulSecureStackSize );
     134:	0028      	movs	r0, r5
     136:	f640 7321 	movw	r3, #3873	; 0xf21
     13a:	f2c0 0300 	movt	r3, #0
     13e:	4798      	blx	r3

			if( pucStackMemory != NULL )
     140:	b170      	cbz	r0, 160 <__acle_se_SecureContext_AllocateContext+0x46>
				 * location. Note that this location is next to the last
				 * allocated byte because the hardware decrements the stack
				 * pointer before writing i.e. if stack pointer is 0x2, a push
				 * operation will decrement the stack pointer to 0x1 and then
				 * write at 0x1. */
				xSecureContextHandle->pucStackStart = pucStackMemory + ulSecureStackSize;
     142:	1945      	adds	r5, r0, r5
     144:	60a5      	str	r5, [r4, #8]

				/* The stack cannot go beyond this location. This value is
				 * programmed in the PSPLIM register on context switch.*/
				xSecureContextHandle->pucStackLimit = pucStackMemory;
     146:	6060      	str	r0, [r4, #4]
				}
				#else /* configENABLE_MPU */
				{
					/* Current SP is set to the starting of the stack. This
					 * value programmed in the PSP register on context switch. */
					xSecureContextHandle->pucCurrentStackPointer = xSecureContextHandle->pucStackStart;
     148:	6025      	str	r5, [r4, #0]
			}
		}
	}

	return xSecureContextHandle;
}
     14a:	0020      	movs	r0, r4
     14c:	0001      	movs	r1, r0
     14e:	0002      	movs	r2, r0
     150:	0003      	movs	r3, r0
     152:	4684      	mov	ip, r0
     154:	bc70      	pop	{r4, r5, r6}
     156:	bc02      	pop	{r1}
     158:	4686      	mov	lr, r0
     15a:	f381 8800 	msr	CPSR_f, r1
     15e:	470c      	bxns	r1
				vPortFree( xSecureContextHandle );
     160:	0020      	movs	r0, r4
     162:	f241 0367 	movw	r3, #4199	; 0x1067
     166:	f2c0 0300 	movt	r3, #0
     16a:	4798      	blx	r3
				xSecureContextHandle = NULL;
     16c:	2400      	movs	r4, #0
     16e:	e7ec      	b.n	14a <__acle_se_SecureContext_AllocateContext+0x30>
	SecureContextHandle_t xSecureContextHandle = NULL;
     170:	2400      	movs	r4, #0
	return xSecureContextHandle;
     172:	e7ea      	b.n	14a <__acle_se_SecureContext_AllocateContext+0x30>

00000174 <__acle_se_SecureContext_FreeContext>:
/*-----------------------------------------------------------*/

secureportNON_SECURE_CALLABLE void SecureContext_FreeContext( SecureContextHandle_t xSecureContextHandle )
{
     174:	b570      	push	{r4, r5, r6, lr}
     176:	0005      	movs	r5, r0
	uint32_t ulIPSR;

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
     178:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
     17c:	b143      	cbz	r3, 190 <__acle_se_SecureContext_FreeContext+0x1c>
	{
		/* Ensure that valid parameters are passed. */
		secureportASSERT( xSecureContextHandle != NULL );
     17e:	b190      	cbz	r0, 1a6 <__acle_se_SecureContext_FreeContext+0x32>

		/* Free the stack space. */
		vPortFree( xSecureContextHandle->pucStackLimit );
     180:	6840      	ldr	r0, [r0, #4]
     182:	f241 0467 	movw	r4, #4199	; 0x1067
     186:	f2c0 0400 	movt	r4, #0
     18a:	47a0      	blx	r4

		/* Free the context itself. */
		vPortFree( xSecureContextHandle );
     18c:	0028      	movs	r0, r5
     18e:	47a0      	blx	r4
	}
}
     190:	2000      	movs	r0, #0
     192:	0001      	movs	r1, r0
     194:	0002      	movs	r2, r0
     196:	0003      	movs	r3, r0
     198:	4684      	mov	ip, r0
     19a:	bc70      	pop	{r4, r5, r6}
     19c:	bc01      	pop	{r0}
     19e:	4686      	mov	lr, r0
     1a0:	f380 8800 	msr	CPSR_f, r0
     1a4:	4704      	bxns	r0
		secureportASSERT( xSecureContextHandle != NULL );
     1a6:	2301      	movs	r3, #1
     1a8:	f383 8810 	msr	PRIMASK, r3
     1ac:	f383 8890 	msr	PRIMASK_NS, r3
     1b0:	e7fe      	b.n	1b0 <__acle_se_SecureContext_FreeContext+0x3c>

000001b2 <__acle_se_nsc_invoke_command>:
/* sos kernel callable functions */
secureportNON_SECURE_CALLABLE int nsc_invoke_command(
uint32_t module_id,
uint32_t command_id,
uint32_t *operation
){
     1b2:	b500      	push	{lr}
     1b4:	b083      	sub	sp, #12
     1b6:	9201      	str	r2, [sp, #4]
	return syscall_nsc_call_module((uint32_t) module_id,(uint32_t) command_id,(SOS_Operation_t*)(&operation));
     1b8:	aa01      	add	r2, sp, #4
     1ba:	f640 53b5 	movw	r3, #3509	; 0xdb5
     1be:	f2c0 0300 	movt	r3, #0
     1c2:	4798      	blx	r3
}
     1c4:	b003      	add	sp, #12
     1c6:	0001      	movs	r1, r0
     1c8:	0002      	movs	r2, r0
     1ca:	0003      	movs	r3, r0
     1cc:	4684      	mov	ip, r0
     1ce:	bc02      	pop	{r1}
     1d0:	4686      	mov	lr, r0
     1d2:	f381 8800 	msr	CPSR_f, r1
     1d6:	470c      	bxns	r1

000001d8 <__acle_se_nsc_func_plus3>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_plus3(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_func_plus3(int x)
#endif
{
     1d8:	b510      	push	{r4, lr}
	return func_plus3(x);
     1da:	f640 633f 	movw	r3, #3647	; 0xe3f
     1de:	f2c0 0300 	movt	r3, #0
     1e2:	4798      	blx	r3
}
     1e4:	0001      	movs	r1, r0
     1e6:	0002      	movs	r2, r0
     1e8:	0003      	movs	r3, r0
     1ea:	4684      	mov	ip, r0
     1ec:	bc10      	pop	{r4}
     1ee:	bc02      	pop	{r1}
     1f0:	4686      	mov	lr, r0
     1f2:	f381 8800 	msr	CPSR_f, r1
     1f6:	470c      	bxns	r1

000001f8 <__acle_se_nsc_func_minus2>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_minus2(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_func_minus2(int x)
#endif
{
     1f8:	b510      	push	{r4, lr}
	return func_minus2(x);
     1fa:	f640 6343 	movw	r3, #3651	; 0xe43
     1fe:	f2c0 0300 	movt	r3, #0
     202:	4798      	blx	r3
}
     204:	0001      	movs	r1, r0
     206:	0002      	movs	r2, r0
     208:	0003      	movs	r3, r0
     20a:	4684      	mov	ip, r0
     20c:	bc10      	pop	{r4}
     20e:	bc02      	pop	{r1}
     210:	4686      	mov	lr, r0
     212:	f381 8800 	msr	CPSR_f, r1
     216:	470c      	bxns	r1

00000218 <__acle_se_nsc_printf>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_minus2(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_printf(char * str)
#endif
{
     218:	b510      	push	{r4, lr}
	return printf(str);
     21a:	f241 23c9 	movw	r3, #4809	; 0x12c9
     21e:	f2c0 0300 	movt	r3, #0
     222:	4798      	blx	r3
     224:	0001      	movs	r1, r0
     226:	0002      	movs	r2, r0
     228:	0003      	movs	r3, r0
     22a:	4684      	mov	ip, r0
     22c:	bc10      	pop	{r4}
     22e:	bc02      	pop	{r1}
     230:	4686      	mov	lr, r0
     232:	f381 8800 	msr	CPSR_f, r1
     236:	470c      	bxns	r1

00000238 <__do_global_dtors_aux>:
     238:	b510      	push	{r4, lr}
     23a:	f240 0470 	movw	r4, #112	; 0x70
     23e:	f2c2 0400 	movt	r4, #8192	; 0x2000
     242:	7823      	ldrb	r3, [r4, #0]
     244:	b963      	cbnz	r3, 260 <__do_global_dtors_aux+0x28>
     246:	f240 0300 	movw	r3, #0
     24a:	f2c0 0300 	movt	r3, #0
     24e:	b12b      	cbz	r3, 25c <__do_global_dtors_aux+0x24>
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c0 0080 	movt	r0, #128	; 0x80
     258:	e000      	b.n	25c <__do_global_dtors_aux+0x24>
     25a:	bf00      	nop
     25c:	2301      	movs	r3, #1
     25e:	7023      	strb	r3, [r4, #0]
     260:	bd10      	pop	{r4, pc}
     262:	46c0      	nop			; (mov r8, r8)

00000264 <frame_dummy>:
     264:	f240 0300 	movw	r3, #0
     268:	f2c0 0300 	movt	r3, #0
     26c:	b510      	push	{r4, lr}
     26e:	b14b      	cbz	r3, 284 <frame_dummy+0x20>
     270:	f240 0174 	movw	r1, #116	; 0x74
     274:	f244 0020 	movw	r0, #16416	; 0x4020
     278:	f2c2 0100 	movt	r1, #8192	; 0x2000
     27c:	f2c0 0080 	movt	r0, #128	; 0x80
     280:	e000      	b.n	284 <frame_dummy+0x20>
     282:	bf00      	nop
     284:	f244 0020 	movw	r0, #16416	; 0x4020
     288:	f2c0 0080 	movt	r0, #128	; 0x80
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	b903      	cbnz	r3, 292 <frame_dummy+0x2e>
     290:	bd10      	pop	{r4, pc}
     292:	f240 0300 	movw	r3, #0
     296:	f2c0 0300 	movt	r3, #0
     29a:	2b00      	cmp	r3, #0
     29c:	d0f8      	beq.n	290 <frame_dummy+0x2c>
     29e:	4798      	blx	r3
     2a0:	e7f6      	b.n	290 <frame_dummy+0x2c>
     2a2:	46c0      	nop			; (mov r8, r8)

000002a4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2a4:	b510      	push	{r4, lr}
	system_init();
     2a6:	f240 433d 	movw	r3, #1085	; 0x43d
     2aa:	f2c0 0300 	movt	r3, #0
     2ae:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     2b0:	f243 2300 	movw	r3, #12800	; 0x3200
     2b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     2b8:	2200      	movs	r2, #0
     2ba:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     2bc:	f24e 1300 	movw	r3, #57600	; 0xe100
     2c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
     2c4:	f240 2180 	movw	r1, #640	; 0x280
     2c8:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     2ca:	3104      	adds	r1, #4
     2cc:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
	stdio_redirect_init();
     2ce:	f241 2311 	movw	r3, #4625	; 0x1211
     2d2:	f2c0 0300 	movt	r3, #0
     2d6:	4798      	blx	r3
}
     2d8:	bd10      	pop	{r4, pc}

000002da <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2da:	e7fe      	b.n	2da <Dummy_Handler>

000002dc <Reset_Handler>:
{
     2dc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     2de:	f242 4268 	movw	r2, #9320	; 0x2468
     2e2:	f2c0 0200 	movt	r2, #0
     2e6:	f240 0300 	movw	r3, #0
     2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2ee:	429a      	cmp	r2, r3
     2f0:	d020      	beq.n	334 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     2f2:	001a      	movs	r2, r3
     2f4:	f240 0370 	movw	r3, #112	; 0x70
     2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2fc:	429a      	cmp	r2, r3
     2fe:	d219      	bcs.n	334 <Reset_Handler+0x58>
     300:	f240 0370 	movw	r3, #112	; 0x70
     304:	f2c2 0300 	movt	r3, #8192	; 0x2000
     308:	3303      	adds	r3, #3
     30a:	4a24      	ldr	r2, [pc, #144]	; (39c <Reset_Handler+0xc0>)
     30c:	1a9b      	subs	r3, r3, r2
     30e:	089b      	lsrs	r3, r3, #2
     310:	3301      	adds	r3, #1
     312:	009b      	lsls	r3, r3, #2
     314:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     316:	f240 0100 	movw	r1, #0
     31a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     31e:	1851      	adds	r1, r2, r1
     320:	f242 4068 	movw	r0, #9320	; 0x2468
     324:	f2c0 0000 	movt	r0, #0
     328:	1810      	adds	r0, r2, r0
     32a:	6800      	ldr	r0, [r0, #0]
     32c:	6008      	str	r0, [r1, #0]
     32e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     330:	429a      	cmp	r2, r3
     332:	d1f0      	bne.n	316 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     334:	f240 0270 	movw	r2, #112	; 0x70
     338:	f2c2 0200 	movt	r2, #8192	; 0x2000
     33c:	f241 5310 	movw	r3, #5392	; 0x1510
     340:	f2c2 0300 	movt	r3, #8192	; 0x2000
     344:	429a      	cmp	r2, r3
     346:	d213      	bcs.n	370 <Reset_Handler+0x94>
     348:	f240 0270 	movw	r2, #112	; 0x70
     34c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     350:	43d3      	mvns	r3, r2
     352:	f241 5110 	movw	r1, #5392	; 0x1510
     356:	f2c2 0100 	movt	r1, #8192	; 0x2000
     35a:	468c      	mov	ip, r1
     35c:	4463      	add	r3, ip
     35e:	2103      	movs	r1, #3
     360:	438b      	bics	r3, r1
     362:	3304      	adds	r3, #4
     364:	4694      	mov	ip, r2
     366:	4463      	add	r3, ip
                *pDest++ = 0;
     368:	2100      	movs	r1, #0
     36a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     36c:	4293      	cmp	r3, r2
     36e:	d1fc      	bne.n	36a <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     370:	f240 0300 	movw	r3, #0
     374:	f2c0 0300 	movt	r3, #0
     378:	227f      	movs	r2, #127	; 0x7f
     37a:	4393      	bics	r3, r2
     37c:	f64e 5200 	movw	r2, #60672	; 0xed00
     380:	f2ce 0200 	movt	r2, #57344	; 0xe000
     384:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     386:	f241 2369 	movw	r3, #4713	; 0x1269
     38a:	f2c0 0300 	movt	r3, #0
     38e:	4798      	blx	r3
        main();
     390:	f640 6347 	movw	r3, #3655	; 0xe47
     394:	f2c0 0300 	movt	r3, #0
     398:	4798      	blx	r3
     39a:	e7fe      	b.n	39a <Reset_Handler+0xbe>
     39c:	20000004 	.word	0x20000004

000003a0 <TARGET_IO_PORT_init>:
#endif

struct usart_sync_descriptor TARGET_IO;

void TARGET_IO_PORT_init(void)
{
     3a0:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f243 2300 	movw	r3, #12800	; 0x3200
     3a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3aa:	2258      	movs	r2, #88	; 0x58
     3ac:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3ae:	2501      	movs	r5, #1
     3b0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	2401      	movs	r4, #1
     3b4:	4321      	orrs	r1, r4
     3b6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	203c      	movs	r0, #60	; 0x3c
     3bc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	3a49      	subs	r2, #73	; 0x49
     3c0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	3a0d      	subs	r2, #13
     3c4:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	3111      	adds	r1, #17
     3dc:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3de:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA24, PINMUX_PA24C_SERCOM0_PAD2);

	gpio_set_pin_function(PA25, PINMUX_PA25C_SERCOM0_PAD3);
}
     3e0:	bd30      	pop	{r4, r5, pc}

000003e2 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3e2:	f641 4300 	movw	r3, #7168	; 0x1c00
     3e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3ea:	2140      	movs	r1, #64	; 0x40
     3ec:	22ac      	movs	r2, #172	; 0xac
     3ee:	5099      	str	r1, [r3, r2]
     3f0:	3103      	adds	r1, #3
     3f2:	3a04      	subs	r2, #4
     3f4:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     3f6:	f640 0300 	movw	r3, #2048	; 0x800
     3fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3fe:	69da      	ldr	r2, [r3, #28]
     400:	3941      	subs	r1, #65	; 0x41
     402:	430a      	orrs	r2, r1
     404:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     406:	4770      	bx	lr

00000408 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     408:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     40a:	f240 33e3 	movw	r3, #995	; 0x3e3
     40e:	f2c0 0300 	movt	r3, #0
     412:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     414:	f240 4100 	movw	r1, #1024	; 0x400
     418:	f2c4 2100 	movt	r1, #16896	; 0x4200
     41c:	f241 00c0 	movw	r0, #4288	; 0x10c0
     420:	f2c2 0000 	movt	r0, #8192	; 0x2000
     424:	2200      	movs	r2, #0
     426:	f240 53db 	movw	r3, #1499	; 0x5db
     42a:	f2c0 0300 	movt	r3, #0
     42e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     430:	f240 33a1 	movw	r3, #929	; 0x3a1
     434:	f2c0 0300 	movt	r3, #0
     438:	4798      	blx	r3
}
     43a:	bd10      	pop	{r4, pc}

0000043c <system_init>:

void system_init(void)
{
     43c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     43e:	f240 63c9 	movw	r3, #1737	; 0x6c9
     442:	f2c0 0300 	movt	r3, #0
     446:	4798      	blx	r3
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif

	TARGET_IO_init();
     448:	f240 4309 	movw	r3, #1033	; 0x409
     44c:	f2c0 0300 	movt	r3, #0
     450:	4798      	blx	r3
}
     452:	bd10      	pop	{r4, pc}

00000454 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     454:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     456:	f240 038c 	movw	r3, #140	; 0x8c
     45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     45e:	681c      	ldr	r4, [r3, #0]
     460:	f240 63ab 	movw	r3, #1707	; 0x6ab
     464:	f2c0 0300 	movt	r3, #0
     468:	4798      	blx	r3
     46a:	0001      	movs	r1, r0
     46c:	0020      	movs	r0, r4
     46e:	f240 63c3 	movw	r3, #1731	; 0x6c3
     472:	f2c0 0300 	movt	r3, #0
     476:	4798      	blx	r3
}
     478:	bd10      	pop	{r4, pc}

0000047a <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     47a:	b570      	push	{r4, r5, r6, lr}
     47c:	0006      	movs	r6, r0
     47e:	000c      	movs	r4, r1
     480:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     482:	b198      	cbz	r0, 4ac <io_write+0x32>
     484:	0008      	movs	r0, r1
     486:	1e43      	subs	r3, r0, #1
     488:	4198      	sbcs	r0, r3
     48a:	b2c0      	uxtb	r0, r0
     48c:	f242 3108 	movw	r1, #8968	; 0x2308
     490:	f2c0 0100 	movt	r1, #0
     494:	2234      	movs	r2, #52	; 0x34
     496:	f240 635b 	movw	r3, #1627	; 0x65b
     49a:	f2c0 0300 	movt	r3, #0
     49e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4a0:	6833      	ldr	r3, [r6, #0]
     4a2:	002a      	movs	r2, r5
     4a4:	0021      	movs	r1, r4
     4a6:	0030      	movs	r0, r6
     4a8:	4798      	blx	r3
}
     4aa:	bd70      	pop	{r4, r5, r6, pc}
     4ac:	2000      	movs	r0, #0
     4ae:	e7ed      	b.n	48c <io_write+0x12>

000004b0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4b0:	b570      	push	{r4, r5, r6, lr}
     4b2:	0006      	movs	r6, r0
     4b4:	000c      	movs	r4, r1
     4b6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4b8:	b198      	cbz	r0, 4e2 <io_read+0x32>
     4ba:	0008      	movs	r0, r1
     4bc:	1e43      	subs	r3, r0, #1
     4be:	4198      	sbcs	r0, r3
     4c0:	b2c0      	uxtb	r0, r0
     4c2:	f242 3108 	movw	r1, #8968	; 0x2308
     4c6:	f2c0 0100 	movt	r1, #0
     4ca:	223d      	movs	r2, #61	; 0x3d
     4cc:	f240 635b 	movw	r3, #1627	; 0x65b
     4d0:	f2c0 0300 	movt	r3, #0
     4d4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4d6:	6873      	ldr	r3, [r6, #4]
     4d8:	002a      	movs	r2, r5
     4da:	0021      	movs	r1, r4
     4dc:	0030      	movs	r0, r6
     4de:	4798      	blx	r3
}
     4e0:	bd70      	pop	{r4, r5, r6, pc}
     4e2:	2000      	movs	r0, #0
     4e4:	e7ed      	b.n	4c2 <io_read+0x12>

000004e6 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4e8:	46ce      	mov	lr, r9
     4ea:	4647      	mov	r7, r8
     4ec:	b580      	push	{r7, lr}
     4ee:	0004      	movs	r4, r0
     4f0:	000f      	movs	r7, r1
     4f2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4f4:	2800      	cmp	r0, #0
     4f6:	d037      	beq.n	568 <usart_sync_write+0x82>
     4f8:	2900      	cmp	r1, #0
     4fa:	d037      	beq.n	56c <usart_sync_write+0x86>
     4fc:	0010      	movs	r0, r2
     4fe:	1e43      	subs	r3, r0, #1
     500:	4198      	sbcs	r0, r3
     502:	f242 311c 	movw	r1, #8988	; 0x231c
     506:	f2c0 0100 	movt	r1, #0
     50a:	22f1      	movs	r2, #241	; 0xf1
     50c:	f240 635b 	movw	r3, #1627	; 0x65b
     510:	f2c0 0300 	movt	r3, #0
     514:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     516:	3408      	adds	r4, #8
     518:	f640 1505 	movw	r5, #2309	; 0x905
     51c:	f2c0 0500 	movt	r5, #0
     520:	0020      	movs	r0, r4
     522:	47a8      	blx	r5
     524:	2800      	cmp	r0, #0
     526:	d0fb      	beq.n	520 <usart_sync_write+0x3a>
     528:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     52a:	f640 09f5 	movw	r9, #2293	; 0x8f5
     52e:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     532:	f640 1505 	movw	r5, #2309	; 0x905
     536:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     53a:	5db9      	ldrb	r1, [r7, r6]
     53c:	0020      	movs	r0, r4
     53e:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     540:	0020      	movs	r0, r4
     542:	47a8      	blx	r5
     544:	2800      	cmp	r0, #0
     546:	d0fb      	beq.n	540 <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     548:	3601      	adds	r6, #1
     54a:	4546      	cmp	r6, r8
     54c:	d3f5      	bcc.n	53a <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     54e:	f640 150f 	movw	r5, #2319	; 0x90f
     552:	f2c0 0500 	movt	r5, #0
     556:	0020      	movs	r0, r4
     558:	47a8      	blx	r5
     55a:	2800      	cmp	r0, #0
     55c:	d0fb      	beq.n	556 <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     55e:	0030      	movs	r0, r6
     560:	bc0c      	pop	{r2, r3}
     562:	4690      	mov	r8, r2
     564:	4699      	mov	r9, r3
     566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     568:	2000      	movs	r0, #0
     56a:	e7ca      	b.n	502 <usart_sync_write+0x1c>
     56c:	2000      	movs	r0, #0
     56e:	e7c8      	b.n	502 <usart_sync_write+0x1c>

00000570 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     572:	46ce      	mov	lr, r9
     574:	4647      	mov	r7, r8
     576:	b580      	push	{r7, lr}
     578:	0004      	movs	r4, r0
     57a:	4688      	mov	r8, r1
     57c:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     57e:	b340      	cbz	r0, 5d2 <usart_sync_read+0x62>
     580:	b349      	cbz	r1, 5d6 <usart_sync_read+0x66>
     582:	0010      	movs	r0, r2
     584:	1e43      	subs	r3, r0, #1
     586:	4198      	sbcs	r0, r3
     588:	f242 311c 	movw	r1, #8988	; 0x231c
     58c:	f2c0 0100 	movt	r1, #0
     590:	f240 120c 	movw	r2, #268	; 0x10c
     594:	f240 635b 	movw	r3, #1627	; 0x65b
     598:	f2c0 0300 	movt	r3, #0
     59c:	4798      	blx	r3
	uint32_t                      offset = 0;
     59e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     5a0:	3408      	adds	r4, #8
     5a2:	f640 1519 	movw	r5, #2329	; 0x919
     5a6:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     5aa:	f640 07fd 	movw	r7, #2301	; 0x8fd
     5ae:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
     5b2:	0020      	movs	r0, r4
     5b4:	47a8      	blx	r5
     5b6:	2800      	cmp	r0, #0
     5b8:	d0fb      	beq.n	5b2 <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     5ba:	0020      	movs	r0, r4
     5bc:	47b8      	blx	r7
     5be:	4643      	mov	r3, r8
     5c0:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
     5c2:	3601      	adds	r6, #1
     5c4:	454e      	cmp	r6, r9
     5c6:	d3f4      	bcc.n	5b2 <usart_sync_read+0x42>

	return (int32_t)offset;
}
     5c8:	0030      	movs	r0, r6
     5ca:	bc0c      	pop	{r2, r3}
     5cc:	4690      	mov	r8, r2
     5ce:	4699      	mov	r9, r3
     5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5d2:	2000      	movs	r0, #0
     5d4:	e7d8      	b.n	588 <usart_sync_read+0x18>
     5d6:	2000      	movs	r0, #0
     5d8:	e7d6      	b.n	588 <usart_sync_read+0x18>

000005da <usart_sync_init>:
{
     5da:	b570      	push	{r4, r5, r6, lr}
     5dc:	0005      	movs	r5, r0
     5de:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     5e0:	b308      	cbz	r0, 626 <usart_sync_init+0x4c>
     5e2:	0008      	movs	r0, r1
     5e4:	1e43      	subs	r3, r0, #1
     5e6:	4198      	sbcs	r0, r3
     5e8:	b2c0      	uxtb	r0, r0
     5ea:	f242 311c 	movw	r1, #8988	; 0x231c
     5ee:	f2c0 0100 	movt	r1, #0
     5f2:	2234      	movs	r2, #52	; 0x34
     5f4:	f240 635b 	movw	r3, #1627	; 0x65b
     5f8:	f2c0 0300 	movt	r3, #0
     5fc:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5fe:	0028      	movs	r0, r5
     600:	3008      	adds	r0, #8
     602:	0021      	movs	r1, r4
     604:	f640 03b1 	movw	r3, #2225	; 0x8b1
     608:	f2c0 0300 	movt	r3, #0
     60c:	4798      	blx	r3
	if (init_status) {
     60e:	b948      	cbnz	r0, 624 <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
     610:	f240 5371 	movw	r3, #1393	; 0x571
     614:	f2c0 0300 	movt	r3, #0
     618:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     61a:	f240 43e7 	movw	r3, #1255	; 0x4e7
     61e:	f2c0 0300 	movt	r3, #0
     622:	602b      	str	r3, [r5, #0]
}
     624:	bd70      	pop	{r4, r5, r6, pc}
     626:	2000      	movs	r0, #0
     628:	e7df      	b.n	5ea <usart_sync_init+0x10>

0000062a <usart_sync_enable>:
{
     62a:	b510      	push	{r4, lr}
     62c:	0004      	movs	r4, r0
	ASSERT(descr);
     62e:	f242 311c 	movw	r1, #8988	; 0x231c
     632:	f2c0 0100 	movt	r1, #0
     636:	1e43      	subs	r3, r0, #1
     638:	4198      	sbcs	r0, r3
     63a:	b2c0      	uxtb	r0, r0
     63c:	2253      	movs	r2, #83	; 0x53
     63e:	f240 635b 	movw	r3, #1627	; 0x65b
     642:	f2c0 0300 	movt	r3, #0
     646:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     648:	0020      	movs	r0, r4
     64a:	3008      	adds	r0, #8
     64c:	f640 03e1 	movw	r3, #2273	; 0x8e1
     650:	f2c0 0300 	movt	r3, #0
     654:	4798      	blx	r3
}
     656:	2000      	movs	r0, #0
     658:	bd10      	pop	{r4, pc}

0000065a <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     65a:	b900      	cbnz	r0, 65e <assert+0x4>
		__asm("BKPT #0");
     65c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     65e:	4770      	bx	lr

00000660 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     660:	0002      	movs	r2, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     662:	f240 0390 	movw	r3, #144	; 0x90
     666:	f2c2 0300 	movt	r3, #8192	; 0x2000
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	b13b      	cbz	r3, 67e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     66e:	f240 0390 	movw	r3, #144	; 0x90
     672:	f2c2 0300 	movt	r3, #8192	; 0x2000
     676:	6818      	ldr	r0, [r3, #0]

	heap += incr;
     678:	1882      	adds	r2, r0, r2
     67a:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
     67c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     67e:	f240 0390 	movw	r3, #144	; 0x90
     682:	f2c2 0300 	movt	r3, #8192	; 0x2000
     686:	f641 3110 	movw	r1, #6928	; 0x1b10
     68a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     68e:	6019      	str	r1, [r3, #0]
     690:	e7ed      	b.n	66e <_sbrk+0xe>

00000692 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     692:	2001      	movs	r0, #1
     694:	4240      	negs	r0, r0
     696:	4770      	bx	lr

00000698 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     698:	f242 0300 	movw	r3, #8192	; 0x2000
     69c:	604b      	str	r3, [r1, #4]

	return 0;
}
     69e:	2000      	movs	r0, #0
     6a0:	4770      	bx	lr

000006a2 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     6a2:	2001      	movs	r0, #1
     6a4:	4770      	bx	lr

000006a6 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     6a6:	2000      	movs	r0, #0
     6a8:	4770      	bx	lr

000006aa <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     6aa:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
     6ac:	f240 1090 	movw	r0, #400	; 0x190
     6b0:	4358      	muls	r0, r3
     6b2:	3002      	adds	r0, #2
     6b4:	2303      	movs	r3, #3
     6b6:	fbb0 f0f3 	udiv	r0, r0, r3
     6ba:	0083      	lsls	r3, r0, #2
     6bc:	1818      	adds	r0, r3, r0
     6be:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     6c0:	4770      	bx	lr

000006c2 <_delay_cycles>:
#if defined(__GNUC__) && (__ARMCOMPILER_VERSION > 6000000) /*  Keil MDK with ARM Compiler 6 */
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     6c2:	3901      	subs	r1, #1
     6c4:	d8fd      	bhi.n	6c2 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     6c6:	4770      	bx	lr

000006c8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     6c8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     6ca:	f245 0300 	movw	r3, #20480	; 0x5000
     6ce:	f2c4 1300 	movt	r3, #16640	; 0x4100
     6d2:	685a      	ldr	r2, [r3, #4]
     6d4:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
     6d6:	2000      	movs	r0, #0
     6d8:	f240 7397 	movw	r3, #1943	; 0x797
     6dc:	f2c0 0300 	movt	r3, #0
     6e0:	4798      	blx	r3

	_osc32kctrl_init_sources();
     6e2:	f240 734f 	movw	r3, #1871	; 0x74f
     6e6:	f2c0 0300 	movt	r3, #0
     6ea:	4798      	blx	r3
	_oscctrl_init_sources();
     6ec:	f240 7367 	movw	r3, #1895	; 0x767
     6f0:	f2c0 0300 	movt	r3, #0
     6f4:	4798      	blx	r3
	_mclk_init();
     6f6:	f240 7341 	movw	r3, #1857	; 0x741
     6fa:	f2c0 0300 	movt	r3, #0
     6fe:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     700:	f240 7395 	movw	r3, #1941	; 0x795
     704:	f2c0 0300 	movt	r3, #0
     708:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     70a:	201f      	movs	r0, #31
     70c:	f240 7319 	movw	r3, #1817	; 0x719
     710:	f2c0 0300 	movt	r3, #0
     714:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     716:	bd10      	pop	{r4, pc}

00000718 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     718:	07c3      	lsls	r3, r0, #31
     71a:	d510      	bpl.n	73e <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     71c:	f641 4300 	movw	r3, #7168	; 0x1c00
     720:	f2c4 0300 	movt	r3, #16384	; 0x4000
     724:	f240 1205 	movw	r2, #261	; 0x105
     728:	f2c0 0201 	movt	r2, #1
     72c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     72e:	f641 4200 	movw	r2, #7168	; 0x1c00
     732:	f2c4 0200 	movt	r2, #16384	; 0x4000
     736:	217d      	movs	r1, #125	; 0x7d
     738:	6853      	ldr	r3, [r2, #4]
     73a:	4219      	tst	r1, r3
     73c:	d1fc      	bne.n	738 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
     73e:	4770      	bx	lr

00000740 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     740:	f640 0300 	movw	r3, #2048	; 0x800
     744:	f2c4 0300 	movt	r3, #16384	; 0x4000
     748:	2201      	movs	r2, #1
     74a:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     74c:	4770      	bx	lr

0000074e <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     74e:	f241 4300 	movw	r3, #5120	; 0x1400
     752:	f2c4 0300 	movt	r3, #16384	; 0x4000
     756:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     758:	f641 7100 	movw	r1, #7936	; 0x1f00
     75c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     75e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     760:	2200      	movs	r2, #0
     762:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     764:	4770      	bx	lr

00000766 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     766:	f241 0300 	movw	r3, #4096	; 0x1000
     76a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     76e:	2202      	movs	r2, #2
     770:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     772:	f241 0200 	movw	r2, #4096	; 0x1000
     776:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     77a:	2110      	movs	r1, #16
     77c:	6913      	ldr	r3, [r2, #16]
     77e:	4219      	tst	r1, r3
     780:	d0fc      	beq.n	77c <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
     782:	f241 0300 	movw	r3, #4096	; 0x1000
     786:	f2c4 0300 	movt	r3, #16384	; 0x4000
     78a:	7e1a      	ldrb	r2, [r3, #24]
     78c:	2180      	movs	r1, #128	; 0x80
     78e:	430a      	orrs	r2, r1
     790:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     792:	4770      	bx	lr

00000794 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     794:	4770      	bx	lr

00000796 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     796:	f240 4300 	movw	r3, #1024	; 0x400
     79a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     79e:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     7a0:	2203      	movs	r2, #3
     7a2:	4013      	ands	r3, r2
     7a4:	4298      	cmp	r0, r3
     7a6:	d012      	beq.n	7ce <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
     7a8:	f240 4200 	movw	r2, #1024	; 0x400
     7ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
     7b0:	23ff      	movs	r3, #255	; 0xff
     7b2:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     7b4:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     7b6:	2103      	movs	r1, #3
     7b8:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     7ba:	4008      	ands	r0, r1
     7bc:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     7be:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     7c0:	f240 4200 	movw	r2, #1024	; 0x400
     7c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
     7c8:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     7ca:	2b00      	cmp	r3, #0
     7cc:	d0fc      	beq.n	7c8 <_set_performance_level+0x32>
			;
	}
}
     7ce:	4770      	bx	lr

000007d0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     7d0:	b530      	push	{r4, r5, lr}
     7d2:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     7d4:	aa01      	add	r2, sp, #4
     7d6:	f242 3338 	movw	r3, #9016	; 0x2338
     7da:	f2c0 0300 	movt	r3, #0
     7de:	cb32      	ldmia	r3!, {r1, r4, r5}
     7e0:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     7e2:	0003      	movs	r3, r0
     7e4:	9a01      	ldr	r2, [sp, #4]
     7e6:	4282      	cmp	r2, r0
     7e8:	d00c      	beq.n	804 <_sercom_get_hardware_index+0x34>
     7ea:	9a02      	ldr	r2, [sp, #8]
     7ec:	4282      	cmp	r2, r0
     7ee:	d007      	beq.n	800 <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
     7f0:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     7f2:	9a03      	ldr	r2, [sp, #12]
     7f4:	429a      	cmp	r2, r3
     7f6:	d001      	beq.n	7fc <_sercom_get_hardware_index+0x2c>
}
     7f8:	b005      	add	sp, #20
     7fa:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7fc:	3002      	adds	r0, #2
     7fe:	e002      	b.n	806 <_sercom_get_hardware_index+0x36>
     800:	2001      	movs	r0, #1
     802:	e000      	b.n	806 <_sercom_get_hardware_index+0x36>
     804:	2000      	movs	r0, #0
			return i;
     806:	b2c0      	uxtb	r0, r0
     808:	e7f6      	b.n	7f8 <_sercom_get_hardware_index+0x28>
	...

0000080c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     80c:	b510      	push	{r4, lr}
     80e:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     810:	f240 73d1 	movw	r3, #2001	; 0x7d1
     814:	f2c0 0300 	movt	r3, #0
     818:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     81a:	b158      	cbz	r0, 834 <_usart_init+0x28>
	ASSERT(false);
     81c:	f242 315c 	movw	r1, #9052	; 0x235c
     820:	f2c0 0100 	movt	r1, #0
     824:	f240 2247 	movw	r2, #583	; 0x247
     828:	2000      	movs	r0, #0
     82a:	f240 635b 	movw	r3, #1627	; 0x65b
     82e:	f2c0 0300 	movt	r3, #0
     832:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     834:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     836:	07db      	lsls	r3, r3, #31
     838:	d418      	bmi.n	86c <_usart_init+0x60>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     83a:	2203      	movs	r2, #3
     83c:	69e3      	ldr	r3, [r4, #28]
     83e:	421a      	tst	r2, r3
     840:	d1fc      	bne.n	83c <_usart_init+0x30>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     842:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     844:	079b      	lsls	r3, r3, #30
     846:	d50b      	bpl.n	860 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     848:	6823      	ldr	r3, [r4, #0]
     84a:	2202      	movs	r2, #2
     84c:	4393      	bics	r3, r2
     84e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     850:	3201      	adds	r2, #1
     852:	69e3      	ldr	r3, [r4, #28]
     854:	421a      	tst	r2, r3
     856:	d1fc      	bne.n	852 <_usart_init+0x46>
     858:	2202      	movs	r2, #2
     85a:	69e3      	ldr	r3, [r4, #28]
     85c:	421a      	tst	r2, r3
     85e:	d1fc      	bne.n	85a <_usart_init+0x4e>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     860:	2305      	movs	r3, #5
     862:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     864:	2203      	movs	r2, #3
     866:	69e3      	ldr	r3, [r4, #28]
     868:	421a      	tst	r2, r3
     86a:	d1fc      	bne.n	866 <_usart_init+0x5a>
     86c:	2201      	movs	r2, #1
     86e:	69e3      	ldr	r3, [r4, #28]
     870:	421a      	tst	r2, r3
     872:	d1fc      	bne.n	86e <_usart_init+0x62>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     874:	2304      	movs	r3, #4
     876:	f2c4 0331 	movt	r3, #16433	; 0x4031
     87a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     87c:	2203      	movs	r2, #3
     87e:	69e3      	ldr	r3, [r4, #28]
     880:	421a      	tst	r2, r3
     882:	d1fc      	bne.n	87e <_usart_init+0x72>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     884:	23c0      	movs	r3, #192	; 0xc0
     886:	029b      	lsls	r3, r3, #10
     888:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     88a:	220f      	movs	r2, #15
     88c:	69e3      	ldr	r3, [r4, #28]
     88e:	421a      	tst	r2, r3
     890:	d1fc      	bne.n	88c <_usart_init+0x80>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     892:	2302      	movs	r3, #2
     894:	f2c0 0370 	movt	r3, #112	; 0x70
     898:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     89a:	4b04      	ldr	r3, [pc, #16]	; (8ac <_usart_init+0xa0>)
     89c:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     89e:	2300      	movs	r3, #0
     8a0:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     8a2:	2230      	movs	r2, #48	; 0x30
     8a4:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     8a6:	2000      	movs	r0, #0
     8a8:	bd10      	pop	{r4, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	ffff8a09 	.word	0xffff8a09

000008b0 <_usart_sync_init>:
{
     8b0:	b570      	push	{r4, r5, r6, lr}
     8b2:	0005      	movs	r5, r0
     8b4:	000c      	movs	r4, r1
	ASSERT(device);
     8b6:	f242 315c 	movw	r1, #9052	; 0x235c
     8ba:	f2c0 0100 	movt	r1, #0
     8be:	1e43      	subs	r3, r0, #1
     8c0:	4198      	sbcs	r0, r3
     8c2:	b2c0      	uxtb	r0, r0
     8c4:	22bb      	movs	r2, #187	; 0xbb
     8c6:	f240 635b 	movw	r3, #1627	; 0x65b
     8ca:	f2c0 0300 	movt	r3, #0
     8ce:	4798      	blx	r3
	device->hw = hw;
     8d0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     8d2:	0020      	movs	r0, r4
     8d4:	f640 030d 	movw	r3, #2061	; 0x80d
     8d8:	f2c0 0300 	movt	r3, #0
     8dc:	4798      	blx	r3
}
     8de:	bd70      	pop	{r4, r5, r6, pc}

000008e0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     8e0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     8e2:	6813      	ldr	r3, [r2, #0]
     8e4:	2102      	movs	r1, #2
     8e6:	430b      	orrs	r3, r1
     8e8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8ea:	3101      	adds	r1, #1
     8ec:	69d3      	ldr	r3, [r2, #28]
     8ee:	4219      	tst	r1, r3
     8f0:	d1fc      	bne.n	8ec <_usart_sync_enable+0xc>
}
     8f2:	4770      	bx	lr

000008f4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     8f4:	6803      	ldr	r3, [r0, #0]
     8f6:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     8f8:	8519      	strh	r1, [r3, #40]	; 0x28
}
     8fa:	4770      	bx	lr

000008fc <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     8fc:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     8fe:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     900:	b2c0      	uxtb	r0, r0
}
     902:	4770      	bx	lr

00000904 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     904:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     906:	7e18      	ldrb	r0, [r3, #24]
     908:	2301      	movs	r3, #1
     90a:	4018      	ands	r0, r3
}
     90c:	4770      	bx	lr

0000090e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     90e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     910:	7e18      	ldrb	r0, [r3, #24]
     912:	0780      	lsls	r0, r0, #30
     914:	0fc0      	lsrs	r0, r0, #31
}
     916:	4770      	bx	lr

00000918 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     918:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     91a:	7e18      	ldrb	r0, [r3, #24]
     91c:	0740      	lsls	r0, r0, #29
     91e:	0fc0      	lsrs	r0, r0, #31
}
     920:	4770      	bx	lr

00000922 <kernel_init>:
#include "inc/manager.h"
#include "inc/results.h"
#include "inc/types.h"
#include "inc/test_module.h"

SOS_Result_t kernel_init(){
     922:	b510      	push	{r4, lr}
	init_stack();
     924:	f640 1345 	movw	r3, #2373	; 0x945
     928:	f2c0 0300 	movt	r3, #0
     92c:	4798      	blx	r3
    init_modules();
     92e:	f640 1347 	movw	r3, #2375	; 0x947
     932:	f2c0 0300 	movt	r3, #0
     936:	4798      	blx	r3
    init_test_module();
     938:	f640 631b 	movw	r3, #3611	; 0xe1b
     93c:	f2c0 0300 	movt	r3, #0
     940:	4798      	blx	r3
    

}
     942:	bd10      	pop	{r4, pc}

00000944 <init_stack>:
StackType_t *module_stack;    
struct CallModuleFrame* cur_call_moudle_frame;          

void init_stack(){
    kernel_stack_pointer=(StackType_t*) kernel_stack;
}
     944:	4770      	bx	lr

00000946 <init_modules>:
    } 
}



SOS_Result_t init_modules(void){
     946:	f241 03cc 	movw	r3, #4300	; 0x10cc
     94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     94e:	0019      	movs	r1, r3
     950:	31c8      	adds	r1, #200	; 0xc8
    int i;
    for (i=0;i<MODULES_MAX;i++){
        modules[i].module_id=0;
     952:	2200      	movs	r2, #0
     954:	601a      	str	r2, [r3, #0]
        modules[i].module_entry=NULL;
     956:	609a      	str	r2, [r3, #8]
     958:	3314      	adds	r3, #20
    for (i=0;i<MODULES_MAX;i++){
     95a:	428b      	cmp	r3, r1
     95c:	d1fa      	bne.n	954 <init_modules+0xe>

    }
}
     95e:	4770      	bx	lr

00000960 <add_module>:

SOS_Result_t add_module(SOS_ModuleEntry_t module_enrty,SOS_ModuleID_t module_id,SOS_Manifest_t manifest){
     960:	b5f0      	push	{r4, r5, r6, r7, lr}
    if((module_id==0)||(module_enrty==NULL)){
     962:	b1c9      	cbz	r1, 998 <add_module+0x38>
     964:	b1d8      	cbz	r0, 99e <add_module+0x3e>
        return -SOS_ERROR_INVAL;
    }
    
    modules[modules_index].module_id=module_id;
     966:	f240 0594 	movw	r5, #148	; 0x94
     96a:	f2c2 0500 	movt	r5, #8192	; 0x2000
     96e:	682c      	ldr	r4, [r5, #0]
     970:	f241 06cc 	movw	r6, #4300	; 0x10cc
     974:	f2c2 0600 	movt	r6, #8192	; 0x2000
     978:	00a3      	lsls	r3, r4, #2
     97a:	191f      	adds	r7, r3, r4
     97c:	00bf      	lsls	r7, r7, #2
     97e:	51b9      	str	r1, [r7, r6]
    modules[modules_index].module_entry=module_enrty;
     980:	003b      	movs	r3, r7
     982:	46b4      	mov	ip, r6
     984:	4463      	add	r3, ip
     986:	6098      	str	r0, [r3, #8]
    modules[modules_index].module_manifest=manifest;
     988:	605a      	str	r2, [r3, #4]

    modules_index++;
     98a:	3401      	adds	r4, #1
     98c:	602c      	str	r4, [r5, #0]
    if(modules_index>=MODULES_MAX){
     98e:	2c09      	cmp	r4, #9
     990:	d904      	bls.n	99c <add_module+0x3c>
        return -SOS_ERROR_NO_FREE_SM;
     992:	2005      	movs	r0, #5
     994:	4240      	negs	r0, r0
     996:	e001      	b.n	99c <add_module+0x3c>
        return -SOS_ERROR_INVAL;
     998:	2002      	movs	r0, #2
     99a:	4240      	negs	r0, r0
    }

    
}
     99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -SOS_ERROR_INVAL;
     99e:	2002      	movs	r0, #2
     9a0:	4240      	negs	r0, r0
     9a2:	e7fb      	b.n	99c <add_module+0x3c>

000009a4 <call_module>:
    SOS_Operation_t *operation,Module_t* module, StackType_t *module_stack){	

		// Store the call_ID on the top of module stack.
		// Note: On exception return, the ARMv8-M architecture only supports doubleword aligned stack pointers.
		module_stack--;
		*module_stack = call_ID-1;
     9a4:	1f1d      	subs	r5, r3, #4
     9a6:	f240 0400 	movw	r4, #0
     9aa:	f2c2 0400 	movt	r4, #8192	; 0x2000
     9ae:	6824      	ldr	r4, [r4, #0]
     9b0:	3c01      	subs	r4, #1
     9b2:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = 0;						// padding
     9b4:	3d04      	subs	r5, #4
     9b6:	2400      	movs	r4, #0
     9b8:	602c      	str	r4, [r5, #0]
		
		// Set up the exception stack frame.
		module_stack--;
		*module_stack = INITIAL_XPSR;			
     9ba:	3d04      	subs	r5, #4
     9bc:	2680      	movs	r6, #128	; 0x80
     9be:	0476      	lsls	r6, r6, #17
     9c0:	602e      	str	r6, [r5, #0]
		module_stack--;
		*module_stack = module->module_entry;
     9c2:	3d04      	subs	r5, #4
     9c4:	6896      	ldr	r6, [r2, #8]
     9c6:	602e      	str	r6, [r5, #0]
		module_stack--;
		*module_stack = MODULE_RETURN_ADDRESS;	// LR
     9c8:	3d04      	subs	r5, #4
     9ca:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = 0;						// r12
     9cc:	3d04      	subs	r5, #4
     9ce:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = 0;						// r3
     9d0:	3d04      	subs	r5, #4
     9d2:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = module->module_entry;	// r2
     9d4:	001c      	movs	r4, r3
     9d6:	3c20      	subs	r4, #32
     9d8:	6892      	ldr	r2, [r2, #8]
     9da:	6022      	str	r2, [r4, #0]
		module_stack--;
		*module_stack = operation;				//r1
     9dc:	001a      	movs	r2, r3
     9de:	3a24      	subs	r2, #36	; 0x24
     9e0:	6011      	str	r1, [r2, #0]
		module_stack--;
		*module_stack = command_id;				//r0
     9e2:	3b28      	subs	r3, #40	; 0x28
     9e4:	6018      	str	r0, [r3, #0]



		__asm volatile(
     9e6:	2203      	movs	r2, #3
     9e8:	4252      	negs	r2, r2
     9ea:	1c1d      	adds	r5, r3, #0
     9ec:	f385 8809 	msr	PSP, r5
     9f0:	1c15      	adds	r5, r2, #0
     9f2:	46ae      	mov	lr, r5
     9f4:	f3ef 8514 	mrs	r5, CONTROL
     9f8:	2403      	movs	r4, #3
     9fa:	4325      	orrs	r5, r4
     9fc:	f385 8814 	msr	CONTROL, r5
     a00:	f3bf 8f4f 	dsb	sy
     a04:	f3bf 8f6f 	isb	sy
     a08:	4770      	bx	lr

00000a0a <call_module_list_add>:
      );
}



int call_module_list_add(struct CallModuleFrame ** item){
     a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a0c:	0004      	movs	r4, r0
	if(!(*item=memory_alloc(sizeof(struct CallModuleFrame)))){
     a0e:	2050      	movs	r0, #80	; 0x50
     a10:	f640 4351 	movw	r3, #3153	; 0xc51
     a14:	f2c0 0300 	movt	r3, #0
     a18:	4798      	blx	r3
     a1a:	6020      	str	r0, [r4, #0]
     a1c:	2800      	cmp	r0, #0
     a1e:	d035      	beq.n	a8c <call_module_list_add+0x82>
		// The item is a NULL pointer
		return SOS_ERROR_INVAL; 
	}
	if(call_moudle_frame_head->next!=NULL){
     a20:	f240 0300 	movw	r3, #0
     a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a28:	685a      	ldr	r2, [r3, #4]
     a2a:	234c      	movs	r3, #76	; 0x4c
     a2c:	5cd3      	ldrb	r3, [r2, r3]
     a2e:	214d      	movs	r1, #77	; 0x4d
     a30:	5c51      	ldrb	r1, [r2, r1]
     a32:	0209      	lsls	r1, r1, #8
     a34:	4319      	orrs	r1, r3
     a36:	234e      	movs	r3, #78	; 0x4e
     a38:	5cd3      	ldrb	r3, [r2, r3]
     a3a:	041b      	lsls	r3, r3, #16
     a3c:	4319      	orrs	r1, r3
     a3e:	234f      	movs	r3, #79	; 0x4f
     a40:	5cd3      	ldrb	r3, [r2, r3]
     a42:	061b      	lsls	r3, r3, #24
     a44:	430b      	orrs	r3, r1
     a46:	b1a3      	cbz	r3, a72 <call_module_list_add+0x68>
               (*item)->next=call_moudle_frame_head->next;
     a48:	274c      	movs	r7, #76	; 0x4c
     a4a:	55c3      	strb	r3, [r0, r7]
     a4c:	0a19      	lsrs	r1, r3, #8
     a4e:	264d      	movs	r6, #77	; 0x4d
     a50:	5581      	strb	r1, [r0, r6]
     a52:	0c19      	lsrs	r1, r3, #16
     a54:	254e      	movs	r5, #78	; 0x4e
     a56:	5541      	strb	r1, [r0, r5]
     a58:	0e1b      	lsrs	r3, r3, #24
     a5a:	214f      	movs	r1, #79	; 0x4f
     a5c:	5443      	strb	r3, [r0, r1]
               call_moudle_frame_head->next=(*item);
     a5e:	6823      	ldr	r3, [r4, #0]
     a60:	55d3      	strb	r3, [r2, r7]
     a62:	0a18      	lsrs	r0, r3, #8
     a64:	5590      	strb	r0, [r2, r6]
     a66:	0c18      	lsrs	r0, r3, #16
     a68:	5550      	strb	r0, [r2, r5]
     a6a:	0e1b      	lsrs	r3, r3, #24
     a6c:	5453      	strb	r3, [r2, r1]
    }else{
               call_moudle_frame_head->next=(*item);
    }	   
	return SOS_SUCCESS;
     a6e:	2000      	movs	r0, #0
	
}
     a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
               call_moudle_frame_head->next=(*item);
     a72:	234c      	movs	r3, #76	; 0x4c
     a74:	54d0      	strb	r0, [r2, r3]
     a76:	0a01      	lsrs	r1, r0, #8
     a78:	3301      	adds	r3, #1
     a7a:	54d1      	strb	r1, [r2, r3]
     a7c:	0c01      	lsrs	r1, r0, #16
     a7e:	3301      	adds	r3, #1
     a80:	54d1      	strb	r1, [r2, r3]
     a82:	0e00      	lsrs	r0, r0, #24
     a84:	3301      	adds	r3, #1
     a86:	54d0      	strb	r0, [r2, r3]
	return SOS_SUCCESS;
     a88:	2000      	movs	r0, #0
     a8a:	e7f1      	b.n	a70 <call_module_list_add+0x66>
		return SOS_ERROR_INVAL; 
     a8c:	2002      	movs	r0, #2
     a8e:	e7ef      	b.n	a70 <call_module_list_add+0x66>

00000a90 <call_module_list_remove>:

int call_module_list_remove(struct CallModuleFrame ** item){
     a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a92:	4684      	mov	ip, r0
	if(*item==NULL){
     a94:	6804      	ldr	r4, [r0, #0]
     a96:	2c00      	cmp	r4, #0
     a98:	d04b      	beq.n	b32 <call_module_list_remove+0xa2>
		// The item is a NULL pointer
		return SOS_ERROR_INVAL; 
	}
	struct CallModuleFrame * index;
	index=call_moudle_frame_head;
     a9a:	f240 0300 	movw	r3, #0
     a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     aa2:	685b      	ldr	r3, [r3, #4]
			   index=index->next;
		   }		     
		   return SOS_ERROR_INVAL;
	}
	else{
		return SOS_ERROR_INVAL;
     aa4:	2002      	movs	r0, #2
	if(index!=NULL){
     aa6:	2b00      	cmp	r3, #0
     aa8:	d042      	beq.n	b30 <call_module_list_remove+0xa0>
			   if((index->next)==(*item)){
     aaa:	224c      	movs	r2, #76	; 0x4c
     aac:	5c9a      	ldrb	r2, [r3, r2]
     aae:	214d      	movs	r1, #77	; 0x4d
     ab0:	5c59      	ldrb	r1, [r3, r1]
     ab2:	0209      	lsls	r1, r1, #8
     ab4:	4311      	orrs	r1, r2
     ab6:	224e      	movs	r2, #78	; 0x4e
     ab8:	5c9a      	ldrb	r2, [r3, r2]
     aba:	0412      	lsls	r2, r2, #16
     abc:	4311      	orrs	r1, r2
     abe:	224f      	movs	r2, #79	; 0x4f
     ac0:	5c9a      	ldrb	r2, [r3, r2]
     ac2:	0612      	lsls	r2, r2, #24
     ac4:	430a      	orrs	r2, r1
     ac6:	4294      	cmp	r4, r2
     ac8:	d014      	beq.n	af4 <call_module_list_remove+0x64>
     aca:	204c      	movs	r0, #76	; 0x4c
     acc:	274d      	movs	r7, #77	; 0x4d
     ace:	264e      	movs	r6, #78	; 0x4e
     ad0:	254f      	movs	r5, #79	; 0x4f
           while(index!=NULL){
     ad2:	b16a      	cbz	r2, af0 <call_module_list_remove+0x60>
			   if((index->next)==(*item)){
     ad4:	5c13      	ldrb	r3, [r2, r0]
     ad6:	5dd1      	ldrb	r1, [r2, r7]
     ad8:	0209      	lsls	r1, r1, #8
     ada:	4319      	orrs	r1, r3
     adc:	5d93      	ldrb	r3, [r2, r6]
     ade:	041b      	lsls	r3, r3, #16
     ae0:	4319      	orrs	r1, r3
     ae2:	5d53      	ldrb	r3, [r2, r5]
     ae4:	061b      	lsls	r3, r3, #24
     ae6:	430b      	orrs	r3, r1
     ae8:	429c      	cmp	r4, r3
     aea:	d004      	beq.n	af6 <call_module_list_remove+0x66>
     aec:	001a      	movs	r2, r3
     aee:	e7f0      	b.n	ad2 <call_module_list_remove+0x42>
		   return SOS_ERROR_INVAL;
     af0:	2002      	movs	r0, #2
     af2:	e01d      	b.n	b30 <call_module_list_remove+0xa0>
			   if((index->next)==(*item)){
     af4:	001a      	movs	r2, r3
				   index->next=(*item)->next;
     af6:	254c      	movs	r5, #76	; 0x4c
     af8:	5d63      	ldrb	r3, [r4, r5]
     afa:	204d      	movs	r0, #77	; 0x4d
     afc:	5c21      	ldrb	r1, [r4, r0]
     afe:	0209      	lsls	r1, r1, #8
     b00:	4319      	orrs	r1, r3
     b02:	264e      	movs	r6, #78	; 0x4e
     b04:	5da3      	ldrb	r3, [r4, r6]
     b06:	041b      	lsls	r3, r3, #16
     b08:	4319      	orrs	r1, r3
     b0a:	274f      	movs	r7, #79	; 0x4f
     b0c:	5de3      	ldrb	r3, [r4, r7]
     b0e:	061b      	lsls	r3, r3, #24
     b10:	430b      	orrs	r3, r1
     b12:	5553      	strb	r3, [r2, r5]
     b14:	0a19      	lsrs	r1, r3, #8
     b16:	5411      	strb	r1, [r2, r0]
     b18:	0c19      	lsrs	r1, r3, #16
     b1a:	5591      	strb	r1, [r2, r6]
     b1c:	0e1b      	lsrs	r3, r3, #24
     b1e:	55d3      	strb	r3, [r2, r7]
				   memory_free(*item);
     b20:	4663      	mov	r3, ip
     b22:	6818      	ldr	r0, [r3, #0]
     b24:	f640 435f 	movw	r3, #3167	; 0xc5f
     b28:	f2c0 0300 	movt	r3, #0
     b2c:	4798      	blx	r3
				    return SOS_SUCCESS;
     b2e:	2000      	movs	r0, #0
	}
}
     b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return SOS_ERROR_INVAL; 
     b32:	2002      	movs	r0, #2
     b34:	e7fc      	b.n	b30 <call_module_list_remove+0xa0>
	...

00000b38 <SOS_invoke_command>:
){
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	b083      	sub	sp, #12
     b3c:	9100      	str	r1, [sp, #0]
     b3e:	9201      	str	r2, [sp, #4]
	for(;i<modules_index;i++){
     b40:	f240 0394 	movw	r3, #148	; 0x94
     b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b48:	6819      	ldr	r1, [r3, #0]
     b4a:	2900      	cmp	r1, #0
     b4c:	d100      	bne.n	b50 <SOS_invoke_command+0x18>
     b4e:	e077      	b.n	c40 <sys_call_return_label+0x12>
    	if(modules[i].module_id==module_id){
     b50:	f241 03cc 	movw	r3, #4300	; 0x10cc
     b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	4298      	cmp	r0, r3
     b5c:	d100      	bne.n	b60 <SOS_invoke_command+0x28>
     b5e:	e071      	b.n	c44 <sys_call_return_label+0x16>
     b60:	4b39      	ldr	r3, [pc, #228]	; (c48 <sys_call_return_label+0x1a>)
     b62:	2400      	movs	r4, #0
	for(;i<modules_index;i++){
     b64:	3401      	adds	r4, #1
     b66:	428c      	cmp	r4, r1
     b68:	d100      	bne.n	b6c <SOS_invoke_command+0x34>
     b6a:	e069      	b.n	c40 <sys_call_return_label+0x12>
     b6c:	3314      	adds	r3, #20
    	if(modules[i].module_id==module_id){
     b6e:	001a      	movs	r2, r3
     b70:	3a14      	subs	r2, #20
     b72:	6812      	ldr	r2, [r2, #0]
     b74:	4282      	cmp	r2, r0
     b76:	d1f5      	bne.n	b64 <SOS_invoke_command+0x2c>
		    call_module_list_add(&cur_call_moudle_frame);
     b78:	f241 15e8 	movw	r5, #4584	; 0x11e8
     b7c:	f2c2 0500 	movt	r5, #8192	; 0x2000
     b80:	0028      	movs	r0, r5
     b82:	f640 230b 	movw	r3, #2571	; 0xa0b
     b86:	f2c0 0300 	movt	r3, #0
     b8a:	4798      	blx	r3
            cur_call_moudle_frame->cur_call_ID=call_ID;
     b8c:	682b      	ldr	r3, [r5, #0]
     b8e:	f240 0700 	movw	r7, #0
     b92:	f2c2 0700 	movt	r7, #8192	; 0x2000
     b96:	683a      	ldr	r2, [r7, #0]
     b98:	2144      	movs	r1, #68	; 0x44
     b9a:	545a      	strb	r2, [r3, r1]
     b9c:	0a10      	lsrs	r0, r2, #8
     b9e:	3101      	adds	r1, #1
     ba0:	5458      	strb	r0, [r3, r1]
     ba2:	0c10      	lsrs	r0, r2, #16
     ba4:	3101      	adds	r1, #1
     ba6:	5458      	strb	r0, [r3, r1]
     ba8:	0e10      	lsrs	r0, r2, #24
     baa:	3101      	adds	r1, #1
     bac:	5458      	strb	r0, [r3, r1]
			call_ID++;
     bae:	3201      	adds	r2, #1
     bb0:	603a      	str	r2, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
     bb2:	f3ef 8209 	mrs	r2, PSP
		    module_stack = ROUNDDOWN(module_stack,DOUBLEWORD);
     bb6:	3908      	subs	r1, #8
     bb8:	438a      	bics	r2, r1
     bba:	f241 11e4 	movw	r1, #4580	; 0x11e4
     bbe:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bc2:	600a      	str	r2, [r1, #0]
		    cur_call_moudle_frame->module_stack=module_stack;
     bc4:	2048      	movs	r0, #72	; 0x48
     bc6:	541a      	strb	r2, [r3, r0]
     bc8:	0a16      	lsrs	r6, r2, #8
     bca:	3001      	adds	r0, #1
     bcc:	541e      	strb	r6, [r3, r0]
     bce:	0c16      	lsrs	r6, r2, #16
     bd0:	3001      	adds	r0, #1
     bd2:	541e      	strb	r6, [r3, r0]
     bd4:	0e12      	lsrs	r2, r2, #24
     bd6:	3001      	adds	r0, #1
     bd8:	541a      	strb	r2, [r3, r0]
			__asm volatile(
     bda:	b43f      	push	{r0, r1, r2, r3, r4, r5}
     bdc:	b430      	push	{r4, r5}
     bde:	1c1c      	adds	r4, r3, #0
     be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     be2:	1c23      	adds	r3, r4, #0
     be4:	bc30      	pop	{r4, r5}
     be6:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
     be8:	4640      	mov	r0, r8
     bea:	4649      	mov	r1, r9
     bec:	4652      	mov	r2, sl
     bee:	465c      	mov	r4, fp
     bf0:	c317      	stmia	r3!, {r0, r1, r2, r4}
     bf2:	f3ef 8008 	mrs	r0, MSP
     bf6:	3018      	adds	r0, #24
     bf8:	f3ef 8114 	mrs	r1, CONTROL
     bfc:	4a13      	ldr	r2, [pc, #76]	; (c4c <sys_call_return_label+0x1e>)
     bfe:	2401      	movs	r4, #1
     c00:	4322      	orrs	r2, r4
     c02:	4674      	mov	r4, lr
     c04:	f3ef 8509 	mrs	r5, PSP
     c08:	c337      	stmia	r3!, {r0, r1, r2, r4, r5}
     c0a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
			call_module( command_id,operation,&modules[i],module_stack);
     c0c:	680b      	ldr	r3, [r1, #0]
     c0e:	00a2      	lsls	r2, r4, #2
     c10:	1912      	adds	r2, r2, r4
     c12:	0092      	lsls	r2, r2, #2
     c14:	f241 01cc 	movw	r1, #4300	; 0x10cc
     c18:	f2c2 0100 	movt	r1, #8192	; 0x2000
     c1c:	468c      	mov	ip, r1
     c1e:	4462      	add	r2, ip
     c20:	9901      	ldr	r1, [sp, #4]
     c22:	9800      	ldr	r0, [sp, #0]
     c24:	f640 14a5 	movw	r4, #2469	; 0x9a5
     c28:	f2c0 0400 	movt	r4, #0
     c2c:	47a0      	blx	r4

00000c2e <sys_call_return_label>:
			__asm volatile
     c2e:	1c03      	adds	r3, r0, #0
     c30:	60bb      	str	r3, [r7, #8]
			call_module_list_remove(&cur_call_moudle_frame);
     c32:	0028      	movs	r0, r5
     c34:	f640 2391 	movw	r3, #2705	; 0xa91
     c38:	f2c0 0300 	movt	r3, #0
     c3c:	4798      	blx	r3
			return res;
     c3e:	68b8      	ldr	r0, [r7, #8]
}
     c40:	b003      	add	sp, #12
     c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int i=0;
     c44:	2400      	movs	r4, #0
     c46:	e797      	b.n	b78 <SOS_invoke_command+0x40>
     c48:	200010e0 	.word	0x200010e0
     c4c:	00000c2e 	.word	0x00000c2e

00000c50 <memory_alloc>:


#include "inc/memory.h"
#include "secure_heap.h"

void* memory_alloc(size_t size){
     c50:	b510      	push	{r4, lr}
	return pvPortMalloc(size);
     c52:	f640 7321 	movw	r3, #3873	; 0xf21
     c56:	f2c0 0300 	movt	r3, #0
     c5a:	4798      	blx	r3
}
     c5c:	bd10      	pop	{r4, pc}

00000c5e <memory_free>:

void memory_free(void *pv){
     c5e:	b510      	push	{r4, lr}
	vPortFree(pv);
     c60:	f241 0367 	movw	r3, #4199	; 0x1067
     c64:	f2c0 0300 	movt	r3, #0
     c68:	4798      	blx	r3
}
     c6a:	bd10      	pop	{r4, pc}

00000c6c <sos_return>:
	}
}


void sos_return(struct CallModuleFrame* index){
	__asm volatile(
     c6c:	1c04      	adds	r4, r0, #0
     c6e:	3430      	adds	r4, #48	; 0x30
     c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     c72:	f380 8808 	msr	MSP, r0
     c76:	f381 8814 	msr	CONTROL, r1
     c7a:	2101      	movs	r1, #1
     c7c:	430b      	orrs	r3, r1
     c7e:	469e      	mov	lr, r3
     c80:	cc08      	ldmia	r4!, {r3}
     c82:	f383 8809 	msr	PSP, r3
     c86:	b404      	push	{r2}
     c88:	3c44      	subs	r4, #68	; 0x44
     c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     c8c:	b401      	push	{r0}
     c8e:	1c20      	adds	r0, r4, #0
     c90:	3010      	adds	r0, #16
     c92:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     c94:	46a0      	mov	r8, r4
     c96:	46a9      	mov	r9, r5
     c98:	46b2      	mov	sl, r6
     c9a:	46bb      	mov	fp, r7
     c9c:	3820      	subs	r0, #32
     c9e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     ca0:	bc01      	pop	{r0}
     ca2:	bd00      	pop	{pc}

00000ca4 <vPortSVCHandler_C>:
{
     ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ca6:	46de      	mov	lr, fp
     ca8:	4657      	mov	r7, sl
     caa:	464e      	mov	r6, r9
     cac:	4645      	mov	r5, r8
     cae:	b5e0      	push	{r5, r6, r7, lr}
	uint32_t a1 = pulCallerStackAddress[8];
     cb0:	6a03      	ldr	r3, [r0, #32]
     cb2:	4699      	mov	r9, r3
	uint32_t a2 = pulCallerStackAddress[9];
     cb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     cb6:	469a      	mov	sl, r3
	uint32_t a3 = pulCallerStackAddress[10];
     cb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
     cba:	469b      	mov	fp, r3
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
     cbc:	6983      	ldr	r3, [r0, #24]
     cbe:	3b02      	subs	r3, #2
	switch( ucSVCNumber )
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	2b04      	cmp	r3, #4
     cc4:	d046      	beq.n	d54 <vPortSVCHandler_C+0xb0>
     cc6:	2b05      	cmp	r3, #5
     cc8:	d14c      	bne.n	d64 <vPortSVCHandler_C+0xc0>
     cca:	f3ef 8309 	mrs	r3, PSP
			call_ID_from_stack=*module_stack;
     cce:	6c5d      	ldr	r5, [r3, #68]	; 0x44
			index=call_moudle_frame_head->next;
     cd0:	f240 0304 	movw	r3, #4
     cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cd8:	681a      	ldr	r2, [r3, #0]
     cda:	234c      	movs	r3, #76	; 0x4c
     cdc:	5cd4      	ldrb	r4, [r2, r3]
     cde:	3301      	adds	r3, #1
     ce0:	5cd3      	ldrb	r3, [r2, r3]
     ce2:	021b      	lsls	r3, r3, #8
     ce4:	4323      	orrs	r3, r4
     ce6:	214e      	movs	r1, #78	; 0x4e
     ce8:	5c54      	ldrb	r4, [r2, r1]
     cea:	0424      	lsls	r4, r4, #16
     cec:	4323      	orrs	r3, r4
     cee:	3101      	adds	r1, #1
     cf0:	5c54      	ldrb	r4, [r2, r1]
     cf2:	0624      	lsls	r4, r4, #24
     cf4:	431c      	orrs	r4, r3
			while(index!=NULL){
     cf6:	b36c      	cbz	r4, d54 <vPortSVCHandler_C+0xb0>
				if(index->cur_call_ID==call_ID_from_stack){
     cf8:	f240 0844 	movw	r8, #68	; 0x44
     cfc:	2745      	movs	r7, #69	; 0x45
     cfe:	2646      	movs	r6, #70	; 0x46
     d00:	e00e      	b.n	d20 <vPortSVCHandler_C+0x7c>
				index=index->next;
     d02:	234c      	movs	r3, #76	; 0x4c
     d04:	5ce2      	ldrb	r2, [r4, r3]
     d06:	3301      	adds	r3, #1
     d08:	5ce3      	ldrb	r3, [r4, r3]
     d0a:	021b      	lsls	r3, r3, #8
     d0c:	431a      	orrs	r2, r3
     d0e:	234e      	movs	r3, #78	; 0x4e
     d10:	5ce3      	ldrb	r3, [r4, r3]
     d12:	041b      	lsls	r3, r3, #16
     d14:	4313      	orrs	r3, r2
     d16:	224f      	movs	r2, #79	; 0x4f
     d18:	5ca4      	ldrb	r4, [r4, r2]
     d1a:	0624      	lsls	r4, r4, #24
     d1c:	431c      	orrs	r4, r3
			while(index!=NULL){
     d1e:	b1cc      	cbz	r4, d54 <vPortSVCHandler_C+0xb0>
				if(index->cur_call_ID==call_ID_from_stack){
     d20:	4643      	mov	r3, r8
     d22:	5ce3      	ldrb	r3, [r4, r3]
     d24:	5de2      	ldrb	r2, [r4, r7]
     d26:	0212      	lsls	r2, r2, #8
     d28:	431a      	orrs	r2, r3
     d2a:	5da3      	ldrb	r3, [r4, r6]
     d2c:	041b      	lsls	r3, r3, #16
     d2e:	431a      	orrs	r2, r3
     d30:	2347      	movs	r3, #71	; 0x47
     d32:	5ce3      	ldrb	r3, [r4, r3]
     d34:	061b      	lsls	r3, r3, #24
     d36:	4313      	orrs	r3, r2
     d38:	429d      	cmp	r5, r3
     d3a:	d1e2      	bne.n	d02 <vPortSVCHandler_C+0x5e>
					cur_call_moudle_frame=index;
     d3c:	f241 13e8 	movw	r3, #4584	; 0x11e8
     d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d44:	601c      	str	r4, [r3, #0]
					sos_return( index);
     d46:	0020      	movs	r0, r4
     d48:	f640 436d 	movw	r3, #3181	; 0xc6d
     d4c:	f2c0 0300 	movt	r3, #0
     d50:	4798      	blx	r3
     d52:	e7d6      	b.n	d02 <vPortSVCHandler_C+0x5e>
			return SOS_invoke_command((SOS_ModuleID_t)a1, (uint32_t)a2, (SOS_Operation_t *) a3);
     d54:	465a      	mov	r2, fp
     d56:	4651      	mov	r1, sl
     d58:	4648      	mov	r0, r9
     d5a:	f640 3339 	movw	r3, #2873	; 0xb39
     d5e:	f2c0 0300 	movt	r3, #0
     d62:	4798      	blx	r3
}
     d64:	bc3c      	pop	{r2, r3, r4, r5}
     d66:	4690      	mov	r8, r2
     d68:	4699      	mov	r9, r3
     d6a:	46a2      	mov	sl, r4
     d6c:	46ab      	mov	fp, r5
     d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000d70 <SVCall_Handler>:
	);
}

void SVCall_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
     d70:	2004      	movs	r0, #4
     d72:	4671      	mov	r1, lr
     d74:	4208      	tst	r0, r1
     d76:	d003      	beq.n	d80 <stacking_used_msp>
     d78:	f3ef 8009 	mrs	r0, PSP
     d7c:	4a04      	ldr	r2, [pc, #16]	; (d90 <svchandler_address_const>)
     d7e:	4710      	bx	r2

00000d80 <stacking_used_msp>:
     d80:	f3ef 8008 	mrs	r0, MSP
     d84:	4a02      	ldr	r2, [pc, #8]	; (d90 <svchandler_address_const>)
     d86:	4710      	bx	r2
     d88:	46c0      	nop			; (mov r8, r8)
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	46c0      	nop			; (mov r8, r8)
     d8e:	46c0      	nop			; (mov r8, r8)

00000d90 <svchandler_address_const>:
     d90:	00000ca5 	.word	0x00000ca5

00000d94 <syscall_return>:


static inline int32_t
syscall(uint8_t num,uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4){
	int32_t ret;
	__asm volatile
     d94:	2109      	movs	r1, #9
     d96:	2204      	movs	r2, #4
     d98:	2303      	movs	r3, #3
     d9a:	b4f0      	push	{r4, r5, r6, r7}
     d9c:	1c04      	adds	r4, r0, #0
     d9e:	1c1d      	adds	r5, r3, #0
     da0:	1c16      	adds	r6, r2, #0
     da2:	1c0f      	adds	r7, r1, #0
     da4:	b480      	push	{r7}
     da6:	b440      	push	{r6}
     da8:	b420      	push	{r5}
     daa:	b410      	push	{r4}
     dac:	df05      	svc	5
     dae:	b004      	add	sp, #16
     db0:	bcf0      	pop	{r4, r5, r6, r7}
}

void syscall_return(int ret){

	syscall(SYS_module_return,ret,3,4,9);
}
     db2:	4770      	bx	lr

00000db4 <syscall_nsc_call_module>:
	__asm volatile
     db4:	2300      	movs	r3, #0
     db6:	b4f0      	push	{r4, r5, r6, r7}
     db8:	1c04      	adds	r4, r0, #0
     dba:	1c0d      	adds	r5, r1, #0
     dbc:	1c16      	adds	r6, r2, #0
     dbe:	1c1f      	adds	r7, r3, #0
     dc0:	b480      	push	{r7}
     dc2:	b440      	push	{r6}
     dc4:	b420      	push	{r5}
     dc6:	b410      	push	{r4}
     dc8:	df04      	svc	4
     dca:	b004      	add	sp, #16
     dcc:	bcf0      	pop	{r4, r5, r6, r7}

void syscall_nsc_call_module(uint32_t module_id,uint32_t command_id,uint32_t *operation){
	syscall(SYS_nsc_call_module, module_id, command_id, operation, 0);
     dce:	4770      	bx	lr

00000dd0 <invoke_entry>:

SOS_Result_t invoke_entry(
    uint32_t command_id,
    SOS_Operation_t  *operation
){
    switch (command_id)
     dd0:	2801      	cmp	r0, #1
     dd2:	d007      	beq.n	de4 <invoke_entry+0x14>
     dd4:	2802      	cmp	r0, #2
     dd6:	d016      	beq.n	e06 <invoke_entry+0x36>
            break;
        }
            
    }

     syscall_return(SYS_module_return);
     dd8:	2005      	movs	r0, #5
     dda:	f640 5395 	movw	r3, #3477	; 0xd95
     dde:	f2c0 0300 	movt	r3, #0
     de2:	4798      	blx	r3
            printf("l m test module of ping\r\n");
     de4:	f242 3078 	movw	r0, #9080	; 0x2378
     de8:	f2c0 0000 	movt	r0, #0
     dec:	f241 33b1 	movw	r3, #5041	; 0x13b1
     df0:	f2c0 0300 	movt	r3, #0
     df4:	4798      	blx	r3
			delay_ms(5000);
     df6:	f241 3088 	movw	r0, #5000	; 0x1388
     dfa:	f240 4355 	movw	r3, #1109	; 0x455
     dfe:	f2c0 0300 	movt	r3, #0
     e02:	4798      	blx	r3
            break;
     e04:	e7e8      	b.n	dd8 <invoke_entry+0x8>
			 printf("l m test module of pong\r\n");
     e06:	f242 3094 	movw	r0, #9108	; 0x2394
     e0a:	f2c0 0000 	movt	r0, #0
     e0e:	f241 33b1 	movw	r3, #5041	; 0x13b1
     e12:	f2c0 0300 	movt	r3, #0
     e16:	4798      	blx	r3
			 break;
     e18:	e7de      	b.n	dd8 <invoke_entry+0x8>

00000e1a <init_test_module>:
}

SOS_Result_t init_test_module(){
     e1a:	b510      	push	{r4, lr}
    return add_module(invoke_entry,SOS_TEST_MOUDLE_ID,maniifest);
     e1c:	f240 0398 	movw	r3, #152	; 0x98
     e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e24:	681a      	ldr	r2, [r3, #0]
     e26:	f640 50d1 	movw	r0, #3537	; 0xdd1
     e2a:	f2c0 0000 	movt	r0, #0
     e2e:	f241 2134 	movw	r1, #4660	; 0x1234
     e32:	f640 1361 	movw	r3, #2401	; 0x961
     e36:	f2c0 0300 	movt	r3, #0
     e3a:	4798      	blx	r3
    
}
     e3c:	bd10      	pop	{r4, pc}

00000e3e <func_plus3>:
/**
 * \brief This function will return a value of input parameter plus three.
 */
int func_plus3(int x)
{
	return x + 3;
     e3e:	3003      	adds	r0, #3
}
     e40:	4770      	bx	lr

00000e42 <func_minus2>:
/**
 * \brief This function will return a value of input parameter minus two.
 */
int func_minus2(int x)
{
	return x - 2;
     e42:	3802      	subs	r0, #2
}
     e44:	4770      	bx	lr

00000e46 <main>:
 * - Sets the non-secure main stack (MSP_NS)
 * - Gets the non-secure reset handler
 * - Jumps to the non-secure software application
 */
int main(void)
{
     e46:	b510      	push	{r4, lr}
	funcptr_void NonSecure_ResetHandler;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     e48:	f240 23a5 	movw	r3, #677	; 0x2a5
     e4c:	f2c0 0300 	movt	r3, #0
     e50:	4798      	blx	r3
	
	/* Init the SOS kernel */
	kernel_init();
     e52:	f640 1323 	movw	r3, #2339	; 0x923
     e56:	f2c0 0300 	movt	r3, #0
     e5a:	4798      	blx	r3
	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(CONF_TZ_START_NS)));
     e5c:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	f383 8888 	msr	MSP_NS, r3

	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((CONF_TZ_START_NS) + 4U)));
     e66:	f248 0304 	movw	r3, #32772	; 0x8004

	/* Start non-secure state software application */
	NonSecure_ResetHandler();
     e6a:	681c      	ldr	r4, [r3, #0]
     e6c:	0864      	lsrs	r4, r4, #1
     e6e:	0064      	lsls	r4, r4, #1
     e70:	0020      	movs	r0, r4
     e72:	0021      	movs	r1, r4
     e74:	0022      	movs	r2, r4
     e76:	0023      	movs	r3, r4
     e78:	f000 f9dc 	bl	1234 <__gnu_cmse_nonsecure_call>

	/* Replace with your application code */
	while (1) {
		__NOP();
     e7c:	46c0      	nop			; (mov r8, r8)
     e7e:	e7fd      	b.n	e7c <main+0x36>

00000e80 <__acle_se_SecureContext_LoadContext>:
     e80:	f3ef 8105 	mrs	r1, IPSR
     e84:	b121      	cbz	r1, e90 <load_ctx_therad_mode>
     e86:	c806      	ldmia	r0!, {r1, r2}
     e88:	f382 880b 	msr	PSPLIM, r2
     e8c:	f381 8809 	msr	PSP, r1

00000e90 <load_ctx_therad_mode>:
     e90:	46c0      	nop			; (mov r8, r8)
     e92:	2000      	movs	r0, #0
     e94:	0001      	movs	r1, r0
     e96:	0002      	movs	r2, r0
     e98:	0003      	movs	r3, r0
     e9a:	4684      	mov	ip, r0
     e9c:	f38e 8800 	msr	CPSR_f, lr
     ea0:	4774      	bxns	lr

00000ea2 <__acle_se_SecureContext_SaveContext>:
     ea2:	f3ef 8105 	mrs	r1, IPSR
     ea6:	b139      	cbz	r1, eb8 <save_ctx_therad_mode>
     ea8:	f3ef 8109 	mrs	r1, PSP
     eac:	6001      	str	r1, [r0, #0]
     eae:	2100      	movs	r1, #0
     eb0:	f381 880b 	msr	PSPLIM, r1
     eb4:	f381 8809 	msr	PSP, r1

00000eb8 <save_ctx_therad_mode>:
     eb8:	46c0      	nop			; (mov r8, r8)
     eba:	2000      	movs	r0, #0
     ebc:	0001      	movs	r1, r0
     ebe:	0002      	movs	r2, r0
     ec0:	0003      	movs	r3, r0
     ec2:	4684      	mov	ip, r0
     ec4:	f38e 8800 	msr	CPSR_f, lr
     ec8:	4774      	bxns	lr

00000eca <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * secureheapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     eca:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 * than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     ecc:	f240 039c 	movw	r3, #156	; 0x9c
     ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ed4:	681a      	ldr	r2, [r3, #0]
     ed6:	4282      	cmp	r2, r0
     ed8:	d31c      	bcc.n	f14 <prvInsertBlockIntoFreeList+0x4a>
	}

	/* Do the block being inserted, and the block it is being inserted after
	 * make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     eda:	685c      	ldr	r4, [r3, #4]
     edc:	1919      	adds	r1, r3, r4
     ede:	4288      	cmp	r0, r1
     ee0:	d103      	bne.n	eea <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     ee2:	6841      	ldr	r1, [r0, #4]
     ee4:	1909      	adds	r1, r1, r4
     ee6:	6059      	str	r1, [r3, #4]
     ee8:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	 * make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     eea:	6844      	ldr	r4, [r0, #4]
     eec:	1901      	adds	r1, r0, r4
     eee:	428a      	cmp	r2, r1
     ef0:	d114      	bne.n	f1c <prvInsertBlockIntoFreeList+0x52>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     ef2:	f240 019c 	movw	r1, #156	; 0x9c
     ef6:	f2c2 0100 	movt	r1, #8192	; 0x2000
     efa:	6889      	ldr	r1, [r1, #8]
     efc:	428a      	cmp	r2, r1
     efe:	d00b      	beq.n	f18 <prvInsertBlockIntoFreeList+0x4e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     f00:	6852      	ldr	r2, [r2, #4]
     f02:	1912      	adds	r2, r2, r4
     f04:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     f06:	681a      	ldr	r2, [r3, #0]
     f08:	6812      	ldr	r2, [r2, #0]
     f0a:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	 * before and the block after, then it's pxNextFreeBlock pointer will have
	 * already been set, and should not be set here as that would make it point
	 * to itself. */
	if( pxIterator != pxBlockToInsert )
     f0c:	4298      	cmp	r0, r3
     f0e:	d000      	beq.n	f12 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     f10:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     f12:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     f14:	0013      	movs	r3, r2
     f16:	e7dd      	b.n	ed4 <prvInsertBlockIntoFreeList+0xa>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     f18:	6002      	str	r2, [r0, #0]
     f1a:	e7f7      	b.n	f0c <prvInsertBlockIntoFreeList+0x42>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     f1c:	6002      	str	r2, [r0, #0]
     f1e:	e7f5      	b.n	f0c <prvInsertBlockIntoFreeList+0x42>

00000f20 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	/* If this is the first call to malloc then the heap will require
	 * initialisation to setup the list of free blocks. */
	if( pxEnd == NULL )
     f22:	f240 039c 	movw	r3, #156	; 0x9c
     f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f2a:	689b      	ldr	r3, [r3, #8]
     f2c:	b313      	cbz	r3, f74 <pvPortMalloc+0x54>

	/* Check the requested block size is not so large that the top bit is set.
	 * The top bit of the block size member of the BlockLink_t structure is used
	 * to determine who owns the block - the application or the kernel, so it
	 * must be free. */
	if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     f2e:	f241 039c 	movw	r3, #4252	; 0x109c
     f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f36:	695e      	ldr	r6, [r3, #20]
     f38:	4230      	tst	r0, r6
     f3a:	d000      	beq.n	f3e <pvPortMalloc+0x1e>
     f3c:	e089      	b.n	1052 <pvPortMalloc+0x132>
	{
		/* The wanted size is increased so it can contain a BlockLink_t
		 * structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     f3e:	2800      	cmp	r0, #0
     f40:	d100      	bne.n	f44 <pvPortMalloc+0x24>
     f42:	e088      	b.n	1056 <pvPortMalloc+0x136>
		{
			xWantedSize += xHeapStructSize;
     f44:	0003      	movs	r3, r0
     f46:	3308      	adds	r3, #8

			/* Ensure that blocks are always aligned to the required number of
			 * bytes. */
			if( ( xWantedSize & secureportBYTE_ALIGNMENT_MASK ) != 0x00 )
     f48:	075a      	lsls	r2, r3, #29
     f4a:	d002      	beq.n	f52 <pvPortMalloc+0x32>
			{
				/* Byte alignment required. */
				xWantedSize += ( secureportBYTE_ALIGNMENT - ( xWantedSize & secureportBYTE_ALIGNMENT_MASK ) );
     f4c:	2207      	movs	r2, #7
     f4e:	4393      	bics	r3, r2
     f50:	3308      	adds	r3, #8
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     f52:	2b00      	cmp	r3, #0
     f54:	d100      	bne.n	f58 <pvPortMalloc+0x38>
     f56:	e080      	b.n	105a <pvPortMalloc+0x13a>
     f58:	f241 029c 	movw	r2, #4252	; 0x109c
     f5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f60:	6917      	ldr	r7, [r2, #16]
     f62:	42bb      	cmp	r3, r7
     f64:	d900      	bls.n	f68 <pvPortMalloc+0x48>
     f66:	e07a      	b.n	105e <pvPortMalloc+0x13e>
		{
			/* Traverse the list from the start (lowest address) block until
			 * one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     f68:	f240 029c 	movw	r2, #156	; 0x9c
     f6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f70:	6814      	ldr	r4, [r2, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f72:	e02d      	b.n	fd0 <pvPortMalloc+0xb0>
	uxAddress = ( size_t ) ucHeap;
     f74:	f240 039c 	movw	r3, #156	; 0x9c
     f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f7c:	330c      	adds	r3, #12
size_t xTotalHeapSize = secureconfigTOTAL_HEAP_SIZE;
     f7e:	f241 0200 	movw	r2, #4096	; 0x1000
	if( ( uxAddress & secureportBYTE_ALIGNMENT_MASK ) != 0 )
     f82:	0759      	lsls	r1, r3, #29
     f84:	d007      	beq.n	f96 <pvPortMalloc+0x76>
		uxAddress += ( secureportBYTE_ALIGNMENT - 1 );
     f86:	1dd9      	adds	r1, r3, #7
		uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     f88:	2207      	movs	r2, #7
     f8a:	4391      	bics	r1, r2
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
     f8c:	f241 0c00 	movw	ip, #4096	; 0x1000
     f90:	4463      	add	r3, ip
     f92:	1a5a      	subs	r2, r3, r1
		uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     f94:	000b      	movs	r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     f96:	f240 019c 	movw	r1, #156	; 0x9c
     f9a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f9e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
     fa0:	2400      	movs	r4, #0
     fa2:	604c      	str	r4, [r1, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     fa4:	189a      	adds	r2, r3, r2
	uxAddress -= xHeapStructSize;
     fa6:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     fa8:	2507      	movs	r5, #7
     faa:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
     fac:	608a      	str	r2, [r1, #8]
	pxEnd->xBlockSize = 0;
     fae:	6054      	str	r4, [r2, #4]
	pxEnd->pxNextFreeBlock = NULL;
     fb0:	6014      	str	r4, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     fb2:	1ad1      	subs	r1, r2, r3
     fb4:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     fb6:	601a      	str	r2, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     fb8:	f241 039c 	movw	r3, #4252	; 0x109c
     fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     fc0:	60d9      	str	r1, [r3, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     fc2:	6119      	str	r1, [r3, #16]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * secureheapBITS_PER_BYTE ) - 1 );
     fc4:	2280      	movs	r2, #128	; 0x80
     fc6:	0612      	lsls	r2, r2, #24
     fc8:	615a      	str	r2, [r3, #20]
     fca:	e7b0      	b.n	f2e <pvPortMalloc+0xe>
     fcc:	0022      	movs	r2, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     fce:	000c      	movs	r4, r1
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     fd0:	6861      	ldr	r1, [r4, #4]
     fd2:	428b      	cmp	r3, r1
     fd4:	d902      	bls.n	fdc <pvPortMalloc+0xbc>
     fd6:	6821      	ldr	r1, [r4, #0]
     fd8:	2900      	cmp	r1, #0
     fda:	d1f7      	bne.n	fcc <pvPortMalloc+0xac>
			}

			/* If the end marker was reached then a block of adequate size was
			 * not found. */
			if( pxBlock != pxEnd )
     fdc:	f240 019c 	movw	r1, #156	; 0x9c
     fe0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     fe4:	6889      	ldr	r1, [r1, #8]
     fe6:	428c      	cmp	r4, r1
     fe8:	d03b      	beq.n	1062 <pvPortMalloc+0x142>
			{
				/* Return the memory space pointed to - jumping over the
				 * BlockLink_t structure at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     fea:	6815      	ldr	r5, [r2, #0]

				/* This block is being returned for use so must be taken out
				 * of the list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     fec:	6821      	ldr	r1, [r4, #0]
     fee:	6011      	str	r1, [r2, #0]

				/* If the block is larger than required it can be split into
				 * two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > secureheapMINIMUM_BLOCK_SIZE )
     ff0:	6862      	ldr	r2, [r4, #4]
     ff2:	1ad2      	subs	r2, r2, r3
     ff4:	2a10      	cmp	r2, #16
     ff6:	d90f      	bls.n	1018 <pvPortMalloc+0xf8>
				{
					/* This block is to be split into two.  Create a new
					 * block following the number of bytes requested. The void
					 * cast is used to prevent byte alignment warnings from the
					 * compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     ff8:	18e0      	adds	r0, r4, r3
					secureportASSERT( ( ( ( size_t ) pxNewBlockLink ) & secureportBYTE_ALIGNMENT_MASK ) == 0 );
     ffa:	0741      	lsls	r1, r0, #29
     ffc:	d005      	beq.n	100a <pvPortMalloc+0xea>
     ffe:	2301      	movs	r3, #1
    1000:	f383 8810 	msr	PRIMASK, r3
    1004:	f383 8890 	msr	PRIMASK_NS, r3
    1008:	e7fe      	b.n	1008 <pvPortMalloc+0xe8>

					/* Calculate the sizes of two blocks split from the single
					 * block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    100a:	6042      	str	r2, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
    100c:	6063      	str	r3, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( pxNewBlockLink );
    100e:	f640 63cb 	movw	r3, #3787	; 0xecb
    1012:	f2c0 0300 	movt	r3, #0
    1016:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1018:	6861      	ldr	r1, [r4, #4]
    101a:	1a7f      	subs	r7, r7, r1
    101c:	f241 029c 	movw	r2, #4252	; 0x109c
    1020:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1024:	6117      	str	r7, [r2, #16]

				if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1026:	68d2      	ldr	r2, [r2, #12]
    1028:	4297      	cmp	r7, r2
    102a:	d204      	bcs.n	1036 <pvPortMalloc+0x116>
				{
					xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    102c:	f241 029c 	movw	r2, #4252	; 0x109c
    1030:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1034:	60d7      	str	r7, [r2, #12]
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1036:	0028      	movs	r0, r5
    1038:	3008      	adds	r0, #8
					mtCOVERAGE_TEST_MARKER();
				}

				/* The block is being returned - it is allocated and owned by
				 * the application and has no "next" block. */
				pxBlock->xBlockSize |= xBlockAllocatedBit;
    103a:	430e      	orrs	r6, r1
    103c:	6066      	str	r6, [r4, #4]
				pxBlock->pxNextFreeBlock = NULL;
    103e:	2300      	movs	r3, #0
    1040:	6023      	str	r3, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	secureportASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) secureportBYTE_ALIGNMENT_MASK ) == 0 );
    1042:	0743      	lsls	r3, r0, #29
    1044:	d008      	beq.n	1058 <pvPortMalloc+0x138>
    1046:	2301      	movs	r3, #1
    1048:	f383 8810 	msr	PRIMASK, r3
    104c:	f383 8890 	msr	PRIMASK_NS, r3
    1050:	e7fe      	b.n	1050 <pvPortMalloc+0x130>
    1052:	2000      	movs	r0, #0
    1054:	e000      	b.n	1058 <pvPortMalloc+0x138>
void *pvReturn = NULL;
    1056:	2000      	movs	r0, #0
	return pvReturn;
}
    1058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    105a:	2000      	movs	r0, #0
    105c:	e7fc      	b.n	1058 <pvPortMalloc+0x138>
    105e:	2000      	movs	r0, #0
    1060:	e7fa      	b.n	1058 <pvPortMalloc+0x138>
    1062:	2000      	movs	r0, #0
	return pvReturn;
    1064:	e7f8      	b.n	1058 <pvPortMalloc+0x138>

00001066 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1066:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1068:	b380      	cbz	r0, 10cc <vPortFree+0x66>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		secureportASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    106a:	0003      	movs	r3, r0
    106c:	3b08      	subs	r3, #8
    106e:	685b      	ldr	r3, [r3, #4]
    1070:	f241 029c 	movw	r2, #4252	; 0x109c
    1074:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1078:	6952      	ldr	r2, [r2, #20]
    107a:	421a      	tst	r2, r3
    107c:	d105      	bne.n	108a <vPortFree+0x24>
    107e:	2301      	movs	r3, #1
    1080:	f383 8810 	msr	PRIMASK, r3
    1084:	f383 8890 	msr	PRIMASK_NS, r3
    1088:	e7fe      	b.n	1088 <vPortFree+0x22>
		secureportASSERT( pxLink->pxNextFreeBlock == NULL );
    108a:	0001      	movs	r1, r0
    108c:	3908      	subs	r1, #8
    108e:	6809      	ldr	r1, [r1, #0]
    1090:	b129      	cbz	r1, 109e <vPortFree+0x38>
    1092:	2301      	movs	r3, #1
    1094:	f383 8810 	msr	PRIMASK, r3
    1098:	f383 8890 	msr	PRIMASK_NS, r3
    109c:	e7fe      	b.n	109c <vPortFree+0x36>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				 * allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    109e:	3808      	subs	r0, #8
    10a0:	4393      	bics	r3, r2
    10a2:	6043      	str	r3, [r0, #4]

				secureportDISABLE_NON_SECURE_INTERRUPTS();
    10a4:	2301      	movs	r3, #1
    10a6:	f383 8890 	msr	PRIMASK_NS, r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    10aa:	f241 039c 	movw	r3, #4252	; 0x109c
    10ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10b2:	6842      	ldr	r2, [r0, #4]
    10b4:	6919      	ldr	r1, [r3, #16]
    10b6:	468c      	mov	ip, r1
    10b8:	4462      	add	r2, ip
    10ba:	611a      	str	r2, [r3, #16]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    10bc:	f640 63cb 	movw	r3, #3787	; 0xecb
    10c0:	f2c0 0300 	movt	r3, #0
    10c4:	4798      	blx	r3
				}
				secureportENABLE_NON_SECURE_INTERRUPTS();
    10c6:	2300      	movs	r3, #0
    10c8:	f383 8890 	msr	PRIMASK_NS, r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    10cc:	bd10      	pop	{r4, pc}

000010ce <__acle_se_SecureInit_DePrioritizeNSExceptions>:
    10ce:	f3ef 8305 	mrs	r3, IPSR
    10d2:	b16b      	cbz	r3, 10f0 <__acle_se_SecureInit_DePrioritizeNSExceptions+0x22>
    10d4:	f64e 520c 	movw	r2, #60684	; 0xed0c
    10d8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    10dc:	6811      	ldr	r1, [r2, #0]
    10de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    10e2:	4019      	ands	r1, r3
    10e4:	f244 0300 	movw	r3, #16384	; 0x4000
    10e8:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
    10ec:	430b      	orrs	r3, r1
    10ee:	6013      	str	r3, [r2, #0]
    10f0:	2000      	movs	r0, #0
    10f2:	0001      	movs	r1, r0
    10f4:	0002      	movs	r2, r0
    10f6:	0003      	movs	r3, r0
    10f8:	4684      	mov	ip, r0
    10fa:	f38e 8800 	msr	CPSR_f, lr
    10fe:	4774      	bxns	lr

00001100 <__acle_se_SecureInit_EnableNSFPUAccess>:
    1100:	f3ef 8305 	mrs	r3, IPSR
    1104:	b1ab      	cbz	r3, 1132 <__acle_se_SecureInit_EnableNSFPUAccess+0x32>
    1106:	f64e 538c 	movw	r3, #60812	; 0xed8c
    110a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    110e:	681a      	ldr	r2, [r3, #0]
    1110:	f640 4100 	movw	r1, #3072	; 0xc00
    1114:	430a      	orrs	r2, r1
    1116:	601a      	str	r2, [r3, #0]
    1118:	f64e 7334 	movw	r3, #61236	; 0xef34
    111c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1120:	681a      	ldr	r2, [r3, #0]
    1122:	4908      	ldr	r1, [pc, #32]	; (1144 <__acle_se_SecureInit_EnableNSFPUAccess+0x44>)
    1124:	400a      	ands	r2, r1
    1126:	601a      	str	r2, [r3, #0]
    1128:	6819      	ldr	r1, [r3, #0]
    112a:	2280      	movs	r2, #128	; 0x80
    112c:	04d2      	lsls	r2, r2, #19
    112e:	430a      	orrs	r2, r1
    1130:	601a      	str	r2, [r3, #0]
    1132:	2000      	movs	r0, #0
    1134:	0001      	movs	r1, r0
    1136:	0002      	movs	r2, r0
    1138:	0003      	movs	r3, r0
    113a:	4684      	mov	ip, r0
    113c:	f38e 8800 	msr	CPSR_f, lr
    1140:	4774      	bxns	lr
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	dfffffff 	.word	0xdfffffff

00001148 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1148:	b510      	push	{r4, lr}
    114a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    114c:	b960      	cbnz	r0, 1168 <_read+0x20>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    114e:	0011      	movs	r1, r2
    1150:	0018      	movs	r0, r3
    1152:	f241 13c9 	movw	r3, #4553	; 0x11c9
    1156:	f2c0 0300 	movt	r3, #0
    115a:	4798      	blx	r3
    115c:	2800      	cmp	r0, #0
    115e:	db00      	blt.n	1162 <_read+0x1a>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1160:	bd10      	pop	{r4, pc}
    1162:	2001      	movs	r0, #1
    1164:	4240      	negs	r0, r0
    1166:	e7fb      	b.n	1160 <_read+0x18>
		return -1;
    1168:	2001      	movs	r0, #1
    116a:	4240      	negs	r0, r0
    116c:	e7f8      	b.n	1160 <_read+0x18>

0000116e <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    116e:	b510      	push	{r4, lr}
    1170:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1172:	3801      	subs	r0, #1
    1174:	2802      	cmp	r0, #2
    1176:	d80c      	bhi.n	1192 <_write+0x24>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1178:	0011      	movs	r1, r2
    117a:	0018      	movs	r0, r3
    117c:	f241 13ed 	movw	r3, #4589	; 0x11ed
    1180:	f2c0 0300 	movt	r3, #0
    1184:	4798      	blx	r3
    1186:	2800      	cmp	r0, #0
    1188:	db00      	blt.n	118c <_write+0x1e>
	if (n < 0) {
		return -1;
	}

	return n;
}
    118a:	bd10      	pop	{r4, pc}
    118c:	2001      	movs	r0, #1
    118e:	4240      	negs	r0, r0
    1190:	e7fb      	b.n	118a <_write+0x1c>
		return -1;
    1192:	2001      	movs	r0, #1
    1194:	4240      	negs	r0, r0
    1196:	e7f8      	b.n	118a <_write+0x1c>

00001198 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    119c:	f240 050c 	movw	r5, #12
    11a0:	f2c2 0500 	movt	r5, #8192	; 0x2000
    11a4:	682b      	ldr	r3, [r5, #0]
    11a6:	6898      	ldr	r0, [r3, #8]
    11a8:	2100      	movs	r1, #0
    11aa:	f241 34c5 	movw	r4, #5061	; 0x13c5
    11ae:	f2c0 0400 	movt	r4, #0
    11b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    11b4:	682b      	ldr	r3, [r5, #0]
    11b6:	6858      	ldr	r0, [r3, #4]
    11b8:	2100      	movs	r1, #0
    11ba:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    11bc:	f241 03b4 	movw	r3, #4276	; 0x10b4
    11c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11c4:	601e      	str	r6, [r3, #0]
}
    11c6:	bd70      	pop	{r4, r5, r6, pc}

000011c8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    11c8:	b510      	push	{r4, lr}
    11ca:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    11cc:	f241 03b4 	movw	r3, #4276	; 0x10b4
    11d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11d4:	6818      	ldr	r0, [r3, #0]
    11d6:	b138      	cbz	r0, 11e8 <stdio_io_read+0x20>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    11d8:	b28a      	uxth	r2, r1
    11da:	0021      	movs	r1, r4
    11dc:	f240 43b1 	movw	r3, #1201	; 0x4b1
    11e0:	f2c0 0300 	movt	r3, #0
    11e4:	4798      	blx	r3
}
    11e6:	bd10      	pop	{r4, pc}
		return 0;
    11e8:	2000      	movs	r0, #0
    11ea:	e7fc      	b.n	11e6 <stdio_io_read+0x1e>

000011ec <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    11ec:	b510      	push	{r4, lr}
    11ee:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    11f0:	f241 03b4 	movw	r3, #4276	; 0x10b4
    11f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11f8:	6818      	ldr	r0, [r3, #0]
    11fa:	b138      	cbz	r0, 120c <stdio_io_write+0x20>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    11fc:	b28a      	uxth	r2, r1
    11fe:	0021      	movs	r1, r4
    1200:	f240 437b 	movw	r3, #1147	; 0x47b
    1204:	f2c0 0300 	movt	r3, #0
    1208:	4798      	blx	r3
}
    120a:	bd10      	pop	{r4, pc}
		return 0;
    120c:	2000      	movs	r0, #0
    120e:	e7fc      	b.n	120a <stdio_io_write+0x1e>

00001210 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1210:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1212:	f241 04c0 	movw	r4, #4288	; 0x10c0
    1216:	f2c2 0400 	movt	r4, #8192	; 0x2000
    121a:	0020      	movs	r0, r4
    121c:	f240 632b 	movw	r3, #1579	; 0x62b
    1220:	f2c0 0300 	movt	r3, #0
    1224:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1226:	0020      	movs	r0, r4
    1228:	f241 1399 	movw	r3, #4505	; 0x1199
    122c:	f2c0 0300 	movt	r3, #0
    1230:	4798      	blx	r3
}
    1232:	bd10      	pop	{r4, pc}

00001234 <__gnu_cmse_nonsecure_call>:
    1234:	b5e0      	push	{r5, r6, r7, lr}
    1236:	4645      	mov	r5, r8
    1238:	464e      	mov	r6, r9
    123a:	4657      	mov	r7, sl
    123c:	b4e0      	push	{r5, r6, r7}
    123e:	465d      	mov	r5, fp
    1240:	b420      	push	{r5}
    1242:	4625      	mov	r5, r4
    1244:	4626      	mov	r6, r4
    1246:	4627      	mov	r7, r4
    1248:	46a0      	mov	r8, r4
    124a:	46a1      	mov	r9, r4
    124c:	46a2      	mov	sl, r4
    124e:	46a3      	mov	fp, r4
    1250:	46a4      	mov	ip, r4
    1252:	f384 8800 	msr	CPSR_f, r4
    1256:	47a4      	blxns	r4
    1258:	bc20      	pop	{r5}
    125a:	46ab      	mov	fp, r5
    125c:	bce0      	pop	{r5, r6, r7}
    125e:	46ba      	mov	sl, r7
    1260:	46b1      	mov	r9, r6
    1262:	46a8      	mov	r8, r5
    1264:	bde0      	pop	{r5, r6, r7, pc}
	...

00001268 <__libc_init_array>:
    1268:	b570      	push	{r4, r5, r6, lr}
    126a:	2500      	movs	r5, #0
    126c:	4b0e      	ldr	r3, [pc, #56]	; (12a8 <__libc_init_array+0x40>)
    126e:	4c0f      	ldr	r4, [pc, #60]	; (12ac <__libc_init_array+0x44>)
    1270:	1ae4      	subs	r4, r4, r3
    1272:	10a4      	asrs	r4, r4, #2
    1274:	42a5      	cmp	r5, r4
    1276:	d109      	bne.n	128c <__libc_init_array+0x24>
    1278:	2500      	movs	r5, #0
    127a:	f001 f8e5 	bl	2448 <_init>
    127e:	4c0c      	ldr	r4, [pc, #48]	; (12b0 <__libc_init_array+0x48>)
    1280:	4b0c      	ldr	r3, [pc, #48]	; (12b4 <__libc_init_array+0x4c>)
    1282:	1ae4      	subs	r4, r4, r3
    1284:	10a4      	asrs	r4, r4, #2
    1286:	42a5      	cmp	r5, r4
    1288:	d107      	bne.n	129a <__libc_init_array+0x32>
    128a:	bd70      	pop	{r4, r5, r6, pc}
    128c:	4a06      	ldr	r2, [pc, #24]	; (12a8 <__libc_init_array+0x40>)
    128e:	00ab      	lsls	r3, r5, #2
    1290:	189b      	adds	r3, r3, r2
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	4798      	blx	r3
    1296:	3501      	adds	r5, #1
    1298:	e7ec      	b.n	1274 <__libc_init_array+0xc>
    129a:	4a06      	ldr	r2, [pc, #24]	; (12b4 <__libc_init_array+0x4c>)
    129c:	00ab      	lsls	r3, r5, #2
    129e:	189b      	adds	r3, r3, r2
    12a0:	681b      	ldr	r3, [r3, #0]
    12a2:	4798      	blx	r3
    12a4:	3501      	adds	r5, #1
    12a6:	e7ee      	b.n	1286 <__libc_init_array+0x1e>
    12a8:	00002454 	.word	0x00002454
    12ac:	00002454 	.word	0x00002454
    12b0:	00002458 	.word	0x00002458
    12b4:	00002454 	.word	0x00002454

000012b8 <memset>:
    12b8:	0003      	movs	r3, r0
    12ba:	1882      	adds	r2, r0, r2
    12bc:	4293      	cmp	r3, r2
    12be:	d100      	bne.n	12c2 <memset+0xa>
    12c0:	4770      	bx	lr
    12c2:	7019      	strb	r1, [r3, #0]
    12c4:	3301      	adds	r3, #1
    12c6:	e7f9      	b.n	12bc <memset+0x4>

000012c8 <iprintf>:
    12c8:	b40f      	push	{r0, r1, r2, r3}
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <iprintf+0x2c>)
    12cc:	b513      	push	{r0, r1, r4, lr}
    12ce:	681c      	ldr	r4, [r3, #0]
    12d0:	b124      	cbz	r4, 12dc <iprintf+0x14>
    12d2:	69a3      	ldr	r3, [r4, #24]
    12d4:	b913      	cbnz	r3, 12dc <iprintf+0x14>
    12d6:	0020      	movs	r0, r4
    12d8:	f000 fade 	bl	1898 <__sinit>
    12dc:	ab05      	add	r3, sp, #20
    12de:	9a04      	ldr	r2, [sp, #16]
    12e0:	68a1      	ldr	r1, [r4, #8]
    12e2:	0020      	movs	r0, r4
    12e4:	9301      	str	r3, [sp, #4]
    12e6:	f000 fca7 	bl	1c38 <_vfiprintf_r>
    12ea:	bc16      	pop	{r1, r2, r4}
    12ec:	bc08      	pop	{r3}
    12ee:	b004      	add	sp, #16
    12f0:	4718      	bx	r3
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	2000000c 	.word	0x2000000c

000012f8 <_puts_r>:
    12f8:	b570      	push	{r4, r5, r6, lr}
    12fa:	0005      	movs	r5, r0
    12fc:	000e      	movs	r6, r1
    12fe:	b118      	cbz	r0, 1308 <_puts_r+0x10>
    1300:	6983      	ldr	r3, [r0, #24]
    1302:	b90b      	cbnz	r3, 1308 <_puts_r+0x10>
    1304:	f000 fac8 	bl	1898 <__sinit>
    1308:	69ab      	ldr	r3, [r5, #24]
    130a:	68ac      	ldr	r4, [r5, #8]
    130c:	b913      	cbnz	r3, 1314 <_puts_r+0x1c>
    130e:	0028      	movs	r0, r5
    1310:	f000 fac2 	bl	1898 <__sinit>
    1314:	4b23      	ldr	r3, [pc, #140]	; (13a4 <_puts_r+0xac>)
    1316:	429c      	cmp	r4, r3
    1318:	d10d      	bne.n	1336 <_puts_r+0x3e>
    131a:	686c      	ldr	r4, [r5, #4]
    131c:	89a3      	ldrh	r3, [r4, #12]
    131e:	071b      	lsls	r3, r3, #28
    1320:	d501      	bpl.n	1326 <_puts_r+0x2e>
    1322:	6923      	ldr	r3, [r4, #16]
    1324:	b9fb      	cbnz	r3, 1366 <_puts_r+0x6e>
    1326:	0021      	movs	r1, r4
    1328:	0028      	movs	r0, r5
    132a:	f000 f94f 	bl	15cc <__swsetup_r>
    132e:	b1d0      	cbz	r0, 1366 <_puts_r+0x6e>
    1330:	2001      	movs	r0, #1
    1332:	4240      	negs	r0, r0
    1334:	bd70      	pop	{r4, r5, r6, pc}
    1336:	4b1c      	ldr	r3, [pc, #112]	; (13a8 <_puts_r+0xb0>)
    1338:	429c      	cmp	r4, r3
    133a:	d101      	bne.n	1340 <_puts_r+0x48>
    133c:	68ac      	ldr	r4, [r5, #8]
    133e:	e7ed      	b.n	131c <_puts_r+0x24>
    1340:	4b1a      	ldr	r3, [pc, #104]	; (13ac <_puts_r+0xb4>)
    1342:	429c      	cmp	r4, r3
    1344:	d1ea      	bne.n	131c <_puts_r+0x24>
    1346:	68ec      	ldr	r4, [r5, #12]
    1348:	e7e8      	b.n	131c <_puts_r+0x24>
    134a:	3b01      	subs	r3, #1
    134c:	3601      	adds	r6, #1
    134e:	60a3      	str	r3, [r4, #8]
    1350:	2b00      	cmp	r3, #0
    1352:	da04      	bge.n	135e <_puts_r+0x66>
    1354:	69a2      	ldr	r2, [r4, #24]
    1356:	4293      	cmp	r3, r2
    1358:	db16      	blt.n	1388 <_puts_r+0x90>
    135a:	290a      	cmp	r1, #10
    135c:	d014      	beq.n	1388 <_puts_r+0x90>
    135e:	6823      	ldr	r3, [r4, #0]
    1360:	1c5a      	adds	r2, r3, #1
    1362:	6022      	str	r2, [r4, #0]
    1364:	7019      	strb	r1, [r3, #0]
    1366:	7831      	ldrb	r1, [r6, #0]
    1368:	68a3      	ldr	r3, [r4, #8]
    136a:	2900      	cmp	r1, #0
    136c:	d1ed      	bne.n	134a <_puts_r+0x52>
    136e:	3b01      	subs	r3, #1
    1370:	60a3      	str	r3, [r4, #8]
    1372:	2b00      	cmp	r3, #0
    1374:	da0f      	bge.n	1396 <_puts_r+0x9e>
    1376:	0022      	movs	r2, r4
    1378:	310a      	adds	r1, #10
    137a:	0028      	movs	r0, r5
    137c:	f000 f8d4 	bl	1528 <__swbuf_r>
    1380:	1c43      	adds	r3, r0, #1
    1382:	d0d5      	beq.n	1330 <_puts_r+0x38>
    1384:	200a      	movs	r0, #10
    1386:	e7d5      	b.n	1334 <_puts_r+0x3c>
    1388:	0022      	movs	r2, r4
    138a:	0028      	movs	r0, r5
    138c:	f000 f8cc 	bl	1528 <__swbuf_r>
    1390:	1c43      	adds	r3, r0, #1
    1392:	d1e8      	bne.n	1366 <_puts_r+0x6e>
    1394:	e7cc      	b.n	1330 <_puts_r+0x38>
    1396:	200a      	movs	r0, #10
    1398:	6823      	ldr	r3, [r4, #0]
    139a:	1c5a      	adds	r2, r3, #1
    139c:	6022      	str	r2, [r4, #0]
    139e:	7018      	strb	r0, [r3, #0]
    13a0:	e7c8      	b.n	1334 <_puts_r+0x3c>
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	000023d4 	.word	0x000023d4
    13a8:	000023f4 	.word	0x000023f4
    13ac:	000023b4 	.word	0x000023b4

000013b0 <puts>:
    13b0:	b510      	push	{r4, lr}
    13b2:	4b03      	ldr	r3, [pc, #12]	; (13c0 <puts+0x10>)
    13b4:	0001      	movs	r1, r0
    13b6:	6818      	ldr	r0, [r3, #0]
    13b8:	f7ff ff9e 	bl	12f8 <_puts_r>
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	2000000c 	.word	0x2000000c

000013c4 <setbuf>:
    13c4:	424a      	negs	r2, r1
    13c6:	414a      	adcs	r2, r1
    13c8:	b510      	push	{r4, lr}
    13ca:	0052      	lsls	r2, r2, #1
    13cc:	f240 4300 	movw	r3, #1024	; 0x400
    13d0:	f000 f802 	bl	13d8 <setvbuf>
    13d4:	bd10      	pop	{r4, pc}
	...

000013d8 <setvbuf>:
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	001d      	movs	r5, r3
    13dc:	4b4d      	ldr	r3, [pc, #308]	; (1514 <setvbuf+0x13c>)
    13de:	b085      	sub	sp, #20
    13e0:	681e      	ldr	r6, [r3, #0]
    13e2:	0004      	movs	r4, r0
    13e4:	000f      	movs	r7, r1
    13e6:	9200      	str	r2, [sp, #0]
    13e8:	b126      	cbz	r6, 13f4 <setvbuf+0x1c>
    13ea:	69b3      	ldr	r3, [r6, #24]
    13ec:	b913      	cbnz	r3, 13f4 <setvbuf+0x1c>
    13ee:	0030      	movs	r0, r6
    13f0:	f000 fa52 	bl	1898 <__sinit>
    13f4:	4b48      	ldr	r3, [pc, #288]	; (1518 <setvbuf+0x140>)
    13f6:	429c      	cmp	r4, r3
    13f8:	d14f      	bne.n	149a <setvbuf+0xc2>
    13fa:	6874      	ldr	r4, [r6, #4]
    13fc:	9b00      	ldr	r3, [sp, #0]
    13fe:	2b02      	cmp	r3, #2
    1400:	d005      	beq.n	140e <setvbuf+0x36>
    1402:	2b01      	cmp	r3, #1
    1404:	d900      	bls.n	1408 <setvbuf+0x30>
    1406:	e082      	b.n	150e <setvbuf+0x136>
    1408:	2d00      	cmp	r5, #0
    140a:	da00      	bge.n	140e <setvbuf+0x36>
    140c:	e07f      	b.n	150e <setvbuf+0x136>
    140e:	0021      	movs	r1, r4
    1410:	0030      	movs	r0, r6
    1412:	f000 f9d5 	bl	17c0 <_fflush_r>
    1416:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1418:	b141      	cbz	r1, 142c <setvbuf+0x54>
    141a:	0023      	movs	r3, r4
    141c:	3344      	adds	r3, #68	; 0x44
    141e:	4299      	cmp	r1, r3
    1420:	d002      	beq.n	1428 <setvbuf+0x50>
    1422:	0030      	movs	r0, r6
    1424:	f000 fb38 	bl	1a98 <_free_r>
    1428:	2300      	movs	r3, #0
    142a:	6363      	str	r3, [r4, #52]	; 0x34
    142c:	2300      	movs	r3, #0
    142e:	61a3      	str	r3, [r4, #24]
    1430:	6063      	str	r3, [r4, #4]
    1432:	89a3      	ldrh	r3, [r4, #12]
    1434:	061b      	lsls	r3, r3, #24
    1436:	d503      	bpl.n	1440 <setvbuf+0x68>
    1438:	6921      	ldr	r1, [r4, #16]
    143a:	0030      	movs	r0, r6
    143c:	f000 fb2c 	bl	1a98 <_free_r>
    1440:	89a3      	ldrh	r3, [r4, #12]
    1442:	4a36      	ldr	r2, [pc, #216]	; (151c <setvbuf+0x144>)
    1444:	4013      	ands	r3, r2
    1446:	81a3      	strh	r3, [r4, #12]
    1448:	9b00      	ldr	r3, [sp, #0]
    144a:	2b02      	cmp	r3, #2
    144c:	d059      	beq.n	1502 <setvbuf+0x12a>
    144e:	ab03      	add	r3, sp, #12
    1450:	aa02      	add	r2, sp, #8
    1452:	0021      	movs	r1, r4
    1454:	0030      	movs	r0, r6
    1456:	f000 faad 	bl	19b4 <__swhatbuf_r>
    145a:	89a3      	ldrh	r3, [r4, #12]
    145c:	4318      	orrs	r0, r3
    145e:	81a0      	strh	r0, [r4, #12]
    1460:	bb2d      	cbnz	r5, 14ae <setvbuf+0xd6>
    1462:	9d02      	ldr	r5, [sp, #8]
    1464:	0028      	movs	r0, r5
    1466:	f000 fb0d 	bl	1a84 <malloc>
    146a:	9501      	str	r5, [sp, #4]
    146c:	0007      	movs	r7, r0
    146e:	2800      	cmp	r0, #0
    1470:	d141      	bne.n	14f6 <setvbuf+0x11e>
    1472:	9b02      	ldr	r3, [sp, #8]
    1474:	9301      	str	r3, [sp, #4]
    1476:	42ab      	cmp	r3, r5
    1478:	d137      	bne.n	14ea <setvbuf+0x112>
    147a:	2001      	movs	r0, #1
    147c:	4240      	negs	r0, r0
    147e:	2302      	movs	r3, #2
    1480:	89a2      	ldrh	r2, [r4, #12]
    1482:	4313      	orrs	r3, r2
    1484:	81a3      	strh	r3, [r4, #12]
    1486:	2300      	movs	r3, #0
    1488:	60a3      	str	r3, [r4, #8]
    148a:	0023      	movs	r3, r4
    148c:	3347      	adds	r3, #71	; 0x47
    148e:	6023      	str	r3, [r4, #0]
    1490:	6123      	str	r3, [r4, #16]
    1492:	2301      	movs	r3, #1
    1494:	6163      	str	r3, [r4, #20]
    1496:	b005      	add	sp, #20
    1498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    149a:	4b21      	ldr	r3, [pc, #132]	; (1520 <setvbuf+0x148>)
    149c:	429c      	cmp	r4, r3
    149e:	d101      	bne.n	14a4 <setvbuf+0xcc>
    14a0:	68b4      	ldr	r4, [r6, #8]
    14a2:	e7ab      	b.n	13fc <setvbuf+0x24>
    14a4:	4b1f      	ldr	r3, [pc, #124]	; (1524 <setvbuf+0x14c>)
    14a6:	429c      	cmp	r4, r3
    14a8:	d1a8      	bne.n	13fc <setvbuf+0x24>
    14aa:	68f4      	ldr	r4, [r6, #12]
    14ac:	e7a6      	b.n	13fc <setvbuf+0x24>
    14ae:	2f00      	cmp	r7, #0
    14b0:	d0d8      	beq.n	1464 <setvbuf+0x8c>
    14b2:	69b3      	ldr	r3, [r6, #24]
    14b4:	b913      	cbnz	r3, 14bc <setvbuf+0xe4>
    14b6:	0030      	movs	r0, r6
    14b8:	f000 f9ee 	bl	1898 <__sinit>
    14bc:	9b00      	ldr	r3, [sp, #0]
    14be:	2b01      	cmp	r3, #1
    14c0:	d103      	bne.n	14ca <setvbuf+0xf2>
    14c2:	89a3      	ldrh	r3, [r4, #12]
    14c4:	9a00      	ldr	r2, [sp, #0]
    14c6:	431a      	orrs	r2, r3
    14c8:	81a2      	strh	r2, [r4, #12]
    14ca:	2008      	movs	r0, #8
    14cc:	89a3      	ldrh	r3, [r4, #12]
    14ce:	6027      	str	r7, [r4, #0]
    14d0:	4018      	ands	r0, r3
    14d2:	6127      	str	r7, [r4, #16]
    14d4:	6165      	str	r5, [r4, #20]
    14d6:	b1c0      	cbz	r0, 150a <setvbuf+0x132>
    14d8:	2001      	movs	r0, #1
    14da:	4018      	ands	r0, r3
    14dc:	2300      	movs	r3, #0
    14de:	b190      	cbz	r0, 1506 <setvbuf+0x12e>
    14e0:	426d      	negs	r5, r5
    14e2:	60a3      	str	r3, [r4, #8]
    14e4:	61a5      	str	r5, [r4, #24]
    14e6:	0018      	movs	r0, r3
    14e8:	e7d5      	b.n	1496 <setvbuf+0xbe>
    14ea:	9801      	ldr	r0, [sp, #4]
    14ec:	f000 faca 	bl	1a84 <malloc>
    14f0:	0007      	movs	r7, r0
    14f2:	2800      	cmp	r0, #0
    14f4:	d0c1      	beq.n	147a <setvbuf+0xa2>
    14f6:	2380      	movs	r3, #128	; 0x80
    14f8:	89a2      	ldrh	r2, [r4, #12]
    14fa:	9d01      	ldr	r5, [sp, #4]
    14fc:	4313      	orrs	r3, r2
    14fe:	81a3      	strh	r3, [r4, #12]
    1500:	e7d7      	b.n	14b2 <setvbuf+0xda>
    1502:	2000      	movs	r0, #0
    1504:	e7bb      	b.n	147e <setvbuf+0xa6>
    1506:	60a5      	str	r5, [r4, #8]
    1508:	e7c5      	b.n	1496 <setvbuf+0xbe>
    150a:	60a0      	str	r0, [r4, #8]
    150c:	e7c3      	b.n	1496 <setvbuf+0xbe>
    150e:	2001      	movs	r0, #1
    1510:	4240      	negs	r0, r0
    1512:	e7c0      	b.n	1496 <setvbuf+0xbe>
    1514:	2000000c 	.word	0x2000000c
    1518:	000023d4 	.word	0x000023d4
    151c:	fffff35c 	.word	0xfffff35c
    1520:	000023f4 	.word	0x000023f4
    1524:	000023b4 	.word	0x000023b4

00001528 <__swbuf_r>:
    1528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    152a:	0005      	movs	r5, r0
    152c:	000e      	movs	r6, r1
    152e:	0014      	movs	r4, r2
    1530:	b118      	cbz	r0, 153a <__swbuf_r+0x12>
    1532:	6983      	ldr	r3, [r0, #24]
    1534:	b90b      	cbnz	r3, 153a <__swbuf_r+0x12>
    1536:	f000 f9af 	bl	1898 <__sinit>
    153a:	4b21      	ldr	r3, [pc, #132]	; (15c0 <__swbuf_r+0x98>)
    153c:	429c      	cmp	r4, r3
    153e:	d12a      	bne.n	1596 <__swbuf_r+0x6e>
    1540:	686c      	ldr	r4, [r5, #4]
    1542:	69a3      	ldr	r3, [r4, #24]
    1544:	60a3      	str	r3, [r4, #8]
    1546:	89a3      	ldrh	r3, [r4, #12]
    1548:	071b      	lsls	r3, r3, #28
    154a:	d52e      	bpl.n	15aa <__swbuf_r+0x82>
    154c:	6923      	ldr	r3, [r4, #16]
    154e:	b363      	cbz	r3, 15aa <__swbuf_r+0x82>
    1550:	6823      	ldr	r3, [r4, #0]
    1552:	6922      	ldr	r2, [r4, #16]
    1554:	b2f7      	uxtb	r7, r6
    1556:	1a98      	subs	r0, r3, r2
    1558:	6963      	ldr	r3, [r4, #20]
    155a:	b2f6      	uxtb	r6, r6
    155c:	4298      	cmp	r0, r3
    155e:	db04      	blt.n	156a <__swbuf_r+0x42>
    1560:	0021      	movs	r1, r4
    1562:	0028      	movs	r0, r5
    1564:	f000 f92c 	bl	17c0 <_fflush_r>
    1568:	bb28      	cbnz	r0, 15b6 <__swbuf_r+0x8e>
    156a:	68a3      	ldr	r3, [r4, #8]
    156c:	3001      	adds	r0, #1
    156e:	3b01      	subs	r3, #1
    1570:	60a3      	str	r3, [r4, #8]
    1572:	6823      	ldr	r3, [r4, #0]
    1574:	1c5a      	adds	r2, r3, #1
    1576:	6022      	str	r2, [r4, #0]
    1578:	701f      	strb	r7, [r3, #0]
    157a:	6963      	ldr	r3, [r4, #20]
    157c:	4298      	cmp	r0, r3
    157e:	d004      	beq.n	158a <__swbuf_r+0x62>
    1580:	89a3      	ldrh	r3, [r4, #12]
    1582:	07db      	lsls	r3, r3, #31
    1584:	d519      	bpl.n	15ba <__swbuf_r+0x92>
    1586:	2e0a      	cmp	r6, #10
    1588:	d117      	bne.n	15ba <__swbuf_r+0x92>
    158a:	0021      	movs	r1, r4
    158c:	0028      	movs	r0, r5
    158e:	f000 f917 	bl	17c0 <_fflush_r>
    1592:	b190      	cbz	r0, 15ba <__swbuf_r+0x92>
    1594:	e00f      	b.n	15b6 <__swbuf_r+0x8e>
    1596:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <__swbuf_r+0x9c>)
    1598:	429c      	cmp	r4, r3
    159a:	d101      	bne.n	15a0 <__swbuf_r+0x78>
    159c:	68ac      	ldr	r4, [r5, #8]
    159e:	e7d0      	b.n	1542 <__swbuf_r+0x1a>
    15a0:	4b09      	ldr	r3, [pc, #36]	; (15c8 <__swbuf_r+0xa0>)
    15a2:	429c      	cmp	r4, r3
    15a4:	d1cd      	bne.n	1542 <__swbuf_r+0x1a>
    15a6:	68ec      	ldr	r4, [r5, #12]
    15a8:	e7cb      	b.n	1542 <__swbuf_r+0x1a>
    15aa:	0021      	movs	r1, r4
    15ac:	0028      	movs	r0, r5
    15ae:	f000 f80d 	bl	15cc <__swsetup_r>
    15b2:	2800      	cmp	r0, #0
    15b4:	d0cc      	beq.n	1550 <__swbuf_r+0x28>
    15b6:	2601      	movs	r6, #1
    15b8:	4276      	negs	r6, r6
    15ba:	0030      	movs	r0, r6
    15bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	000023d4 	.word	0x000023d4
    15c4:	000023f4 	.word	0x000023f4
    15c8:	000023b4 	.word	0x000023b4

000015cc <__swsetup_r>:
    15cc:	4b34      	ldr	r3, [pc, #208]	; (16a0 <__swsetup_r+0xd4>)
    15ce:	b570      	push	{r4, r5, r6, lr}
    15d0:	681d      	ldr	r5, [r3, #0]
    15d2:	0006      	movs	r6, r0
    15d4:	000c      	movs	r4, r1
    15d6:	b125      	cbz	r5, 15e2 <__swsetup_r+0x16>
    15d8:	69ab      	ldr	r3, [r5, #24]
    15da:	b913      	cbnz	r3, 15e2 <__swsetup_r+0x16>
    15dc:	0028      	movs	r0, r5
    15de:	f000 f95b 	bl	1898 <__sinit>
    15e2:	4b30      	ldr	r3, [pc, #192]	; (16a4 <__swsetup_r+0xd8>)
    15e4:	429c      	cmp	r4, r3
    15e6:	d10f      	bne.n	1608 <__swsetup_r+0x3c>
    15e8:	686c      	ldr	r4, [r5, #4]
    15ea:	230c      	movs	r3, #12
    15ec:	5ee2      	ldrsh	r2, [r4, r3]
    15ee:	b293      	uxth	r3, r2
    15f0:	0719      	lsls	r1, r3, #28
    15f2:	d42c      	bmi.n	164e <__swsetup_r+0x82>
    15f4:	06d9      	lsls	r1, r3, #27
    15f6:	d411      	bmi.n	161c <__swsetup_r+0x50>
    15f8:	2309      	movs	r3, #9
    15fa:	2001      	movs	r0, #1
    15fc:	6033      	str	r3, [r6, #0]
    15fe:	3337      	adds	r3, #55	; 0x37
    1600:	4313      	orrs	r3, r2
    1602:	81a3      	strh	r3, [r4, #12]
    1604:	4240      	negs	r0, r0
    1606:	bd70      	pop	{r4, r5, r6, pc}
    1608:	4b27      	ldr	r3, [pc, #156]	; (16a8 <__swsetup_r+0xdc>)
    160a:	429c      	cmp	r4, r3
    160c:	d101      	bne.n	1612 <__swsetup_r+0x46>
    160e:	68ac      	ldr	r4, [r5, #8]
    1610:	e7eb      	b.n	15ea <__swsetup_r+0x1e>
    1612:	4b26      	ldr	r3, [pc, #152]	; (16ac <__swsetup_r+0xe0>)
    1614:	429c      	cmp	r4, r3
    1616:	d1e8      	bne.n	15ea <__swsetup_r+0x1e>
    1618:	68ec      	ldr	r4, [r5, #12]
    161a:	e7e6      	b.n	15ea <__swsetup_r+0x1e>
    161c:	075b      	lsls	r3, r3, #29
    161e:	d512      	bpl.n	1646 <__swsetup_r+0x7a>
    1620:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1622:	b141      	cbz	r1, 1636 <__swsetup_r+0x6a>
    1624:	0023      	movs	r3, r4
    1626:	3344      	adds	r3, #68	; 0x44
    1628:	4299      	cmp	r1, r3
    162a:	d002      	beq.n	1632 <__swsetup_r+0x66>
    162c:	0030      	movs	r0, r6
    162e:	f000 fa33 	bl	1a98 <_free_r>
    1632:	2300      	movs	r3, #0
    1634:	6363      	str	r3, [r4, #52]	; 0x34
    1636:	2224      	movs	r2, #36	; 0x24
    1638:	89a3      	ldrh	r3, [r4, #12]
    163a:	4393      	bics	r3, r2
    163c:	81a3      	strh	r3, [r4, #12]
    163e:	2300      	movs	r3, #0
    1640:	6063      	str	r3, [r4, #4]
    1642:	6923      	ldr	r3, [r4, #16]
    1644:	6023      	str	r3, [r4, #0]
    1646:	2308      	movs	r3, #8
    1648:	89a2      	ldrh	r2, [r4, #12]
    164a:	4313      	orrs	r3, r2
    164c:	81a3      	strh	r3, [r4, #12]
    164e:	6923      	ldr	r3, [r4, #16]
    1650:	b95b      	cbnz	r3, 166a <__swsetup_r+0x9e>
    1652:	f240 2180 	movw	r1, #640	; 0x280
    1656:	f240 2200 	movw	r2, #512	; 0x200
    165a:	89a3      	ldrh	r3, [r4, #12]
    165c:	400b      	ands	r3, r1
    165e:	4293      	cmp	r3, r2
    1660:	d003      	beq.n	166a <__swsetup_r+0x9e>
    1662:	0021      	movs	r1, r4
    1664:	0030      	movs	r0, r6
    1666:	f000 f9cd 	bl	1a04 <__smakebuf_r>
    166a:	2301      	movs	r3, #1
    166c:	89a2      	ldrh	r2, [r4, #12]
    166e:	4013      	ands	r3, r2
    1670:	b18b      	cbz	r3, 1696 <__swsetup_r+0xca>
    1672:	2300      	movs	r3, #0
    1674:	60a3      	str	r3, [r4, #8]
    1676:	6963      	ldr	r3, [r4, #20]
    1678:	425b      	negs	r3, r3
    167a:	61a3      	str	r3, [r4, #24]
    167c:	6923      	ldr	r3, [r4, #16]
    167e:	2000      	movs	r0, #0
    1680:	2b00      	cmp	r3, #0
    1682:	d1c0      	bne.n	1606 <__swsetup_r+0x3a>
    1684:	230c      	movs	r3, #12
    1686:	5ee2      	ldrsh	r2, [r4, r3]
    1688:	0613      	lsls	r3, r2, #24
    168a:	d5bc      	bpl.n	1606 <__swsetup_r+0x3a>
    168c:	2340      	movs	r3, #64	; 0x40
    168e:	4313      	orrs	r3, r2
    1690:	81a3      	strh	r3, [r4, #12]
    1692:	3801      	subs	r0, #1
    1694:	e7b7      	b.n	1606 <__swsetup_r+0x3a>
    1696:	0792      	lsls	r2, r2, #30
    1698:	d400      	bmi.n	169c <__swsetup_r+0xd0>
    169a:	6963      	ldr	r3, [r4, #20]
    169c:	60a3      	str	r3, [r4, #8]
    169e:	e7ed      	b.n	167c <__swsetup_r+0xb0>
    16a0:	2000000c 	.word	0x2000000c
    16a4:	000023d4 	.word	0x000023d4
    16a8:	000023f4 	.word	0x000023f4
    16ac:	000023b4 	.word	0x000023b4

000016b0 <__sflush_r>:
    16b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16b2:	898a      	ldrh	r2, [r1, #12]
    16b4:	0005      	movs	r5, r0
    16b6:	000c      	movs	r4, r1
    16b8:	0713      	lsls	r3, r2, #28
    16ba:	d45e      	bmi.n	177a <__sflush_r+0xca>
    16bc:	684b      	ldr	r3, [r1, #4]
    16be:	2b00      	cmp	r3, #0
    16c0:	dc04      	bgt.n	16cc <__sflush_r+0x1c>
    16c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    16c4:	2b00      	cmp	r3, #0
    16c6:	dc01      	bgt.n	16cc <__sflush_r+0x1c>
    16c8:	2000      	movs	r0, #0
    16ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    16cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    16ce:	2f00      	cmp	r7, #0
    16d0:	d0fa      	beq.n	16c8 <__sflush_r+0x18>
    16d2:	2300      	movs	r3, #0
    16d4:	682e      	ldr	r6, [r5, #0]
    16d6:	602b      	str	r3, [r5, #0]
    16d8:	f241 0300 	movw	r3, #4096	; 0x1000
    16dc:	401a      	ands	r2, r3
    16de:	b392      	cbz	r2, 1746 <__sflush_r+0x96>
    16e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    16e2:	89a3      	ldrh	r3, [r4, #12]
    16e4:	075b      	lsls	r3, r3, #29
    16e6:	d505      	bpl.n	16f4 <__sflush_r+0x44>
    16e8:	6863      	ldr	r3, [r4, #4]
    16ea:	1ac0      	subs	r0, r0, r3
    16ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    16ee:	b10b      	cbz	r3, 16f4 <__sflush_r+0x44>
    16f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	0002      	movs	r2, r0
    16f6:	6a21      	ldr	r1, [r4, #32]
    16f8:	2300      	movs	r3, #0
    16fa:	0028      	movs	r0, r5
    16fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    16fe:	47b8      	blx	r7
    1700:	89a1      	ldrh	r1, [r4, #12]
    1702:	1c43      	adds	r3, r0, #1
    1704:	d106      	bne.n	1714 <__sflush_r+0x64>
    1706:	682b      	ldr	r3, [r5, #0]
    1708:	2b1d      	cmp	r3, #29
    170a:	d830      	bhi.n	176e <__sflush_r+0xbe>
    170c:	4a2b      	ldr	r2, [pc, #172]	; (17bc <__sflush_r+0x10c>)
    170e:	40da      	lsrs	r2, r3
    1710:	07d3      	lsls	r3, r2, #31
    1712:	d52c      	bpl.n	176e <__sflush_r+0xbe>
    1714:	2300      	movs	r3, #0
    1716:	6063      	str	r3, [r4, #4]
    1718:	6923      	ldr	r3, [r4, #16]
    171a:	6023      	str	r3, [r4, #0]
    171c:	04cb      	lsls	r3, r1, #19
    171e:	d504      	bpl.n	172a <__sflush_r+0x7a>
    1720:	1c43      	adds	r3, r0, #1
    1722:	d101      	bne.n	1728 <__sflush_r+0x78>
    1724:	682b      	ldr	r3, [r5, #0]
    1726:	b903      	cbnz	r3, 172a <__sflush_r+0x7a>
    1728:	6560      	str	r0, [r4, #84]	; 0x54
    172a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    172c:	602e      	str	r6, [r5, #0]
    172e:	2900      	cmp	r1, #0
    1730:	d0ca      	beq.n	16c8 <__sflush_r+0x18>
    1732:	0023      	movs	r3, r4
    1734:	3344      	adds	r3, #68	; 0x44
    1736:	4299      	cmp	r1, r3
    1738:	d002      	beq.n	1740 <__sflush_r+0x90>
    173a:	0028      	movs	r0, r5
    173c:	f000 f9ac 	bl	1a98 <_free_r>
    1740:	2000      	movs	r0, #0
    1742:	6360      	str	r0, [r4, #52]	; 0x34
    1744:	e7c1      	b.n	16ca <__sflush_r+0x1a>
    1746:	2301      	movs	r3, #1
    1748:	6a21      	ldr	r1, [r4, #32]
    174a:	0028      	movs	r0, r5
    174c:	47b8      	blx	r7
    174e:	1c43      	adds	r3, r0, #1
    1750:	d1c7      	bne.n	16e2 <__sflush_r+0x32>
    1752:	682b      	ldr	r3, [r5, #0]
    1754:	2b00      	cmp	r3, #0
    1756:	d0c4      	beq.n	16e2 <__sflush_r+0x32>
    1758:	2b1d      	cmp	r3, #29
    175a:	d001      	beq.n	1760 <__sflush_r+0xb0>
    175c:	2b16      	cmp	r3, #22
    175e:	d101      	bne.n	1764 <__sflush_r+0xb4>
    1760:	602e      	str	r6, [r5, #0]
    1762:	e7b1      	b.n	16c8 <__sflush_r+0x18>
    1764:	2340      	movs	r3, #64	; 0x40
    1766:	89a2      	ldrh	r2, [r4, #12]
    1768:	4313      	orrs	r3, r2
    176a:	81a3      	strh	r3, [r4, #12]
    176c:	e7ad      	b.n	16ca <__sflush_r+0x1a>
    176e:	2340      	movs	r3, #64	; 0x40
    1770:	430b      	orrs	r3, r1
    1772:	2001      	movs	r0, #1
    1774:	81a3      	strh	r3, [r4, #12]
    1776:	4240      	negs	r0, r0
    1778:	e7a7      	b.n	16ca <__sflush_r+0x1a>
    177a:	690f      	ldr	r7, [r1, #16]
    177c:	2f00      	cmp	r7, #0
    177e:	d0a3      	beq.n	16c8 <__sflush_r+0x18>
    1780:	680b      	ldr	r3, [r1, #0]
    1782:	600f      	str	r7, [r1, #0]
    1784:	1bdb      	subs	r3, r3, r7
    1786:	9301      	str	r3, [sp, #4]
    1788:	2300      	movs	r3, #0
    178a:	0792      	lsls	r2, r2, #30
    178c:	d100      	bne.n	1790 <__sflush_r+0xe0>
    178e:	694b      	ldr	r3, [r1, #20]
    1790:	60a3      	str	r3, [r4, #8]
    1792:	9b01      	ldr	r3, [sp, #4]
    1794:	2b00      	cmp	r3, #0
    1796:	dc00      	bgt.n	179a <__sflush_r+0xea>
    1798:	e796      	b.n	16c8 <__sflush_r+0x18>
    179a:	9b01      	ldr	r3, [sp, #4]
    179c:	003a      	movs	r2, r7
    179e:	6a21      	ldr	r1, [r4, #32]
    17a0:	0028      	movs	r0, r5
    17a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    17a4:	47b0      	blx	r6
    17a6:	2800      	cmp	r0, #0
    17a8:	dc03      	bgt.n	17b2 <__sflush_r+0x102>
    17aa:	2340      	movs	r3, #64	; 0x40
    17ac:	89a2      	ldrh	r2, [r4, #12]
    17ae:	4313      	orrs	r3, r2
    17b0:	e7df      	b.n	1772 <__sflush_r+0xc2>
    17b2:	9b01      	ldr	r3, [sp, #4]
    17b4:	183f      	adds	r7, r7, r0
    17b6:	1a1b      	subs	r3, r3, r0
    17b8:	9301      	str	r3, [sp, #4]
    17ba:	e7ea      	b.n	1792 <__sflush_r+0xe2>
    17bc:	20400001 	.word	0x20400001

000017c0 <_fflush_r>:
    17c0:	690b      	ldr	r3, [r1, #16]
    17c2:	b570      	push	{r4, r5, r6, lr}
    17c4:	0005      	movs	r5, r0
    17c6:	000c      	movs	r4, r1
    17c8:	b90b      	cbnz	r3, 17ce <_fflush_r+0xe>
    17ca:	2000      	movs	r0, #0
    17cc:	bd70      	pop	{r4, r5, r6, pc}
    17ce:	b118      	cbz	r0, 17d8 <_fflush_r+0x18>
    17d0:	6983      	ldr	r3, [r0, #24]
    17d2:	b90b      	cbnz	r3, 17d8 <_fflush_r+0x18>
    17d4:	f000 f860 	bl	1898 <__sinit>
    17d8:	4b0b      	ldr	r3, [pc, #44]	; (1808 <_fflush_r+0x48>)
    17da:	429c      	cmp	r4, r3
    17dc:	d109      	bne.n	17f2 <_fflush_r+0x32>
    17de:	686c      	ldr	r4, [r5, #4]
    17e0:	220c      	movs	r2, #12
    17e2:	5ea3      	ldrsh	r3, [r4, r2]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d0f0      	beq.n	17ca <_fflush_r+0xa>
    17e8:	0021      	movs	r1, r4
    17ea:	0028      	movs	r0, r5
    17ec:	f7ff ff60 	bl	16b0 <__sflush_r>
    17f0:	e7ec      	b.n	17cc <_fflush_r+0xc>
    17f2:	4b06      	ldr	r3, [pc, #24]	; (180c <_fflush_r+0x4c>)
    17f4:	429c      	cmp	r4, r3
    17f6:	d101      	bne.n	17fc <_fflush_r+0x3c>
    17f8:	68ac      	ldr	r4, [r5, #8]
    17fa:	e7f1      	b.n	17e0 <_fflush_r+0x20>
    17fc:	4b04      	ldr	r3, [pc, #16]	; (1810 <_fflush_r+0x50>)
    17fe:	429c      	cmp	r4, r3
    1800:	d1ee      	bne.n	17e0 <_fflush_r+0x20>
    1802:	68ec      	ldr	r4, [r5, #12]
    1804:	e7ec      	b.n	17e0 <_fflush_r+0x20>
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	000023d4 	.word	0x000023d4
    180c:	000023f4 	.word	0x000023f4
    1810:	000023b4 	.word	0x000023b4

00001814 <_cleanup_r>:
    1814:	b510      	push	{r4, lr}
    1816:	4902      	ldr	r1, [pc, #8]	; (1820 <_cleanup_r+0xc>)
    1818:	f000 f8ac 	bl	1974 <_fwalk_reent>
    181c:	bd10      	pop	{r4, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	000017c1 	.word	0x000017c1

00001824 <std.isra.0>:
    1824:	2300      	movs	r3, #0
    1826:	b510      	push	{r4, lr}
    1828:	0004      	movs	r4, r0
    182a:	6003      	str	r3, [r0, #0]
    182c:	6043      	str	r3, [r0, #4]
    182e:	6083      	str	r3, [r0, #8]
    1830:	8181      	strh	r1, [r0, #12]
    1832:	6643      	str	r3, [r0, #100]	; 0x64
    1834:	81c2      	strh	r2, [r0, #14]
    1836:	6103      	str	r3, [r0, #16]
    1838:	6143      	str	r3, [r0, #20]
    183a:	6183      	str	r3, [r0, #24]
    183c:	0019      	movs	r1, r3
    183e:	2208      	movs	r2, #8
    1840:	305c      	adds	r0, #92	; 0x5c
    1842:	f7ff fd39 	bl	12b8 <memset>
    1846:	4b05      	ldr	r3, [pc, #20]	; (185c <std.isra.0+0x38>)
    1848:	6224      	str	r4, [r4, #32]
    184a:	6263      	str	r3, [r4, #36]	; 0x24
    184c:	4b04      	ldr	r3, [pc, #16]	; (1860 <std.isra.0+0x3c>)
    184e:	62a3      	str	r3, [r4, #40]	; 0x28
    1850:	4b04      	ldr	r3, [pc, #16]	; (1864 <std.isra.0+0x40>)
    1852:	62e3      	str	r3, [r4, #44]	; 0x2c
    1854:	4b04      	ldr	r3, [pc, #16]	; (1868 <std.isra.0+0x44>)
    1856:	6323      	str	r3, [r4, #48]	; 0x30
    1858:	bd10      	pop	{r4, pc}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	00002185 	.word	0x00002185
    1860:	000021ad 	.word	0x000021ad
    1864:	000021e5 	.word	0x000021e5
    1868:	00002211 	.word	0x00002211

0000186c <__sfmoreglue>:
    186c:	b570      	push	{r4, r5, r6, lr}
    186e:	2568      	movs	r5, #104	; 0x68
    1870:	1e4a      	subs	r2, r1, #1
    1872:	4355      	muls	r5, r2
    1874:	000e      	movs	r6, r1
    1876:	0029      	movs	r1, r5
    1878:	3174      	adds	r1, #116	; 0x74
    187a:	f000 f957 	bl	1b2c <_malloc_r>
    187e:	0004      	movs	r4, r0
    1880:	b140      	cbz	r0, 1894 <__sfmoreglue+0x28>
    1882:	2100      	movs	r1, #0
    1884:	002a      	movs	r2, r5
    1886:	6001      	str	r1, [r0, #0]
    1888:	6046      	str	r6, [r0, #4]
    188a:	300c      	adds	r0, #12
    188c:	60a0      	str	r0, [r4, #8]
    188e:	3268      	adds	r2, #104	; 0x68
    1890:	f7ff fd12 	bl	12b8 <memset>
    1894:	0020      	movs	r0, r4
    1896:	bd70      	pop	{r4, r5, r6, pc}

00001898 <__sinit>:
    1898:	6983      	ldr	r3, [r0, #24]
    189a:	b513      	push	{r0, r1, r4, lr}
    189c:	0004      	movs	r4, r0
    189e:	bb43      	cbnz	r3, 18f2 <__sinit+0x5a>
    18a0:	6483      	str	r3, [r0, #72]	; 0x48
    18a2:	64c3      	str	r3, [r0, #76]	; 0x4c
    18a4:	6503      	str	r3, [r0, #80]	; 0x50
    18a6:	4b13      	ldr	r3, [pc, #76]	; (18f4 <__sinit+0x5c>)
    18a8:	4a13      	ldr	r2, [pc, #76]	; (18f8 <__sinit+0x60>)
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	6282      	str	r2, [r0, #40]	; 0x28
    18ae:	9301      	str	r3, [sp, #4]
    18b0:	4298      	cmp	r0, r3
    18b2:	d101      	bne.n	18b8 <__sinit+0x20>
    18b4:	2301      	movs	r3, #1
    18b6:	6183      	str	r3, [r0, #24]
    18b8:	0020      	movs	r0, r4
    18ba:	f000 f81f 	bl	18fc <__sfp>
    18be:	6060      	str	r0, [r4, #4]
    18c0:	0020      	movs	r0, r4
    18c2:	f000 f81b 	bl	18fc <__sfp>
    18c6:	60a0      	str	r0, [r4, #8]
    18c8:	0020      	movs	r0, r4
    18ca:	f000 f817 	bl	18fc <__sfp>
    18ce:	2200      	movs	r2, #0
    18d0:	60e0      	str	r0, [r4, #12]
    18d2:	2104      	movs	r1, #4
    18d4:	6860      	ldr	r0, [r4, #4]
    18d6:	f7ff ffa5 	bl	1824 <std.isra.0>
    18da:	2201      	movs	r2, #1
    18dc:	2109      	movs	r1, #9
    18de:	68a0      	ldr	r0, [r4, #8]
    18e0:	f7ff ffa0 	bl	1824 <std.isra.0>
    18e4:	2202      	movs	r2, #2
    18e6:	2112      	movs	r1, #18
    18e8:	68e0      	ldr	r0, [r4, #12]
    18ea:	f7ff ff9b 	bl	1824 <std.isra.0>
    18ee:	2301      	movs	r3, #1
    18f0:	61a3      	str	r3, [r4, #24]
    18f2:	bd13      	pop	{r0, r1, r4, pc}
    18f4:	000023b0 	.word	0x000023b0
    18f8:	00001815 	.word	0x00001815

000018fc <__sfp>:
    18fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18fe:	4b1c      	ldr	r3, [pc, #112]	; (1970 <__sfp+0x74>)
    1900:	0007      	movs	r7, r0
    1902:	681e      	ldr	r6, [r3, #0]
    1904:	69b3      	ldr	r3, [r6, #24]
    1906:	b913      	cbnz	r3, 190e <__sfp+0x12>
    1908:	0030      	movs	r0, r6
    190a:	f7ff ffc5 	bl	1898 <__sinit>
    190e:	3648      	adds	r6, #72	; 0x48
    1910:	68b4      	ldr	r4, [r6, #8]
    1912:	6873      	ldr	r3, [r6, #4]
    1914:	3b01      	subs	r3, #1
    1916:	d503      	bpl.n	1920 <__sfp+0x24>
    1918:	6833      	ldr	r3, [r6, #0]
    191a:	b133      	cbz	r3, 192a <__sfp+0x2e>
    191c:	6836      	ldr	r6, [r6, #0]
    191e:	e7f7      	b.n	1910 <__sfp+0x14>
    1920:	220c      	movs	r2, #12
    1922:	5ea5      	ldrsh	r5, [r4, r2]
    1924:	b16d      	cbz	r5, 1942 <__sfp+0x46>
    1926:	3468      	adds	r4, #104	; 0x68
    1928:	e7f4      	b.n	1914 <__sfp+0x18>
    192a:	2104      	movs	r1, #4
    192c:	0038      	movs	r0, r7
    192e:	f7ff ff9d 	bl	186c <__sfmoreglue>
    1932:	6030      	str	r0, [r6, #0]
    1934:	2800      	cmp	r0, #0
    1936:	d1f1      	bne.n	191c <__sfp+0x20>
    1938:	230c      	movs	r3, #12
    193a:	0004      	movs	r4, r0
    193c:	603b      	str	r3, [r7, #0]
    193e:	0020      	movs	r0, r4
    1940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1942:	2301      	movs	r3, #1
    1944:	0020      	movs	r0, r4
    1946:	425b      	negs	r3, r3
    1948:	81e3      	strh	r3, [r4, #14]
    194a:	3302      	adds	r3, #2
    194c:	81a3      	strh	r3, [r4, #12]
    194e:	6665      	str	r5, [r4, #100]	; 0x64
    1950:	6025      	str	r5, [r4, #0]
    1952:	60a5      	str	r5, [r4, #8]
    1954:	6065      	str	r5, [r4, #4]
    1956:	6125      	str	r5, [r4, #16]
    1958:	6165      	str	r5, [r4, #20]
    195a:	61a5      	str	r5, [r4, #24]
    195c:	2208      	movs	r2, #8
    195e:	0029      	movs	r1, r5
    1960:	305c      	adds	r0, #92	; 0x5c
    1962:	f7ff fca9 	bl	12b8 <memset>
    1966:	6365      	str	r5, [r4, #52]	; 0x34
    1968:	63a5      	str	r5, [r4, #56]	; 0x38
    196a:	64a5      	str	r5, [r4, #72]	; 0x48
    196c:	64e5      	str	r5, [r4, #76]	; 0x4c
    196e:	e7e6      	b.n	193e <__sfp+0x42>
    1970:	000023b0 	.word	0x000023b0

00001974 <_fwalk_reent>:
    1974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1976:	0004      	movs	r4, r0
    1978:	0007      	movs	r7, r0
    197a:	2600      	movs	r6, #0
    197c:	9101      	str	r1, [sp, #4]
    197e:	3448      	adds	r4, #72	; 0x48
    1980:	b90c      	cbnz	r4, 1986 <_fwalk_reent+0x12>
    1982:	0030      	movs	r0, r6
    1984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1986:	6863      	ldr	r3, [r4, #4]
    1988:	68a5      	ldr	r5, [r4, #8]
    198a:	9300      	str	r3, [sp, #0]
    198c:	9b00      	ldr	r3, [sp, #0]
    198e:	3b01      	subs	r3, #1
    1990:	9300      	str	r3, [sp, #0]
    1992:	d501      	bpl.n	1998 <_fwalk_reent+0x24>
    1994:	6824      	ldr	r4, [r4, #0]
    1996:	e7f3      	b.n	1980 <_fwalk_reent+0xc>
    1998:	89ab      	ldrh	r3, [r5, #12]
    199a:	2b01      	cmp	r3, #1
    199c:	d908      	bls.n	19b0 <_fwalk_reent+0x3c>
    199e:	220e      	movs	r2, #14
    19a0:	5eab      	ldrsh	r3, [r5, r2]
    19a2:	3301      	adds	r3, #1
    19a4:	d004      	beq.n	19b0 <_fwalk_reent+0x3c>
    19a6:	0029      	movs	r1, r5
    19a8:	0038      	movs	r0, r7
    19aa:	9b01      	ldr	r3, [sp, #4]
    19ac:	4798      	blx	r3
    19ae:	4306      	orrs	r6, r0
    19b0:	3568      	adds	r5, #104	; 0x68
    19b2:	e7eb      	b.n	198c <_fwalk_reent+0x18>

000019b4 <__swhatbuf_r>:
    19b4:	b570      	push	{r4, r5, r6, lr}
    19b6:	000e      	movs	r6, r1
    19b8:	001d      	movs	r5, r3
    19ba:	230e      	movs	r3, #14
    19bc:	5ec9      	ldrsh	r1, [r1, r3]
    19be:	b090      	sub	sp, #64	; 0x40
    19c0:	0014      	movs	r4, r2
    19c2:	2900      	cmp	r1, #0
    19c4:	da07      	bge.n	19d6 <__swhatbuf_r+0x22>
    19c6:	2300      	movs	r3, #0
    19c8:	602b      	str	r3, [r5, #0]
    19ca:	89b3      	ldrh	r3, [r6, #12]
    19cc:	061b      	lsls	r3, r3, #24
    19ce:	d411      	bmi.n	19f4 <__swhatbuf_r+0x40>
    19d0:	f240 4300 	movw	r3, #1024	; 0x400
    19d4:	e00f      	b.n	19f6 <__swhatbuf_r+0x42>
    19d6:	aa01      	add	r2, sp, #4
    19d8:	f000 fc42 	bl	2260 <_fstat_r>
    19dc:	2800      	cmp	r0, #0
    19de:	dbf2      	blt.n	19c6 <__swhatbuf_r+0x12>
    19e0:	f24f 0200 	movw	r2, #61440	; 0xf000
    19e4:	9b02      	ldr	r3, [sp, #8]
    19e6:	4013      	ands	r3, r2
    19e8:	4a05      	ldr	r2, [pc, #20]	; (1a00 <__swhatbuf_r+0x4c>)
    19ea:	189b      	adds	r3, r3, r2
    19ec:	425a      	negs	r2, r3
    19ee:	4153      	adcs	r3, r2
    19f0:	602b      	str	r3, [r5, #0]
    19f2:	e7ed      	b.n	19d0 <__swhatbuf_r+0x1c>
    19f4:	2340      	movs	r3, #64	; 0x40
    19f6:	2000      	movs	r0, #0
    19f8:	6023      	str	r3, [r4, #0]
    19fa:	b010      	add	sp, #64	; 0x40
    19fc:	bd70      	pop	{r4, r5, r6, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	ffffe000 	.word	0xffffe000

00001a04 <__smakebuf_r>:
    1a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a06:	2602      	movs	r6, #2
    1a08:	898b      	ldrh	r3, [r1, #12]
    1a0a:	0005      	movs	r5, r0
    1a0c:	000c      	movs	r4, r1
    1a0e:	4233      	tst	r3, r6
    1a10:	d006      	beq.n	1a20 <__smakebuf_r+0x1c>
    1a12:	0023      	movs	r3, r4
    1a14:	3347      	adds	r3, #71	; 0x47
    1a16:	6023      	str	r3, [r4, #0]
    1a18:	6123      	str	r3, [r4, #16]
    1a1a:	2301      	movs	r3, #1
    1a1c:	6163      	str	r3, [r4, #20]
    1a1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1a20:	ab01      	add	r3, sp, #4
    1a22:	466a      	mov	r2, sp
    1a24:	f7ff ffc6 	bl	19b4 <__swhatbuf_r>
    1a28:	9900      	ldr	r1, [sp, #0]
    1a2a:	0007      	movs	r7, r0
    1a2c:	0028      	movs	r0, r5
    1a2e:	f000 f87d 	bl	1b2c <_malloc_r>
    1a32:	b940      	cbnz	r0, 1a46 <__smakebuf_r+0x42>
    1a34:	220c      	movs	r2, #12
    1a36:	5ea3      	ldrsh	r3, [r4, r2]
    1a38:	059a      	lsls	r2, r3, #22
    1a3a:	d4f0      	bmi.n	1a1e <__smakebuf_r+0x1a>
    1a3c:	2203      	movs	r2, #3
    1a3e:	4393      	bics	r3, r2
    1a40:	431e      	orrs	r6, r3
    1a42:	81a6      	strh	r6, [r4, #12]
    1a44:	e7e5      	b.n	1a12 <__smakebuf_r+0xe>
    1a46:	4b0e      	ldr	r3, [pc, #56]	; (1a80 <__smakebuf_r+0x7c>)
    1a48:	62ab      	str	r3, [r5, #40]	; 0x28
    1a4a:	2380      	movs	r3, #128	; 0x80
    1a4c:	89a2      	ldrh	r2, [r4, #12]
    1a4e:	6020      	str	r0, [r4, #0]
    1a50:	4313      	orrs	r3, r2
    1a52:	81a3      	strh	r3, [r4, #12]
    1a54:	9b00      	ldr	r3, [sp, #0]
    1a56:	6120      	str	r0, [r4, #16]
    1a58:	6163      	str	r3, [r4, #20]
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	b163      	cbz	r3, 1a78 <__smakebuf_r+0x74>
    1a5e:	230e      	movs	r3, #14
    1a60:	5ee1      	ldrsh	r1, [r4, r3]
    1a62:	0028      	movs	r0, r5
    1a64:	f000 fc0e 	bl	2284 <_isatty_r>
    1a68:	b130      	cbz	r0, 1a78 <__smakebuf_r+0x74>
    1a6a:	2203      	movs	r2, #3
    1a6c:	89a3      	ldrh	r3, [r4, #12]
    1a6e:	4393      	bics	r3, r2
    1a70:	001a      	movs	r2, r3
    1a72:	2301      	movs	r3, #1
    1a74:	4313      	orrs	r3, r2
    1a76:	81a3      	strh	r3, [r4, #12]
    1a78:	89a0      	ldrh	r0, [r4, #12]
    1a7a:	4338      	orrs	r0, r7
    1a7c:	81a0      	strh	r0, [r4, #12]
    1a7e:	e7ce      	b.n	1a1e <__smakebuf_r+0x1a>
    1a80:	00001815 	.word	0x00001815

00001a84 <malloc>:
    1a84:	b510      	push	{r4, lr}
    1a86:	4b03      	ldr	r3, [pc, #12]	; (1a94 <malloc+0x10>)
    1a88:	0001      	movs	r1, r0
    1a8a:	6818      	ldr	r0, [r3, #0]
    1a8c:	f000 f84e 	bl	1b2c <_malloc_r>
    1a90:	bd10      	pop	{r4, pc}
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	2000000c 	.word	0x2000000c

00001a98 <_free_r>:
    1a98:	b570      	push	{r4, r5, r6, lr}
    1a9a:	0005      	movs	r5, r0
    1a9c:	b181      	cbz	r1, 1ac0 <_free_r+0x28>
    1a9e:	1f0c      	subs	r4, r1, #4
    1aa0:	6823      	ldr	r3, [r4, #0]
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	da00      	bge.n	1aa8 <_free_r+0x10>
    1aa6:	18e4      	adds	r4, r4, r3
    1aa8:	0028      	movs	r0, r5
    1aaa:	f000 fc18 	bl	22de <__malloc_lock>
    1aae:	4a1e      	ldr	r2, [pc, #120]	; (1b28 <_free_r+0x90>)
    1ab0:	6813      	ldr	r3, [r2, #0]
    1ab2:	0011      	movs	r1, r2
    1ab4:	b92b      	cbnz	r3, 1ac2 <_free_r+0x2a>
    1ab6:	6063      	str	r3, [r4, #4]
    1ab8:	6014      	str	r4, [r2, #0]
    1aba:	0028      	movs	r0, r5
    1abc:	f000 fc10 	bl	22e0 <__malloc_unlock>
    1ac0:	bd70      	pop	{r4, r5, r6, pc}
    1ac2:	42a3      	cmp	r3, r4
    1ac4:	d90b      	bls.n	1ade <_free_r+0x46>
    1ac6:	6822      	ldr	r2, [r4, #0]
    1ac8:	18a0      	adds	r0, r4, r2
    1aca:	4283      	cmp	r3, r0
    1acc:	d103      	bne.n	1ad6 <_free_r+0x3e>
    1ace:	6818      	ldr	r0, [r3, #0]
    1ad0:	685b      	ldr	r3, [r3, #4]
    1ad2:	1882      	adds	r2, r0, r2
    1ad4:	6022      	str	r2, [r4, #0]
    1ad6:	6063      	str	r3, [r4, #4]
    1ad8:	600c      	str	r4, [r1, #0]
    1ada:	e7ee      	b.n	1aba <_free_r+0x22>
    1adc:	0013      	movs	r3, r2
    1ade:	685a      	ldr	r2, [r3, #4]
    1ae0:	b10a      	cbz	r2, 1ae6 <_free_r+0x4e>
    1ae2:	42a2      	cmp	r2, r4
    1ae4:	d9fa      	bls.n	1adc <_free_r+0x44>
    1ae6:	6819      	ldr	r1, [r3, #0]
    1ae8:	1858      	adds	r0, r3, r1
    1aea:	42a0      	cmp	r0, r4
    1aec:	d10b      	bne.n	1b06 <_free_r+0x6e>
    1aee:	6820      	ldr	r0, [r4, #0]
    1af0:	1809      	adds	r1, r1, r0
    1af2:	1858      	adds	r0, r3, r1
    1af4:	6019      	str	r1, [r3, #0]
    1af6:	4282      	cmp	r2, r0
    1af8:	d1df      	bne.n	1aba <_free_r+0x22>
    1afa:	6810      	ldr	r0, [r2, #0]
    1afc:	6852      	ldr	r2, [r2, #4]
    1afe:	1841      	adds	r1, r0, r1
    1b00:	6019      	str	r1, [r3, #0]
    1b02:	605a      	str	r2, [r3, #4]
    1b04:	e7d9      	b.n	1aba <_free_r+0x22>
    1b06:	42a0      	cmp	r0, r4
    1b08:	d902      	bls.n	1b10 <_free_r+0x78>
    1b0a:	230c      	movs	r3, #12
    1b0c:	602b      	str	r3, [r5, #0]
    1b0e:	e7d4      	b.n	1aba <_free_r+0x22>
    1b10:	6821      	ldr	r1, [r4, #0]
    1b12:	1860      	adds	r0, r4, r1
    1b14:	4282      	cmp	r2, r0
    1b16:	d103      	bne.n	1b20 <_free_r+0x88>
    1b18:	6810      	ldr	r0, [r2, #0]
    1b1a:	6852      	ldr	r2, [r2, #4]
    1b1c:	1841      	adds	r1, r0, r1
    1b1e:	6021      	str	r1, [r4, #0]
    1b20:	6062      	str	r2, [r4, #4]
    1b22:	605c      	str	r4, [r3, #4]
    1b24:	e7c9      	b.n	1aba <_free_r+0x22>
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	200010b8 	.word	0x200010b8

00001b2c <_malloc_r>:
    1b2c:	2303      	movs	r3, #3
    1b2e:	b570      	push	{r4, r5, r6, lr}
    1b30:	1ccd      	adds	r5, r1, #3
    1b32:	439d      	bics	r5, r3
    1b34:	3508      	adds	r5, #8
    1b36:	0006      	movs	r6, r0
    1b38:	2d0c      	cmp	r5, #12
    1b3a:	d21c      	bcs.n	1b76 <_malloc_r+0x4a>
    1b3c:	250c      	movs	r5, #12
    1b3e:	42a9      	cmp	r1, r5
    1b40:	d81b      	bhi.n	1b7a <_malloc_r+0x4e>
    1b42:	0030      	movs	r0, r6
    1b44:	f000 fbcb 	bl	22de <__malloc_lock>
    1b48:	4a25      	ldr	r2, [pc, #148]	; (1be0 <_malloc_r+0xb4>)
    1b4a:	6814      	ldr	r4, [r2, #0]
    1b4c:	0021      	movs	r1, r4
    1b4e:	b9c1      	cbnz	r1, 1b82 <_malloc_r+0x56>
    1b50:	4c24      	ldr	r4, [pc, #144]	; (1be4 <_malloc_r+0xb8>)
    1b52:	6823      	ldr	r3, [r4, #0]
    1b54:	b91b      	cbnz	r3, 1b5e <_malloc_r+0x32>
    1b56:	0030      	movs	r0, r6
    1b58:	f000 fb04 	bl	2164 <_sbrk_r>
    1b5c:	6020      	str	r0, [r4, #0]
    1b5e:	0029      	movs	r1, r5
    1b60:	0030      	movs	r0, r6
    1b62:	f000 faff 	bl	2164 <_sbrk_r>
    1b66:	1c43      	adds	r3, r0, #1
    1b68:	d12d      	bne.n	1bc6 <_malloc_r+0x9a>
    1b6a:	230c      	movs	r3, #12
    1b6c:	0030      	movs	r0, r6
    1b6e:	6033      	str	r3, [r6, #0]
    1b70:	f000 fbb6 	bl	22e0 <__malloc_unlock>
    1b74:	e003      	b.n	1b7e <_malloc_r+0x52>
    1b76:	2d00      	cmp	r5, #0
    1b78:	dae1      	bge.n	1b3e <_malloc_r+0x12>
    1b7a:	230c      	movs	r3, #12
    1b7c:	6033      	str	r3, [r6, #0]
    1b7e:	2000      	movs	r0, #0
    1b80:	bd70      	pop	{r4, r5, r6, pc}
    1b82:	680b      	ldr	r3, [r1, #0]
    1b84:	1b5b      	subs	r3, r3, r5
    1b86:	d41b      	bmi.n	1bc0 <_malloc_r+0x94>
    1b88:	2b0b      	cmp	r3, #11
    1b8a:	d903      	bls.n	1b94 <_malloc_r+0x68>
    1b8c:	600b      	str	r3, [r1, #0]
    1b8e:	18cc      	adds	r4, r1, r3
    1b90:	6025      	str	r5, [r4, #0]
    1b92:	e003      	b.n	1b9c <_malloc_r+0x70>
    1b94:	428c      	cmp	r4, r1
    1b96:	d10f      	bne.n	1bb8 <_malloc_r+0x8c>
    1b98:	6863      	ldr	r3, [r4, #4]
    1b9a:	6013      	str	r3, [r2, #0]
    1b9c:	0030      	movs	r0, r6
    1b9e:	f000 fb9f 	bl	22e0 <__malloc_unlock>
    1ba2:	0020      	movs	r0, r4
    1ba4:	2207      	movs	r2, #7
    1ba6:	300b      	adds	r0, #11
    1ba8:	1d23      	adds	r3, r4, #4
    1baa:	4390      	bics	r0, r2
    1bac:	1ac3      	subs	r3, r0, r3
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d0e6      	beq.n	1b80 <_malloc_r+0x54>
    1bb2:	425a      	negs	r2, r3
    1bb4:	50e2      	str	r2, [r4, r3]
    1bb6:	e7e3      	b.n	1b80 <_malloc_r+0x54>
    1bb8:	684b      	ldr	r3, [r1, #4]
    1bba:	6063      	str	r3, [r4, #4]
    1bbc:	000c      	movs	r4, r1
    1bbe:	e7ed      	b.n	1b9c <_malloc_r+0x70>
    1bc0:	000c      	movs	r4, r1
    1bc2:	6849      	ldr	r1, [r1, #4]
    1bc4:	e7c3      	b.n	1b4e <_malloc_r+0x22>
    1bc6:	2303      	movs	r3, #3
    1bc8:	1cc4      	adds	r4, r0, #3
    1bca:	439c      	bics	r4, r3
    1bcc:	42a0      	cmp	r0, r4
    1bce:	d0df      	beq.n	1b90 <_malloc_r+0x64>
    1bd0:	1a21      	subs	r1, r4, r0
    1bd2:	0030      	movs	r0, r6
    1bd4:	f000 fac6 	bl	2164 <_sbrk_r>
    1bd8:	1c43      	adds	r3, r0, #1
    1bda:	d1d9      	bne.n	1b90 <_malloc_r+0x64>
    1bdc:	e7c5      	b.n	1b6a <_malloc_r+0x3e>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	200010b8 	.word	0x200010b8
    1be4:	200010bc 	.word	0x200010bc

00001be8 <__sfputc_r>:
    1be8:	6893      	ldr	r3, [r2, #8]
    1bea:	b510      	push	{r4, lr}
    1bec:	3b01      	subs	r3, #1
    1bee:	6093      	str	r3, [r2, #8]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	da05      	bge.n	1c00 <__sfputc_r+0x18>
    1bf4:	6994      	ldr	r4, [r2, #24]
    1bf6:	42a3      	cmp	r3, r4
    1bf8:	db08      	blt.n	1c0c <__sfputc_r+0x24>
    1bfa:	b2cb      	uxtb	r3, r1
    1bfc:	2b0a      	cmp	r3, #10
    1bfe:	d005      	beq.n	1c0c <__sfputc_r+0x24>
    1c00:	6813      	ldr	r3, [r2, #0]
    1c02:	1c58      	adds	r0, r3, #1
    1c04:	6010      	str	r0, [r2, #0]
    1c06:	7019      	strb	r1, [r3, #0]
    1c08:	b2c8      	uxtb	r0, r1
    1c0a:	bd10      	pop	{r4, pc}
    1c0c:	f7ff fc8c 	bl	1528 <__swbuf_r>
    1c10:	e7fb      	b.n	1c0a <__sfputc_r+0x22>

00001c12 <__sfputs_r>:
    1c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c14:	0006      	movs	r6, r0
    1c16:	000f      	movs	r7, r1
    1c18:	0014      	movs	r4, r2
    1c1a:	18d5      	adds	r5, r2, r3
    1c1c:	42ac      	cmp	r4, r5
    1c1e:	d101      	bne.n	1c24 <__sfputs_r+0x12>
    1c20:	2000      	movs	r0, #0
    1c22:	e007      	b.n	1c34 <__sfputs_r+0x22>
    1c24:	7821      	ldrb	r1, [r4, #0]
    1c26:	003a      	movs	r2, r7
    1c28:	0030      	movs	r0, r6
    1c2a:	f7ff ffdd 	bl	1be8 <__sfputc_r>
    1c2e:	3401      	adds	r4, #1
    1c30:	1c43      	adds	r3, r0, #1
    1c32:	d1f3      	bne.n	1c1c <__sfputs_r+0xa>
    1c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001c38 <_vfiprintf_r>:
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	b09f      	sub	sp, #124	; 0x7c
    1c3c:	9002      	str	r0, [sp, #8]
    1c3e:	000f      	movs	r7, r1
    1c40:	0016      	movs	r6, r2
    1c42:	9305      	str	r3, [sp, #20]
    1c44:	b120      	cbz	r0, 1c50 <_vfiprintf_r+0x18>
    1c46:	6983      	ldr	r3, [r0, #24]
    1c48:	9304      	str	r3, [sp, #16]
    1c4a:	b90b      	cbnz	r3, 1c50 <_vfiprintf_r+0x18>
    1c4c:	f7ff fe24 	bl	1898 <__sinit>
    1c50:	4b7e      	ldr	r3, [pc, #504]	; (1e4c <_vfiprintf_r+0x214>)
    1c52:	429f      	cmp	r7, r3
    1c54:	d15b      	bne.n	1d0e <_vfiprintf_r+0xd6>
    1c56:	9b02      	ldr	r3, [sp, #8]
    1c58:	685f      	ldr	r7, [r3, #4]
    1c5a:	89bb      	ldrh	r3, [r7, #12]
    1c5c:	071b      	lsls	r3, r3, #28
    1c5e:	d562      	bpl.n	1d26 <_vfiprintf_r+0xee>
    1c60:	693b      	ldr	r3, [r7, #16]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d05f      	beq.n	1d26 <_vfiprintf_r+0xee>
    1c66:	2300      	movs	r3, #0
    1c68:	ad06      	add	r5, sp, #24
    1c6a:	616b      	str	r3, [r5, #20]
    1c6c:	3320      	adds	r3, #32
    1c6e:	766b      	strb	r3, [r5, #25]
    1c70:	3310      	adds	r3, #16
    1c72:	76ab      	strb	r3, [r5, #26]
    1c74:	0034      	movs	r4, r6
    1c76:	7823      	ldrb	r3, [r4, #0]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d15e      	bne.n	1d3a <_vfiprintf_r+0x102>
    1c7c:	1ba3      	subs	r3, r4, r6
    1c7e:	9304      	str	r3, [sp, #16]
    1c80:	b16b      	cbz	r3, 1c9e <_vfiprintf_r+0x66>
    1c82:	1ba3      	subs	r3, r4, r6
    1c84:	0032      	movs	r2, r6
    1c86:	0039      	movs	r1, r7
    1c88:	9802      	ldr	r0, [sp, #8]
    1c8a:	f7ff ffc2 	bl	1c12 <__sfputs_r>
    1c8e:	1c43      	adds	r3, r0, #1
    1c90:	d100      	bne.n	1c94 <_vfiprintf_r+0x5c>
    1c92:	e0cb      	b.n	1e2c <_vfiprintf_r+0x1f4>
    1c94:	696a      	ldr	r2, [r5, #20]
    1c96:	9b04      	ldr	r3, [sp, #16]
    1c98:	4694      	mov	ip, r2
    1c9a:	4463      	add	r3, ip
    1c9c:	616b      	str	r3, [r5, #20]
    1c9e:	7823      	ldrb	r3, [r4, #0]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d100      	bne.n	1ca6 <_vfiprintf_r+0x6e>
    1ca4:	e0c2      	b.n	1e2c <_vfiprintf_r+0x1f4>
    1ca6:	2201      	movs	r2, #1
    1ca8:	2300      	movs	r3, #0
    1caa:	4252      	negs	r2, r2
    1cac:	606a      	str	r2, [r5, #4]
    1cae:	a902      	add	r1, sp, #8
    1cb0:	3254      	adds	r2, #84	; 0x54
    1cb2:	1852      	adds	r2, r2, r1
    1cb4:	3401      	adds	r4, #1
    1cb6:	602b      	str	r3, [r5, #0]
    1cb8:	60eb      	str	r3, [r5, #12]
    1cba:	60ab      	str	r3, [r5, #8]
    1cbc:	7013      	strb	r3, [r2, #0]
    1cbe:	65ab      	str	r3, [r5, #88]	; 0x58
    1cc0:	4e63      	ldr	r6, [pc, #396]	; (1e50 <_vfiprintf_r+0x218>)
    1cc2:	2205      	movs	r2, #5
    1cc4:	7821      	ldrb	r1, [r4, #0]
    1cc6:	0030      	movs	r0, r6
    1cc8:	f000 fafe 	bl	22c8 <memchr>
    1ccc:	1c62      	adds	r2, r4, #1
    1cce:	2800      	cmp	r0, #0
    1cd0:	d137      	bne.n	1d42 <_vfiprintf_r+0x10a>
    1cd2:	6829      	ldr	r1, [r5, #0]
    1cd4:	06cb      	lsls	r3, r1, #27
    1cd6:	d504      	bpl.n	1ce2 <_vfiprintf_r+0xaa>
    1cd8:	2353      	movs	r3, #83	; 0x53
    1cda:	ae02      	add	r6, sp, #8
    1cdc:	3020      	adds	r0, #32
    1cde:	199b      	adds	r3, r3, r6
    1ce0:	7018      	strb	r0, [r3, #0]
    1ce2:	070b      	lsls	r3, r1, #28
    1ce4:	d504      	bpl.n	1cf0 <_vfiprintf_r+0xb8>
    1ce6:	2353      	movs	r3, #83	; 0x53
    1ce8:	202b      	movs	r0, #43	; 0x2b
    1cea:	ae02      	add	r6, sp, #8
    1cec:	199b      	adds	r3, r3, r6
    1cee:	7018      	strb	r0, [r3, #0]
    1cf0:	7823      	ldrb	r3, [r4, #0]
    1cf2:	2b2a      	cmp	r3, #42	; 0x2a
    1cf4:	d02d      	beq.n	1d52 <_vfiprintf_r+0x11a>
    1cf6:	2100      	movs	r1, #0
    1cf8:	200a      	movs	r0, #10
    1cfa:	2601      	movs	r6, #1
    1cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cfe:	7822      	ldrb	r2, [r4, #0]
    1d00:	3a30      	subs	r2, #48	; 0x30
    1d02:	2a09      	cmp	r2, #9
    1d04:	d969      	bls.n	1dda <_vfiprintf_r+0x1a2>
    1d06:	2900      	cmp	r1, #0
    1d08:	d02b      	beq.n	1d62 <_vfiprintf_r+0x12a>
    1d0a:	9309      	str	r3, [sp, #36]	; 0x24
    1d0c:	e029      	b.n	1d62 <_vfiprintf_r+0x12a>
    1d0e:	4b51      	ldr	r3, [pc, #324]	; (1e54 <_vfiprintf_r+0x21c>)
    1d10:	429f      	cmp	r7, r3
    1d12:	d102      	bne.n	1d1a <_vfiprintf_r+0xe2>
    1d14:	9b02      	ldr	r3, [sp, #8]
    1d16:	689f      	ldr	r7, [r3, #8]
    1d18:	e79f      	b.n	1c5a <_vfiprintf_r+0x22>
    1d1a:	4b4f      	ldr	r3, [pc, #316]	; (1e58 <_vfiprintf_r+0x220>)
    1d1c:	429f      	cmp	r7, r3
    1d1e:	d19c      	bne.n	1c5a <_vfiprintf_r+0x22>
    1d20:	9b02      	ldr	r3, [sp, #8]
    1d22:	68df      	ldr	r7, [r3, #12]
    1d24:	e799      	b.n	1c5a <_vfiprintf_r+0x22>
    1d26:	0039      	movs	r1, r7
    1d28:	9802      	ldr	r0, [sp, #8]
    1d2a:	f7ff fc4f 	bl	15cc <__swsetup_r>
    1d2e:	2800      	cmp	r0, #0
    1d30:	d099      	beq.n	1c66 <_vfiprintf_r+0x2e>
    1d32:	2001      	movs	r0, #1
    1d34:	4240      	negs	r0, r0
    1d36:	b01f      	add	sp, #124	; 0x7c
    1d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d3a:	2b25      	cmp	r3, #37	; 0x25
    1d3c:	d09e      	beq.n	1c7c <_vfiprintf_r+0x44>
    1d3e:	3401      	adds	r4, #1
    1d40:	e799      	b.n	1c76 <_vfiprintf_r+0x3e>
    1d42:	2301      	movs	r3, #1
    1d44:	1b80      	subs	r0, r0, r6
    1d46:	4083      	lsls	r3, r0
    1d48:	6829      	ldr	r1, [r5, #0]
    1d4a:	0014      	movs	r4, r2
    1d4c:	430b      	orrs	r3, r1
    1d4e:	602b      	str	r3, [r5, #0]
    1d50:	e7b6      	b.n	1cc0 <_vfiprintf_r+0x88>
    1d52:	9b05      	ldr	r3, [sp, #20]
    1d54:	1d18      	adds	r0, r3, #4
    1d56:	681b      	ldr	r3, [r3, #0]
    1d58:	9005      	str	r0, [sp, #20]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	db37      	blt.n	1dce <_vfiprintf_r+0x196>
    1d5e:	9309      	str	r3, [sp, #36]	; 0x24
    1d60:	0014      	movs	r4, r2
    1d62:	7823      	ldrb	r3, [r4, #0]
    1d64:	2b2e      	cmp	r3, #46	; 0x2e
    1d66:	d10b      	bne.n	1d80 <_vfiprintf_r+0x148>
    1d68:	7863      	ldrb	r3, [r4, #1]
    1d6a:	1c62      	adds	r2, r4, #1
    1d6c:	2b2a      	cmp	r3, #42	; 0x2a
    1d6e:	d13c      	bne.n	1dea <_vfiprintf_r+0x1b2>
    1d70:	9b05      	ldr	r3, [sp, #20]
    1d72:	3402      	adds	r4, #2
    1d74:	1d1a      	adds	r2, r3, #4
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	9205      	str	r2, [sp, #20]
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	db32      	blt.n	1de4 <_vfiprintf_r+0x1ac>
    1d7e:	9307      	str	r3, [sp, #28]
    1d80:	4e36      	ldr	r6, [pc, #216]	; (1e5c <_vfiprintf_r+0x224>)
    1d82:	7821      	ldrb	r1, [r4, #0]
    1d84:	2203      	movs	r2, #3
    1d86:	0030      	movs	r0, r6
    1d88:	f000 fa9e 	bl	22c8 <memchr>
    1d8c:	b130      	cbz	r0, 1d9c <_vfiprintf_r+0x164>
    1d8e:	2340      	movs	r3, #64	; 0x40
    1d90:	1b80      	subs	r0, r0, r6
    1d92:	4083      	lsls	r3, r0
    1d94:	682a      	ldr	r2, [r5, #0]
    1d96:	3401      	adds	r4, #1
    1d98:	4313      	orrs	r3, r2
    1d9a:	602b      	str	r3, [r5, #0]
    1d9c:	7821      	ldrb	r1, [r4, #0]
    1d9e:	2206      	movs	r2, #6
    1da0:	482f      	ldr	r0, [pc, #188]	; (1e60 <_vfiprintf_r+0x228>)
    1da2:	1c66      	adds	r6, r4, #1
    1da4:	7629      	strb	r1, [r5, #24]
    1da6:	f000 fa8f 	bl	22c8 <memchr>
    1daa:	2800      	cmp	r0, #0
    1dac:	d044      	beq.n	1e38 <_vfiprintf_r+0x200>
    1dae:	4b2d      	ldr	r3, [pc, #180]	; (1e64 <_vfiprintf_r+0x22c>)
    1db0:	bb83      	cbnz	r3, 1e14 <_vfiprintf_r+0x1dc>
    1db2:	6829      	ldr	r1, [r5, #0]
    1db4:	9b05      	ldr	r3, [sp, #20]
    1db6:	2207      	movs	r2, #7
    1db8:	05c9      	lsls	r1, r1, #23
    1dba:	d529      	bpl.n	1e10 <_vfiprintf_r+0x1d8>
    1dbc:	189b      	adds	r3, r3, r2
    1dbe:	4393      	bics	r3, r2
    1dc0:	3308      	adds	r3, #8
    1dc2:	9305      	str	r3, [sp, #20]
    1dc4:	696b      	ldr	r3, [r5, #20]
    1dc6:	9a03      	ldr	r2, [sp, #12]
    1dc8:	189b      	adds	r3, r3, r2
    1dca:	616b      	str	r3, [r5, #20]
    1dcc:	e752      	b.n	1c74 <_vfiprintf_r+0x3c>
    1dce:	425b      	negs	r3, r3
    1dd0:	60eb      	str	r3, [r5, #12]
    1dd2:	2302      	movs	r3, #2
    1dd4:	430b      	orrs	r3, r1
    1dd6:	602b      	str	r3, [r5, #0]
    1dd8:	e7c2      	b.n	1d60 <_vfiprintf_r+0x128>
    1dda:	4343      	muls	r3, r0
    1ddc:	3401      	adds	r4, #1
    1dde:	189b      	adds	r3, r3, r2
    1de0:	0031      	movs	r1, r6
    1de2:	e78c      	b.n	1cfe <_vfiprintf_r+0xc6>
    1de4:	2301      	movs	r3, #1
    1de6:	425b      	negs	r3, r3
    1de8:	e7c9      	b.n	1d7e <_vfiprintf_r+0x146>
    1dea:	2300      	movs	r3, #0
    1dec:	0014      	movs	r4, r2
    1dee:	200a      	movs	r0, #10
    1df0:	001a      	movs	r2, r3
    1df2:	2601      	movs	r6, #1
    1df4:	606b      	str	r3, [r5, #4]
    1df6:	7821      	ldrb	r1, [r4, #0]
    1df8:	3930      	subs	r1, #48	; 0x30
    1dfa:	2909      	cmp	r1, #9
    1dfc:	d903      	bls.n	1e06 <_vfiprintf_r+0x1ce>
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d0be      	beq.n	1d80 <_vfiprintf_r+0x148>
    1e02:	9207      	str	r2, [sp, #28]
    1e04:	e7bc      	b.n	1d80 <_vfiprintf_r+0x148>
    1e06:	4342      	muls	r2, r0
    1e08:	3401      	adds	r4, #1
    1e0a:	1852      	adds	r2, r2, r1
    1e0c:	0033      	movs	r3, r6
    1e0e:	e7f2      	b.n	1df6 <_vfiprintf_r+0x1be>
    1e10:	3307      	adds	r3, #7
    1e12:	e7d4      	b.n	1dbe <_vfiprintf_r+0x186>
    1e14:	ab05      	add	r3, sp, #20
    1e16:	9300      	str	r3, [sp, #0]
    1e18:	003a      	movs	r2, r7
    1e1a:	4b13      	ldr	r3, [pc, #76]	; (1e68 <_vfiprintf_r+0x230>)
    1e1c:	0029      	movs	r1, r5
    1e1e:	9802      	ldr	r0, [sp, #8]
    1e20:	e000      	b.n	1e24 <_vfiprintf_r+0x1ec>
    1e22:	bf00      	nop
    1e24:	9003      	str	r0, [sp, #12]
    1e26:	9b03      	ldr	r3, [sp, #12]
    1e28:	3301      	adds	r3, #1
    1e2a:	d1cb      	bne.n	1dc4 <_vfiprintf_r+0x18c>
    1e2c:	89bb      	ldrh	r3, [r7, #12]
    1e2e:	065b      	lsls	r3, r3, #25
    1e30:	d500      	bpl.n	1e34 <_vfiprintf_r+0x1fc>
    1e32:	e77e      	b.n	1d32 <_vfiprintf_r+0xfa>
    1e34:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e36:	e77e      	b.n	1d36 <_vfiprintf_r+0xfe>
    1e38:	ab05      	add	r3, sp, #20
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	003a      	movs	r2, r7
    1e3e:	4b0a      	ldr	r3, [pc, #40]	; (1e68 <_vfiprintf_r+0x230>)
    1e40:	0029      	movs	r1, r5
    1e42:	9802      	ldr	r0, [sp, #8]
    1e44:	f000 f87e 	bl	1f44 <_printf_i>
    1e48:	e7ec      	b.n	1e24 <_vfiprintf_r+0x1ec>
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	000023d4 	.word	0x000023d4
    1e50:	00002414 	.word	0x00002414
    1e54:	000023f4 	.word	0x000023f4
    1e58:	000023b4 	.word	0x000023b4
    1e5c:	0000241a 	.word	0x0000241a
    1e60:	0000241e 	.word	0x0000241e
    1e64:	00000000 	.word	0x00000000
    1e68:	00001c13 	.word	0x00001c13

00001e6c <_printf_common>:
    1e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e6e:	0015      	movs	r5, r2
    1e70:	9301      	str	r3, [sp, #4]
    1e72:	688a      	ldr	r2, [r1, #8]
    1e74:	690b      	ldr	r3, [r1, #16]
    1e76:	9000      	str	r0, [sp, #0]
    1e78:	000c      	movs	r4, r1
    1e7a:	4293      	cmp	r3, r2
    1e7c:	da00      	bge.n	1e80 <_printf_common+0x14>
    1e7e:	0013      	movs	r3, r2
    1e80:	0022      	movs	r2, r4
    1e82:	602b      	str	r3, [r5, #0]
    1e84:	3243      	adds	r2, #67	; 0x43
    1e86:	7812      	ldrb	r2, [r2, #0]
    1e88:	b10a      	cbz	r2, 1e8e <_printf_common+0x22>
    1e8a:	3301      	adds	r3, #1
    1e8c:	602b      	str	r3, [r5, #0]
    1e8e:	6823      	ldr	r3, [r4, #0]
    1e90:	069b      	lsls	r3, r3, #26
    1e92:	d502      	bpl.n	1e9a <_printf_common+0x2e>
    1e94:	682b      	ldr	r3, [r5, #0]
    1e96:	3302      	adds	r3, #2
    1e98:	602b      	str	r3, [r5, #0]
    1e9a:	2706      	movs	r7, #6
    1e9c:	6823      	ldr	r3, [r4, #0]
    1e9e:	401f      	ands	r7, r3
    1ea0:	b33f      	cbz	r7, 1ef2 <_printf_common+0x86>
    1ea2:	0023      	movs	r3, r4
    1ea4:	3343      	adds	r3, #67	; 0x43
    1ea6:	781b      	ldrb	r3, [r3, #0]
    1ea8:	1e5a      	subs	r2, r3, #1
    1eaa:	4193      	sbcs	r3, r2
    1eac:	6822      	ldr	r2, [r4, #0]
    1eae:	0692      	lsls	r2, r2, #26
    1eb0:	d430      	bmi.n	1f14 <_printf_common+0xa8>
    1eb2:	0022      	movs	r2, r4
    1eb4:	9901      	ldr	r1, [sp, #4]
    1eb6:	3243      	adds	r2, #67	; 0x43
    1eb8:	9800      	ldr	r0, [sp, #0]
    1eba:	9e08      	ldr	r6, [sp, #32]
    1ebc:	47b0      	blx	r6
    1ebe:	1c43      	adds	r3, r0, #1
    1ec0:	d025      	beq.n	1f0e <_printf_common+0xa2>
    1ec2:	2306      	movs	r3, #6
    1ec4:	6820      	ldr	r0, [r4, #0]
    1ec6:	682a      	ldr	r2, [r5, #0]
    1ec8:	68e1      	ldr	r1, [r4, #12]
    1eca:	4003      	ands	r3, r0
    1ecc:	2500      	movs	r5, #0
    1ece:	2b04      	cmp	r3, #4
    1ed0:	d103      	bne.n	1eda <_printf_common+0x6e>
    1ed2:	1a8d      	subs	r5, r1, r2
    1ed4:	43eb      	mvns	r3, r5
    1ed6:	17db      	asrs	r3, r3, #31
    1ed8:	401d      	ands	r5, r3
    1eda:	68a3      	ldr	r3, [r4, #8]
    1edc:	6922      	ldr	r2, [r4, #16]
    1ede:	4293      	cmp	r3, r2
    1ee0:	dd01      	ble.n	1ee6 <_printf_common+0x7a>
    1ee2:	1a9b      	subs	r3, r3, r2
    1ee4:	18ed      	adds	r5, r5, r3
    1ee6:	2700      	movs	r7, #0
    1ee8:	42bd      	cmp	r5, r7
    1eea:	d120      	bne.n	1f2e <_printf_common+0xc2>
    1eec:	2000      	movs	r0, #0
    1eee:	e010      	b.n	1f12 <_printf_common+0xa6>
    1ef0:	3701      	adds	r7, #1
    1ef2:	68e3      	ldr	r3, [r4, #12]
    1ef4:	682a      	ldr	r2, [r5, #0]
    1ef6:	1a9b      	subs	r3, r3, r2
    1ef8:	429f      	cmp	r7, r3
    1efa:	dad2      	bge.n	1ea2 <_printf_common+0x36>
    1efc:	0022      	movs	r2, r4
    1efe:	2301      	movs	r3, #1
    1f00:	3219      	adds	r2, #25
    1f02:	9901      	ldr	r1, [sp, #4]
    1f04:	9800      	ldr	r0, [sp, #0]
    1f06:	9e08      	ldr	r6, [sp, #32]
    1f08:	47b0      	blx	r6
    1f0a:	1c43      	adds	r3, r0, #1
    1f0c:	d1f0      	bne.n	1ef0 <_printf_common+0x84>
    1f0e:	2001      	movs	r0, #1
    1f10:	4240      	negs	r0, r0
    1f12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f14:	2030      	movs	r0, #48	; 0x30
    1f16:	18e1      	adds	r1, r4, r3
    1f18:	3143      	adds	r1, #67	; 0x43
    1f1a:	7008      	strb	r0, [r1, #0]
    1f1c:	0021      	movs	r1, r4
    1f1e:	1c5a      	adds	r2, r3, #1
    1f20:	3145      	adds	r1, #69	; 0x45
    1f22:	7809      	ldrb	r1, [r1, #0]
    1f24:	18a2      	adds	r2, r4, r2
    1f26:	3243      	adds	r2, #67	; 0x43
    1f28:	3302      	adds	r3, #2
    1f2a:	7011      	strb	r1, [r2, #0]
    1f2c:	e7c1      	b.n	1eb2 <_printf_common+0x46>
    1f2e:	0022      	movs	r2, r4
    1f30:	2301      	movs	r3, #1
    1f32:	321a      	adds	r2, #26
    1f34:	9901      	ldr	r1, [sp, #4]
    1f36:	9800      	ldr	r0, [sp, #0]
    1f38:	9e08      	ldr	r6, [sp, #32]
    1f3a:	47b0      	blx	r6
    1f3c:	1c43      	adds	r3, r0, #1
    1f3e:	d0e6      	beq.n	1f0e <_printf_common+0xa2>
    1f40:	3701      	adds	r7, #1
    1f42:	e7d1      	b.n	1ee8 <_printf_common+0x7c>

00001f44 <_printf_i>:
    1f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f46:	000e      	movs	r6, r1
    1f48:	b089      	sub	sp, #36	; 0x24
    1f4a:	9305      	str	r3, [sp, #20]
    1f4c:	9003      	str	r0, [sp, #12]
    1f4e:	9204      	str	r2, [sp, #16]
    1f50:	7e0a      	ldrb	r2, [r1, #24]
    1f52:	000c      	movs	r4, r1
    1f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f56:	3643      	adds	r6, #67	; 0x43
    1f58:	2a6e      	cmp	r2, #110	; 0x6e
    1f5a:	d100      	bne.n	1f5e <_printf_i+0x1a>
    1f5c:	e08b      	b.n	2076 <_printf_i+0x132>
    1f5e:	d817      	bhi.n	1f90 <_printf_i+0x4c>
    1f60:	2a63      	cmp	r2, #99	; 0x63
    1f62:	d02c      	beq.n	1fbe <_printf_i+0x7a>
    1f64:	d808      	bhi.n	1f78 <_printf_i+0x34>
    1f66:	2a00      	cmp	r2, #0
    1f68:	d100      	bne.n	1f6c <_printf_i+0x28>
    1f6a:	e095      	b.n	2098 <_printf_i+0x154>
    1f6c:	2a58      	cmp	r2, #88	; 0x58
    1f6e:	d065      	beq.n	203c <_printf_i+0xf8>
    1f70:	0025      	movs	r5, r4
    1f72:	3542      	adds	r5, #66	; 0x42
    1f74:	702a      	strb	r2, [r5, #0]
    1f76:	e029      	b.n	1fcc <_printf_i+0x88>
    1f78:	2a64      	cmp	r2, #100	; 0x64
    1f7a:	d001      	beq.n	1f80 <_printf_i+0x3c>
    1f7c:	2a69      	cmp	r2, #105	; 0x69
    1f7e:	d1f7      	bne.n	1f70 <_printf_i+0x2c>
    1f80:	6821      	ldr	r1, [r4, #0]
    1f82:	681a      	ldr	r2, [r3, #0]
    1f84:	0608      	lsls	r0, r1, #24
    1f86:	d523      	bpl.n	1fd0 <_printf_i+0x8c>
    1f88:	1d11      	adds	r1, r2, #4
    1f8a:	6019      	str	r1, [r3, #0]
    1f8c:	6813      	ldr	r3, [r2, #0]
    1f8e:	e025      	b.n	1fdc <_printf_i+0x98>
    1f90:	2a73      	cmp	r2, #115	; 0x73
    1f92:	d100      	bne.n	1f96 <_printf_i+0x52>
    1f94:	e084      	b.n	20a0 <_printf_i+0x15c>
    1f96:	d808      	bhi.n	1faa <_printf_i+0x66>
    1f98:	2a6f      	cmp	r2, #111	; 0x6f
    1f9a:	d027      	beq.n	1fec <_printf_i+0xa8>
    1f9c:	2a70      	cmp	r2, #112	; 0x70
    1f9e:	d1e7      	bne.n	1f70 <_printf_i+0x2c>
    1fa0:	2220      	movs	r2, #32
    1fa2:	6809      	ldr	r1, [r1, #0]
    1fa4:	430a      	orrs	r2, r1
    1fa6:	6022      	str	r2, [r4, #0]
    1fa8:	e003      	b.n	1fb2 <_printf_i+0x6e>
    1faa:	2a75      	cmp	r2, #117	; 0x75
    1fac:	d01e      	beq.n	1fec <_printf_i+0xa8>
    1fae:	2a78      	cmp	r2, #120	; 0x78
    1fb0:	d1de      	bne.n	1f70 <_printf_i+0x2c>
    1fb2:	0022      	movs	r2, r4
    1fb4:	2178      	movs	r1, #120	; 0x78
    1fb6:	3245      	adds	r2, #69	; 0x45
    1fb8:	7011      	strb	r1, [r2, #0]
    1fba:	4968      	ldr	r1, [pc, #416]	; (215c <_printf_i+0x218>)
    1fbc:	e041      	b.n	2042 <_printf_i+0xfe>
    1fbe:	000d      	movs	r5, r1
    1fc0:	681a      	ldr	r2, [r3, #0]
    1fc2:	3542      	adds	r5, #66	; 0x42
    1fc4:	1d11      	adds	r1, r2, #4
    1fc6:	6019      	str	r1, [r3, #0]
    1fc8:	6813      	ldr	r3, [r2, #0]
    1fca:	702b      	strb	r3, [r5, #0]
    1fcc:	2301      	movs	r3, #1
    1fce:	e074      	b.n	20ba <_printf_i+0x176>
    1fd0:	0649      	lsls	r1, r1, #25
    1fd2:	d5d9      	bpl.n	1f88 <_printf_i+0x44>
    1fd4:	1d11      	adds	r1, r2, #4
    1fd6:	6019      	str	r1, [r3, #0]
    1fd8:	2300      	movs	r3, #0
    1fda:	5ed3      	ldrsh	r3, [r2, r3]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	da02      	bge.n	1fe6 <_printf_i+0xa2>
    1fe0:	222d      	movs	r2, #45	; 0x2d
    1fe2:	425b      	negs	r3, r3
    1fe4:	7032      	strb	r2, [r6, #0]
    1fe6:	495e      	ldr	r1, [pc, #376]	; (2160 <_printf_i+0x21c>)
    1fe8:	220a      	movs	r2, #10
    1fea:	e015      	b.n	2018 <_printf_i+0xd4>
    1fec:	6820      	ldr	r0, [r4, #0]
    1fee:	6819      	ldr	r1, [r3, #0]
    1ff0:	0605      	lsls	r5, r0, #24
    1ff2:	d503      	bpl.n	1ffc <_printf_i+0xb8>
    1ff4:	1d08      	adds	r0, r1, #4
    1ff6:	6018      	str	r0, [r3, #0]
    1ff8:	680b      	ldr	r3, [r1, #0]
    1ffa:	e005      	b.n	2008 <_printf_i+0xc4>
    1ffc:	0640      	lsls	r0, r0, #25
    1ffe:	d5f9      	bpl.n	1ff4 <_printf_i+0xb0>
    2000:	1d08      	adds	r0, r1, #4
    2002:	6018      	str	r0, [r3, #0]
    2004:	680b      	ldr	r3, [r1, #0]
    2006:	b29b      	uxth	r3, r3
    2008:	4955      	ldr	r1, [pc, #340]	; (2160 <_printf_i+0x21c>)
    200a:	2a6f      	cmp	r2, #111	; 0x6f
    200c:	d131      	bne.n	2072 <_printf_i+0x12e>
    200e:	3a67      	subs	r2, #103	; 0x67
    2010:	0020      	movs	r0, r4
    2012:	2500      	movs	r5, #0
    2014:	3043      	adds	r0, #67	; 0x43
    2016:	7005      	strb	r5, [r0, #0]
    2018:	6860      	ldr	r0, [r4, #4]
    201a:	60a0      	str	r0, [r4, #8]
    201c:	2800      	cmp	r0, #0
    201e:	db72      	blt.n	2106 <_printf_i+0x1c2>
    2020:	2504      	movs	r5, #4
    2022:	6827      	ldr	r7, [r4, #0]
    2024:	43af      	bics	r7, r5
    2026:	6027      	str	r7, [r4, #0]
    2028:	2b00      	cmp	r3, #0
    202a:	d16e      	bne.n	210a <_printf_i+0x1c6>
    202c:	0035      	movs	r5, r6
    202e:	2800      	cmp	r0, #0
    2030:	d077      	beq.n	2122 <_printf_i+0x1de>
    2032:	0025      	movs	r5, r4
    2034:	780b      	ldrb	r3, [r1, #0]
    2036:	3542      	adds	r5, #66	; 0x42
    2038:	702b      	strb	r3, [r5, #0]
    203a:	e072      	b.n	2122 <_printf_i+0x1de>
    203c:	3145      	adds	r1, #69	; 0x45
    203e:	700a      	strb	r2, [r1, #0]
    2040:	4947      	ldr	r1, [pc, #284]	; (2160 <_printf_i+0x21c>)
    2042:	681a      	ldr	r2, [r3, #0]
    2044:	6820      	ldr	r0, [r4, #0]
    2046:	1d15      	adds	r5, r2, #4
    2048:	601d      	str	r5, [r3, #0]
    204a:	6813      	ldr	r3, [r2, #0]
    204c:	0605      	lsls	r5, r0, #24
    204e:	d50c      	bpl.n	206a <_printf_i+0x126>
    2050:	07c2      	lsls	r2, r0, #31
    2052:	d502      	bpl.n	205a <_printf_i+0x116>
    2054:	2220      	movs	r2, #32
    2056:	4310      	orrs	r0, r2
    2058:	6020      	str	r0, [r4, #0]
    205a:	2210      	movs	r2, #16
    205c:	2b00      	cmp	r3, #0
    205e:	d1d7      	bne.n	2010 <_printf_i+0xcc>
    2060:	2020      	movs	r0, #32
    2062:	6825      	ldr	r5, [r4, #0]
    2064:	4385      	bics	r5, r0
    2066:	6025      	str	r5, [r4, #0]
    2068:	e7d2      	b.n	2010 <_printf_i+0xcc>
    206a:	0645      	lsls	r5, r0, #25
    206c:	d5f0      	bpl.n	2050 <_printf_i+0x10c>
    206e:	b29b      	uxth	r3, r3
    2070:	e7ee      	b.n	2050 <_printf_i+0x10c>
    2072:	220a      	movs	r2, #10
    2074:	e7cc      	b.n	2010 <_printf_i+0xcc>
    2076:	6809      	ldr	r1, [r1, #0]
    2078:	681a      	ldr	r2, [r3, #0]
    207a:	0608      	lsls	r0, r1, #24
    207c:	d505      	bpl.n	208a <_printf_i+0x146>
    207e:	1d11      	adds	r1, r2, #4
    2080:	6019      	str	r1, [r3, #0]
    2082:	6813      	ldr	r3, [r2, #0]
    2084:	6962      	ldr	r2, [r4, #20]
    2086:	601a      	str	r2, [r3, #0]
    2088:	e006      	b.n	2098 <_printf_i+0x154>
    208a:	0649      	lsls	r1, r1, #25
    208c:	d5f7      	bpl.n	207e <_printf_i+0x13a>
    208e:	1d11      	adds	r1, r2, #4
    2090:	6019      	str	r1, [r3, #0]
    2092:	6813      	ldr	r3, [r2, #0]
    2094:	8aa2      	ldrh	r2, [r4, #20]
    2096:	801a      	strh	r2, [r3, #0]
    2098:	2300      	movs	r3, #0
    209a:	0035      	movs	r5, r6
    209c:	6123      	str	r3, [r4, #16]
    209e:	e04e      	b.n	213e <_printf_i+0x1fa>
    20a0:	681a      	ldr	r2, [r3, #0]
    20a2:	1d11      	adds	r1, r2, #4
    20a4:	6019      	str	r1, [r3, #0]
    20a6:	6815      	ldr	r5, [r2, #0]
    20a8:	2100      	movs	r1, #0
    20aa:	6862      	ldr	r2, [r4, #4]
    20ac:	0028      	movs	r0, r5
    20ae:	f000 f90b 	bl	22c8 <memchr>
    20b2:	b108      	cbz	r0, 20b8 <_printf_i+0x174>
    20b4:	1b40      	subs	r0, r0, r5
    20b6:	6060      	str	r0, [r4, #4]
    20b8:	6863      	ldr	r3, [r4, #4]
    20ba:	6123      	str	r3, [r4, #16]
    20bc:	2300      	movs	r3, #0
    20be:	7033      	strb	r3, [r6, #0]
    20c0:	e03d      	b.n	213e <_printf_i+0x1fa>
    20c2:	6923      	ldr	r3, [r4, #16]
    20c4:	002a      	movs	r2, r5
    20c6:	9904      	ldr	r1, [sp, #16]
    20c8:	9803      	ldr	r0, [sp, #12]
    20ca:	9d05      	ldr	r5, [sp, #20]
    20cc:	47a8      	blx	r5
    20ce:	1c43      	adds	r3, r0, #1
    20d0:	d03f      	beq.n	2152 <_printf_i+0x20e>
    20d2:	6823      	ldr	r3, [r4, #0]
    20d4:	2500      	movs	r5, #0
    20d6:	079b      	lsls	r3, r3, #30
    20d8:	d40f      	bmi.n	20fa <_printf_i+0x1b6>
    20da:	9b07      	ldr	r3, [sp, #28]
    20dc:	68e0      	ldr	r0, [r4, #12]
    20de:	4298      	cmp	r0, r3
    20e0:	da39      	bge.n	2156 <_printf_i+0x212>
    20e2:	0018      	movs	r0, r3
    20e4:	e037      	b.n	2156 <_printf_i+0x212>
    20e6:	0022      	movs	r2, r4
    20e8:	2301      	movs	r3, #1
    20ea:	3219      	adds	r2, #25
    20ec:	9904      	ldr	r1, [sp, #16]
    20ee:	9803      	ldr	r0, [sp, #12]
    20f0:	9e05      	ldr	r6, [sp, #20]
    20f2:	47b0      	blx	r6
    20f4:	1c43      	adds	r3, r0, #1
    20f6:	d02c      	beq.n	2152 <_printf_i+0x20e>
    20f8:	3501      	adds	r5, #1
    20fa:	68e3      	ldr	r3, [r4, #12]
    20fc:	9a07      	ldr	r2, [sp, #28]
    20fe:	1a9b      	subs	r3, r3, r2
    2100:	429d      	cmp	r5, r3
    2102:	dbf0      	blt.n	20e6 <_printf_i+0x1a2>
    2104:	e7e9      	b.n	20da <_printf_i+0x196>
    2106:	2b00      	cmp	r3, #0
    2108:	d093      	beq.n	2032 <_printf_i+0xee>
    210a:	0035      	movs	r5, r6
    210c:	fbb3 f0f2 	udiv	r0, r3, r2
    2110:	0017      	movs	r7, r2
    2112:	4347      	muls	r7, r0
    2114:	1bdb      	subs	r3, r3, r7
    2116:	5ccb      	ldrb	r3, [r1, r3]
    2118:	3d01      	subs	r5, #1
    211a:	702b      	strb	r3, [r5, #0]
    211c:	0003      	movs	r3, r0
    211e:	2800      	cmp	r0, #0
    2120:	d1f4      	bne.n	210c <_printf_i+0x1c8>
    2122:	2a08      	cmp	r2, #8
    2124:	d109      	bne.n	213a <_printf_i+0x1f6>
    2126:	6823      	ldr	r3, [r4, #0]
    2128:	07db      	lsls	r3, r3, #31
    212a:	d506      	bpl.n	213a <_printf_i+0x1f6>
    212c:	6863      	ldr	r3, [r4, #4]
    212e:	6922      	ldr	r2, [r4, #16]
    2130:	4293      	cmp	r3, r2
    2132:	dc02      	bgt.n	213a <_printf_i+0x1f6>
    2134:	2330      	movs	r3, #48	; 0x30
    2136:	3d01      	subs	r5, #1
    2138:	702b      	strb	r3, [r5, #0]
    213a:	1b76      	subs	r6, r6, r5
    213c:	6126      	str	r6, [r4, #16]
    213e:	9b05      	ldr	r3, [sp, #20]
    2140:	aa07      	add	r2, sp, #28
    2142:	9300      	str	r3, [sp, #0]
    2144:	0021      	movs	r1, r4
    2146:	9b04      	ldr	r3, [sp, #16]
    2148:	9803      	ldr	r0, [sp, #12]
    214a:	f7ff fe8f 	bl	1e6c <_printf_common>
    214e:	1c43      	adds	r3, r0, #1
    2150:	d1b7      	bne.n	20c2 <_printf_i+0x17e>
    2152:	2001      	movs	r0, #1
    2154:	4240      	negs	r0, r0
    2156:	b009      	add	sp, #36	; 0x24
    2158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	00002436 	.word	0x00002436
    2160:	00002425 	.word	0x00002425

00002164 <_sbrk_r>:
    2164:	2300      	movs	r3, #0
    2166:	b570      	push	{r4, r5, r6, lr}
    2168:	4c05      	ldr	r4, [pc, #20]	; (2180 <_sbrk_r+0x1c>)
    216a:	0005      	movs	r5, r0
    216c:	0008      	movs	r0, r1
    216e:	6023      	str	r3, [r4, #0]
    2170:	f7fe fa76 	bl	660 <_sbrk>
    2174:	1c43      	adds	r3, r0, #1
    2176:	d102      	bne.n	217e <_sbrk_r+0x1a>
    2178:	6823      	ldr	r3, [r4, #0]
    217a:	b103      	cbz	r3, 217e <_sbrk_r+0x1a>
    217c:	602b      	str	r3, [r5, #0]
    217e:	bd70      	pop	{r4, r5, r6, pc}
    2180:	2000150c 	.word	0x2000150c

00002184 <__sread>:
    2184:	b570      	push	{r4, r5, r6, lr}
    2186:	000c      	movs	r4, r1
    2188:	250e      	movs	r5, #14
    218a:	5f49      	ldrsh	r1, [r1, r5]
    218c:	f000 f8aa 	bl	22e4 <_read_r>
    2190:	2800      	cmp	r0, #0
    2192:	db03      	blt.n	219c <__sread+0x18>
    2194:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2196:	181b      	adds	r3, r3, r0
    2198:	6563      	str	r3, [r4, #84]	; 0x54
    219a:	bd70      	pop	{r4, r5, r6, pc}
    219c:	89a3      	ldrh	r3, [r4, #12]
    219e:	4a02      	ldr	r2, [pc, #8]	; (21a8 <__sread+0x24>)
    21a0:	4013      	ands	r3, r2
    21a2:	81a3      	strh	r3, [r4, #12]
    21a4:	e7f9      	b.n	219a <__sread+0x16>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	ffffefff 	.word	0xffffefff

000021ac <__swrite>:
    21ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ae:	001f      	movs	r7, r3
    21b0:	898b      	ldrh	r3, [r1, #12]
    21b2:	0005      	movs	r5, r0
    21b4:	000c      	movs	r4, r1
    21b6:	0016      	movs	r6, r2
    21b8:	05db      	lsls	r3, r3, #23
    21ba:	d505      	bpl.n	21c8 <__swrite+0x1c>
    21bc:	230e      	movs	r3, #14
    21be:	5ec9      	ldrsh	r1, [r1, r3]
    21c0:	2200      	movs	r2, #0
    21c2:	2302      	movs	r3, #2
    21c4:	f000 f86e 	bl	22a4 <_lseek_r>
    21c8:	89a3      	ldrh	r3, [r4, #12]
    21ca:	4a05      	ldr	r2, [pc, #20]	; (21e0 <__swrite+0x34>)
    21cc:	0028      	movs	r0, r5
    21ce:	4013      	ands	r3, r2
    21d0:	81a3      	strh	r3, [r4, #12]
    21d2:	0032      	movs	r2, r6
    21d4:	230e      	movs	r3, #14
    21d6:	5ee1      	ldrsh	r1, [r4, r3]
    21d8:	003b      	movs	r3, r7
    21da:	f000 f81f 	bl	221c <_write_r>
    21de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21e0:	ffffefff 	.word	0xffffefff

000021e4 <__sseek>:
    21e4:	b570      	push	{r4, r5, r6, lr}
    21e6:	000c      	movs	r4, r1
    21e8:	250e      	movs	r5, #14
    21ea:	5f49      	ldrsh	r1, [r1, r5]
    21ec:	f000 f85a 	bl	22a4 <_lseek_r>
    21f0:	89a3      	ldrh	r3, [r4, #12]
    21f2:	1c42      	adds	r2, r0, #1
    21f4:	d103      	bne.n	21fe <__sseek+0x1a>
    21f6:	4a05      	ldr	r2, [pc, #20]	; (220c <__sseek+0x28>)
    21f8:	4013      	ands	r3, r2
    21fa:	81a3      	strh	r3, [r4, #12]
    21fc:	bd70      	pop	{r4, r5, r6, pc}
    21fe:	f241 0200 	movw	r2, #4096	; 0x1000
    2202:	4313      	orrs	r3, r2
    2204:	81a3      	strh	r3, [r4, #12]
    2206:	6560      	str	r0, [r4, #84]	; 0x54
    2208:	e7f8      	b.n	21fc <__sseek+0x18>
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	ffffefff 	.word	0xffffefff

00002210 <__sclose>:
    2210:	b510      	push	{r4, lr}
    2212:	230e      	movs	r3, #14
    2214:	5ec9      	ldrsh	r1, [r1, r3]
    2216:	f000 f813 	bl	2240 <_close_r>
    221a:	bd10      	pop	{r4, pc}

0000221c <_write_r>:
    221c:	b570      	push	{r4, r5, r6, lr}
    221e:	0005      	movs	r5, r0
    2220:	0008      	movs	r0, r1
    2222:	0011      	movs	r1, r2
    2224:	2200      	movs	r2, #0
    2226:	4c05      	ldr	r4, [pc, #20]	; (223c <_write_r+0x20>)
    2228:	6022      	str	r2, [r4, #0]
    222a:	001a      	movs	r2, r3
    222c:	f7fe ff9f 	bl	116e <_write>
    2230:	1c43      	adds	r3, r0, #1
    2232:	d102      	bne.n	223a <_write_r+0x1e>
    2234:	6823      	ldr	r3, [r4, #0]
    2236:	b103      	cbz	r3, 223a <_write_r+0x1e>
    2238:	602b      	str	r3, [r5, #0]
    223a:	bd70      	pop	{r4, r5, r6, pc}
    223c:	2000150c 	.word	0x2000150c

00002240 <_close_r>:
    2240:	2300      	movs	r3, #0
    2242:	b570      	push	{r4, r5, r6, lr}
    2244:	4c05      	ldr	r4, [pc, #20]	; (225c <_close_r+0x1c>)
    2246:	0005      	movs	r5, r0
    2248:	0008      	movs	r0, r1
    224a:	6023      	str	r3, [r4, #0]
    224c:	f7fe fa21 	bl	692 <_close>
    2250:	1c43      	adds	r3, r0, #1
    2252:	d102      	bne.n	225a <_close_r+0x1a>
    2254:	6823      	ldr	r3, [r4, #0]
    2256:	b103      	cbz	r3, 225a <_close_r+0x1a>
    2258:	602b      	str	r3, [r5, #0]
    225a:	bd70      	pop	{r4, r5, r6, pc}
    225c:	2000150c 	.word	0x2000150c

00002260 <_fstat_r>:
    2260:	2300      	movs	r3, #0
    2262:	b570      	push	{r4, r5, r6, lr}
    2264:	4c06      	ldr	r4, [pc, #24]	; (2280 <_fstat_r+0x20>)
    2266:	0005      	movs	r5, r0
    2268:	0008      	movs	r0, r1
    226a:	0011      	movs	r1, r2
    226c:	6023      	str	r3, [r4, #0]
    226e:	f7fe fa13 	bl	698 <_fstat>
    2272:	1c43      	adds	r3, r0, #1
    2274:	d102      	bne.n	227c <_fstat_r+0x1c>
    2276:	6823      	ldr	r3, [r4, #0]
    2278:	b103      	cbz	r3, 227c <_fstat_r+0x1c>
    227a:	602b      	str	r3, [r5, #0]
    227c:	bd70      	pop	{r4, r5, r6, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	2000150c 	.word	0x2000150c

00002284 <_isatty_r>:
    2284:	2300      	movs	r3, #0
    2286:	b570      	push	{r4, r5, r6, lr}
    2288:	4c05      	ldr	r4, [pc, #20]	; (22a0 <_isatty_r+0x1c>)
    228a:	0005      	movs	r5, r0
    228c:	0008      	movs	r0, r1
    228e:	6023      	str	r3, [r4, #0]
    2290:	f7fe fa07 	bl	6a2 <_isatty>
    2294:	1c43      	adds	r3, r0, #1
    2296:	d102      	bne.n	229e <_isatty_r+0x1a>
    2298:	6823      	ldr	r3, [r4, #0]
    229a:	b103      	cbz	r3, 229e <_isatty_r+0x1a>
    229c:	602b      	str	r3, [r5, #0]
    229e:	bd70      	pop	{r4, r5, r6, pc}
    22a0:	2000150c 	.word	0x2000150c

000022a4 <_lseek_r>:
    22a4:	b570      	push	{r4, r5, r6, lr}
    22a6:	0005      	movs	r5, r0
    22a8:	0008      	movs	r0, r1
    22aa:	0011      	movs	r1, r2
    22ac:	2200      	movs	r2, #0
    22ae:	4c05      	ldr	r4, [pc, #20]	; (22c4 <_lseek_r+0x20>)
    22b0:	6022      	str	r2, [r4, #0]
    22b2:	001a      	movs	r2, r3
    22b4:	f7fe f9f7 	bl	6a6 <_lseek>
    22b8:	1c43      	adds	r3, r0, #1
    22ba:	d102      	bne.n	22c2 <_lseek_r+0x1e>
    22bc:	6823      	ldr	r3, [r4, #0]
    22be:	b103      	cbz	r3, 22c2 <_lseek_r+0x1e>
    22c0:	602b      	str	r3, [r5, #0]
    22c2:	bd70      	pop	{r4, r5, r6, pc}
    22c4:	2000150c 	.word	0x2000150c

000022c8 <memchr>:
    22c8:	b2c9      	uxtb	r1, r1
    22ca:	1882      	adds	r2, r0, r2
    22cc:	4290      	cmp	r0, r2
    22ce:	d101      	bne.n	22d4 <memchr+0xc>
    22d0:	2000      	movs	r0, #0
    22d2:	4770      	bx	lr
    22d4:	7803      	ldrb	r3, [r0, #0]
    22d6:	428b      	cmp	r3, r1
    22d8:	d0fb      	beq.n	22d2 <memchr+0xa>
    22da:	3001      	adds	r0, #1
    22dc:	e7f6      	b.n	22cc <memchr+0x4>

000022de <__malloc_lock>:
    22de:	4770      	bx	lr

000022e0 <__malloc_unlock>:
    22e0:	4770      	bx	lr
	...

000022e4 <_read_r>:
    22e4:	b570      	push	{r4, r5, r6, lr}
    22e6:	0005      	movs	r5, r0
    22e8:	0008      	movs	r0, r1
    22ea:	0011      	movs	r1, r2
    22ec:	2200      	movs	r2, #0
    22ee:	4c05      	ldr	r4, [pc, #20]	; (2304 <_read_r+0x20>)
    22f0:	6022      	str	r2, [r4, #0]
    22f2:	001a      	movs	r2, r3
    22f4:	f7fe ff28 	bl	1148 <_read>
    22f8:	1c43      	adds	r3, r0, #1
    22fa:	d102      	bne.n	2302 <_read_r+0x1e>
    22fc:	6823      	ldr	r3, [r4, #0]
    22fe:	b103      	cbz	r3, 2302 <_read_r+0x1e>
    2300:	602b      	str	r3, [r5, #0]
    2302:	bd70      	pop	{r4, r5, r6, pc}
    2304:	2000150c 	.word	0x2000150c
    2308:	682f2e2e 	.word	0x682f2e2e
    230c:	732f6c61 	.word	0x732f6c61
    2310:	682f6372 	.word	0x682f6372
    2314:	695f6c61 	.word	0x695f6c61
    2318:	00632e6f 	.word	0x00632e6f
    231c:	682f2e2e 	.word	0x682f2e2e
    2320:	732f6c61 	.word	0x732f6c61
    2324:	682f6372 	.word	0x682f6372
    2328:	755f6c61 	.word	0x755f6c61
    232c:	74726173 	.word	0x74726173
    2330:	6e79735f 	.word	0x6e79735f
    2334:	00632e63 	.word	0x00632e63
    2338:	42000400 	.word	0x42000400
    233c:	42000800 	.word	0x42000800
    2340:	42000c00 	.word	0x42000c00

00002344 <_i2cms>:
	...
    235c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    236c:	65735f6c 6d6f6372 0000632e 206d206c     l_sercom.c..l m 
    237c:	74736574 646f6d20 20656c75 7020666f     test module of p
    238c:	0d676e69 00000000 206d206c 74736574     ing.....l m test
    239c:	646f6d20 20656c75 7020666f 0d676e6f      module of pong.
    23ac:	00000000                                ....

000023b0 <_global_impure_ptr>:
    23b0:	20000010                                ... 

000023b4 <__sf_fake_stderr>:
	...

000023d4 <__sf_fake_stdin>:
	...

000023f4 <__sf_fake_stdout>:
	...
    2414:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2424:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2434:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2444:	00006665                                ef..

00002448 <_init>:
    2448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    244e:	bc08      	pop	{r3}
    2450:	469e      	mov	lr, r3
    2452:	4770      	bx	lr

00002454 <__init_array_start>:
    2454:	00000265 	.word	0x00000265

00002458 <_fini>:
    2458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    245e:	bc08      	pop	{r3}
    2460:	469e      	mov	lr, r3
    2462:	4770      	bx	lr

00002464 <__fini_array_start>:
    2464:	00000239 	.word	0x00000239

Disassembly of section .gnu.sgstubs:

00007c00 <SecureInit_DePrioritizeNSExceptions>:
    7c00:	e97f e97f 	sg
    7c04:	f7f9 ba63 	b.w	10ce <__acle_se_SecureInit_DePrioritizeNSExceptions>

00007c08 <SecureContext_AllocateContext>:
    7c08:	e97f e97f 	sg
    7c0c:	f7f8 ba85 	b.w	11a <__acle_se_SecureContext_AllocateContext>

00007c10 <nsc_func_plus3>:
    7c10:	e97f e97f 	sg
    7c14:	f7f8 bae0 	b.w	1d8 <__acle_se_nsc_func_plus3>

00007c18 <nsc_func_minus2>:
    7c18:	e97f e97f 	sg
    7c1c:	f7f8 baec 	b.w	1f8 <__acle_se_nsc_func_minus2>

00007c20 <nsc_printf>:
    7c20:	e97f e97f 	sg
    7c24:	f7f8 baf8 	b.w	218 <__acle_se_nsc_printf>

00007c28 <SecureContext_Init>:
    7c28:	e97f e97f 	sg
    7c2c:	f7f8 ba62 	b.w	f4 <__acle_se_SecureContext_Init>

00007c30 <SecureContext_LoadContext>:
    7c30:	e97f e97f 	sg
    7c34:	f7f9 b924 	b.w	e80 <__acle_se_SecureContext_LoadContext>

00007c38 <SecureContext_SaveContext>:
    7c38:	e97f e97f 	sg
    7c3c:	f7f9 b931 	b.w	ea2 <__acle_se_SecureContext_SaveContext>

00007c40 <nsc_invoke_command>:
    7c40:	e97f e97f 	sg
    7c44:	f7f8 bab5 	b.w	1b2 <__acle_se_nsc_invoke_command>

00007c48 <SecureInit_EnableNSFPUAccess>:
    7c48:	e97f e97f 	sg
    7c4c:	f7f9 ba58 	b.w	1100 <__acle_se_SecureInit_EnableNSFPUAccess>

00007c50 <SecureContext_FreeContext>:
    7c50:	e97f e97f 	sg
    7c54:	f7f8 ba8e 	b.w	174 <__acle_se_SecureContext_FreeContext>
	...
