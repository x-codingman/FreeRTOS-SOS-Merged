
FreeRTOS-2-S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000241c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000060  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     0000006c  20000000  0000241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001494  2000006c  00002488  0002006c  2**2
                  ALLOC
  4 .heap         00000200  20001500  0000391c  0002006c  2**0
                  ALLOC
  5 .stack        00000400  20001700  00003b1c  0002006c  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d3ec  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003762  00000000  00000000  00051491  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a56d  00000000  00000000  00054bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a58  00000000  00000000  0005f160  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e88  00000000  00000000  0005fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001d1a2  00000000  00000000  00060a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f8d9  00000000  00000000  0007dbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000919df  00000000  00000000  0008d4bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001fe4  00000000  00000000  0011ee9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 1b 00 20 dd 02 00 00 db 02 00 00 db 02 00 00     ... ............
	...
      2c:	31 0d 00 00 00 00 00 00 00 00 00 00 db 02 00 00     1...............
      3c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      4c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      5c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      6c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      7c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      8c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      9c:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      ac:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      bc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      cc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      dc:	db 02 00 00 db 02 00 00 db 02 00 00 db 02 00 00     ................
      ec:	db 02 00 00 db 02 00 00                             ........

000000f4 <__acle_se_SecureContext_Init>:
secureportNON_SECURE_CALLABLE void SecureContext_Init( void )
{
	uint32_t ulIPSR;

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
      f4:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
      f8:	b13b      	cbz	r3, 10a <__acle_se_SecureContext_Init+0x16>
	{
		/* No stack for thread mode until a task's context is loaded. */
		secureportSET_PSPLIM( securecontextNO_STACK );
      fa:	2300      	movs	r3, #0
      fc:	f383 880b 	msr	PSPLIM, r3
		secureportSET_PSP( securecontextNO_STACK );
     100:	f383 8809 	msr	PSP, r3
			secureportSET_CONTROL( securecontextCONTROL_VALUE_UNPRIVILEGED );
		}
		#else /* configENABLE_MPU */
		{
			/* Configure thread mode to use PSP and to be privileged.. */
			secureportSET_CONTROL( securecontextCONTROL_VALUE_PRIVILEGED );
     104:	3302      	adds	r3, #2
     106:	f383 8814 	msr	CONTROL, r3
		}
		#endif /* configENABLE_MPU */
	}
}
     10a:	2000      	movs	r0, #0
     10c:	0001      	movs	r1, r0
     10e:	0002      	movs	r2, r0
     110:	0003      	movs	r3, r0
     112:	4684      	mov	ip, r0
     114:	f38e 8800 	msr	CPSR_f, lr
     118:	4774      	bxns	lr

0000011a <__acle_se_SecureContext_AllocateContext>:
#if( configENABLE_MPU == 1 )
	secureportNON_SECURE_CALLABLE SecureContextHandle_t SecureContext_AllocateContext( uint32_t ulSecureStackSize, uint32_t ulIsTaskPrivileged )
#else /* configENABLE_MPU */
	secureportNON_SECURE_CALLABLE SecureContextHandle_t SecureContext_AllocateContext( uint32_t ulSecureStackSize )
#endif /* configENABLE_MPU */
{
     11a:	b570      	push	{r4, r5, r6, lr}
     11c:	0005      	movs	r5, r0
	#if( configENABLE_MPU == 1 )
		uint32_t *pulCurrentStackPointer = NULL;
	#endif /* configENABLE_MPU */

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
     11e:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
     122:	b32b      	cbz	r3, 170 <__acle_se_SecureContext_AllocateContext+0x56>
	{
		/* Allocate the context structure. */
		xSecureContextHandle = ( SecureContextHandle_t ) pvPortMalloc( sizeof( SecureContext_t ) );
     124:	200c      	movs	r0, #12
     126:	f640 63d3 	movw	r3, #3795	; 0xed3
     12a:	f2c0 0300 	movt	r3, #0
     12e:	4798      	blx	r3
     130:	0004      	movs	r4, r0

		if( xSecureContextHandle != NULL )
     132:	b150      	cbz	r0, 14a <__acle_se_SecureContext_AllocateContext+0x30>
		{
			/* Allocate the stack space. */
			pucStackMemory = pvPortMalloc( ulSecureStackSize );
     134:	0028      	movs	r0, r5
     136:	f640 63d3 	movw	r3, #3795	; 0xed3
     13a:	f2c0 0300 	movt	r3, #0
     13e:	4798      	blx	r3

			if( pucStackMemory != NULL )
     140:	b170      	cbz	r0, 160 <__acle_se_SecureContext_AllocateContext+0x46>
				 * location. Note that this location is next to the last
				 * allocated byte because the hardware decrements the stack
				 * pointer before writing i.e. if stack pointer is 0x2, a push
				 * operation will decrement the stack pointer to 0x1 and then
				 * write at 0x1. */
				xSecureContextHandle->pucStackStart = pucStackMemory + ulSecureStackSize;
     142:	1945      	adds	r5, r0, r5
     144:	60a5      	str	r5, [r4, #8]

				/* The stack cannot go beyond this location. This value is
				 * programmed in the PSPLIM register on context switch.*/
				xSecureContextHandle->pucStackLimit = pucStackMemory;
     146:	6060      	str	r0, [r4, #4]
				}
				#else /* configENABLE_MPU */
				{
					/* Current SP is set to the starting of the stack. This
					 * value programmed in the PSP register on context switch. */
					xSecureContextHandle->pucCurrentStackPointer = xSecureContextHandle->pucStackStart;
     148:	6025      	str	r5, [r4, #0]
			}
		}
	}

	return xSecureContextHandle;
}
     14a:	0020      	movs	r0, r4
     14c:	0001      	movs	r1, r0
     14e:	0002      	movs	r2, r0
     150:	0003      	movs	r3, r0
     152:	4684      	mov	ip, r0
     154:	bc70      	pop	{r4, r5, r6}
     156:	bc02      	pop	{r1}
     158:	4686      	mov	lr, r0
     15a:	f381 8800 	msr	CPSR_f, r1
     15e:	470c      	bxns	r1
				vPortFree( xSecureContextHandle );
     160:	0020      	movs	r0, r4
     162:	f241 0319 	movw	r3, #4121	; 0x1019
     166:	f2c0 0300 	movt	r3, #0
     16a:	4798      	blx	r3
				xSecureContextHandle = NULL;
     16c:	2400      	movs	r4, #0
     16e:	e7ec      	b.n	14a <__acle_se_SecureContext_AllocateContext+0x30>
	SecureContextHandle_t xSecureContextHandle = NULL;
     170:	2400      	movs	r4, #0
	return xSecureContextHandle;
     172:	e7ea      	b.n	14a <__acle_se_SecureContext_AllocateContext+0x30>

00000174 <__acle_se_SecureContext_FreeContext>:
/*-----------------------------------------------------------*/

secureportNON_SECURE_CALLABLE void SecureContext_FreeContext( SecureContextHandle_t xSecureContextHandle )
{
     174:	b570      	push	{r4, r5, r6, lr}
     176:	0005      	movs	r5, r0
	uint32_t ulIPSR;

	/* Read the Interrupt Program Status Register (IPSR) value. */
	secureportREAD_IPSR( ulIPSR );
     178:	f3ef 8305 	mrs	r3, IPSR

	/* Do nothing if the processor is running in the Thread Mode. IPSR is zero
	 * when the processor is running in the Thread Mode. */
	if( ulIPSR != 0 )
     17c:	b143      	cbz	r3, 190 <__acle_se_SecureContext_FreeContext+0x1c>
	{
		/* Ensure that valid parameters are passed. */
		secureportASSERT( xSecureContextHandle != NULL );
     17e:	b190      	cbz	r0, 1a6 <__acle_se_SecureContext_FreeContext+0x32>

		/* Free the stack space. */
		vPortFree( xSecureContextHandle->pucStackLimit );
     180:	6840      	ldr	r0, [r0, #4]
     182:	f241 0419 	movw	r4, #4121	; 0x1019
     186:	f2c0 0400 	movt	r4, #0
     18a:	47a0      	blx	r4

		/* Free the context itself. */
		vPortFree( xSecureContextHandle );
     18c:	0028      	movs	r0, r5
     18e:	47a0      	blx	r4
	}
}
     190:	2000      	movs	r0, #0
     192:	0001      	movs	r1, r0
     194:	0002      	movs	r2, r0
     196:	0003      	movs	r3, r0
     198:	4684      	mov	ip, r0
     19a:	bc70      	pop	{r4, r5, r6}
     19c:	bc01      	pop	{r0}
     19e:	4686      	mov	lr, r0
     1a0:	f380 8800 	msr	CPSR_f, r0
     1a4:	4704      	bxns	r0
		secureportASSERT( xSecureContextHandle != NULL );
     1a6:	2301      	movs	r3, #1
     1a8:	f383 8810 	msr	PRIMASK, r3
     1ac:	f383 8890 	msr	PRIMASK_NS, r3
     1b0:	e7fe      	b.n	1b0 <__acle_se_SecureContext_FreeContext+0x3c>

000001b2 <__acle_se_nsc_invoke_command>:
/* sos kernel callable functions */
secureportNON_SECURE_CALLABLE int nsc_invoke_command(
uint32_t module_id,
uint32_t command_id,
uint32_t *operation
){
     1b2:	b500      	push	{lr}
     1b4:	b083      	sub	sp, #12
     1b6:	9201      	str	r2, [sp, #4]
	return syscall_nsc_call_module((uint32_t) module_id,(uint32_t) command_id,(SOS_Operation_t*)(&operation));
     1b8:	aa01      	add	r2, sp, #4
     1ba:	f640 5375 	movw	r3, #3445	; 0xd75
     1be:	f2c0 0300 	movt	r3, #0
     1c2:	4798      	blx	r3
}
     1c4:	b003      	add	sp, #12
     1c6:	0001      	movs	r1, r0
     1c8:	0002      	movs	r2, r0
     1ca:	0003      	movs	r3, r0
     1cc:	4684      	mov	ip, r0
     1ce:	bc02      	pop	{r1}
     1d0:	4686      	mov	lr, r0
     1d2:	f381 8800 	msr	CPSR_f, r1
     1d6:	470c      	bxns	r1

000001d8 <__acle_se_nsc_func_plus3>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_plus3(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_func_plus3(int x)
#endif
{
     1d8:	b510      	push	{r4, lr}
	return func_plus3(x);
     1da:	f640 53f1 	movw	r3, #3569	; 0xdf1
     1de:	f2c0 0300 	movt	r3, #0
     1e2:	4798      	blx	r3
}
     1e4:	0001      	movs	r1, r0
     1e6:	0002      	movs	r2, r0
     1e8:	0003      	movs	r3, r0
     1ea:	4684      	mov	ip, r0
     1ec:	bc10      	pop	{r4}
     1ee:	bc02      	pop	{r1}
     1f0:	4686      	mov	lr, r0
     1f2:	f381 8800 	msr	CPSR_f, r1
     1f6:	470c      	bxns	r1

000001f8 <__acle_se_nsc_func_minus2>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_minus2(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_func_minus2(int x)
#endif
{
     1f8:	b510      	push	{r4, lr}
	return func_minus2(x);
     1fa:	f640 53f5 	movw	r3, #3573	; 0xdf5
     1fe:	f2c0 0300 	movt	r3, #0
     202:	4798      	blx	r3
}
     204:	0001      	movs	r1, r0
     206:	0002      	movs	r2, r0
     208:	0003      	movs	r3, r0
     20a:	4684      	mov	ip, r0
     20c:	bc10      	pop	{r4}
     20e:	bc02      	pop	{r1}
     210:	4686      	mov	lr, r0
     212:	f381 8800 	msr	CPSR_f, r1
     216:	470c      	bxns	r1

00000218 <__acle_se_nsc_printf>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int nsc_func_minus2(int x)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int __attribute__((cmse_nonsecure_entry)) nsc_printf(char * str)
#endif
{
     218:	b510      	push	{r4, lr}
	return printf(str);
     21a:	f241 237d 	movw	r3, #4733	; 0x127d
     21e:	f2c0 0300 	movt	r3, #0
     222:	4798      	blx	r3
     224:	0001      	movs	r1, r0
     226:	0002      	movs	r2, r0
     228:	0003      	movs	r3, r0
     22a:	4684      	mov	ip, r0
     22c:	bc10      	pop	{r4}
     22e:	bc02      	pop	{r1}
     230:	4686      	mov	lr, r0
     232:	f381 8800 	msr	CPSR_f, r1
     236:	470c      	bxns	r1

00000238 <__do_global_dtors_aux>:
     238:	b510      	push	{r4, lr}
     23a:	f240 046c 	movw	r4, #108	; 0x6c
     23e:	f2c2 0400 	movt	r4, #8192	; 0x2000
     242:	7823      	ldrb	r3, [r4, #0]
     244:	b963      	cbnz	r3, 260 <__do_global_dtors_aux+0x28>
     246:	f240 0300 	movw	r3, #0
     24a:	f2c0 0300 	movt	r3, #0
     24e:	b12b      	cbz	r3, 25c <__do_global_dtors_aux+0x24>
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c0 0080 	movt	r0, #128	; 0x80
     258:	e000      	b.n	25c <__do_global_dtors_aux+0x24>
     25a:	bf00      	nop
     25c:	2301      	movs	r3, #1
     25e:	7023      	strb	r3, [r4, #0]
     260:	bd10      	pop	{r4, pc}
     262:	46c0      	nop			; (mov r8, r8)

00000264 <frame_dummy>:
     264:	f240 0300 	movw	r3, #0
     268:	f2c0 0300 	movt	r3, #0
     26c:	b510      	push	{r4, lr}
     26e:	b14b      	cbz	r3, 284 <frame_dummy+0x20>
     270:	f240 0170 	movw	r1, #112	; 0x70
     274:	f244 0020 	movw	r0, #16416	; 0x4020
     278:	f2c2 0100 	movt	r1, #8192	; 0x2000
     27c:	f2c0 0080 	movt	r0, #128	; 0x80
     280:	e000      	b.n	284 <frame_dummy+0x20>
     282:	bf00      	nop
     284:	f244 0020 	movw	r0, #16416	; 0x4020
     288:	f2c0 0080 	movt	r0, #128	; 0x80
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	b903      	cbnz	r3, 292 <frame_dummy+0x2e>
     290:	bd10      	pop	{r4, pc}
     292:	f240 0300 	movw	r3, #0
     296:	f2c0 0300 	movt	r3, #0
     29a:	2b00      	cmp	r3, #0
     29c:	d0f8      	beq.n	290 <frame_dummy+0x2c>
     29e:	4798      	blx	r3
     2a0:	e7f6      	b.n	290 <frame_dummy+0x2c>
     2a2:	46c0      	nop			; (mov r8, r8)

000002a4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2a4:	b510      	push	{r4, lr}
	system_init();
     2a6:	f240 433d 	movw	r3, #1085	; 0x43d
     2aa:	f2c0 0300 	movt	r3, #0
     2ae:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     2b0:	f243 2300 	movw	r3, #12800	; 0x3200
     2b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     2b8:	2200      	movs	r2, #0
     2ba:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     2bc:	f24e 1300 	movw	r3, #57600	; 0xe100
     2c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
     2c4:	f240 2180 	movw	r1, #640	; 0x280
     2c8:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     2ca:	3104      	adds	r1, #4
     2cc:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
	stdio_redirect_init();
     2ce:	f241 13c5 	movw	r3, #4549	; 0x11c5
     2d2:	f2c0 0300 	movt	r3, #0
     2d6:	4798      	blx	r3
}
     2d8:	bd10      	pop	{r4, pc}

000002da <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2da:	e7fe      	b.n	2da <Dummy_Handler>

000002dc <Reset_Handler>:
{
     2dc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     2de:	f242 421c 	movw	r2, #9244	; 0x241c
     2e2:	f2c0 0200 	movt	r2, #0
     2e6:	f240 0300 	movw	r3, #0
     2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2ee:	429a      	cmp	r2, r3
     2f0:	d020      	beq.n	334 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     2f2:	001a      	movs	r2, r3
     2f4:	f240 036c 	movw	r3, #108	; 0x6c
     2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2fc:	429a      	cmp	r2, r3
     2fe:	d219      	bcs.n	334 <Reset_Handler+0x58>
     300:	f240 036c 	movw	r3, #108	; 0x6c
     304:	f2c2 0300 	movt	r3, #8192	; 0x2000
     308:	3303      	adds	r3, #3
     30a:	4a24      	ldr	r2, [pc, #144]	; (39c <Reset_Handler+0xc0>)
     30c:	1a9b      	subs	r3, r3, r2
     30e:	089b      	lsrs	r3, r3, #2
     310:	3301      	adds	r3, #1
     312:	009b      	lsls	r3, r3, #2
     314:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     316:	f240 0100 	movw	r1, #0
     31a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     31e:	1851      	adds	r1, r2, r1
     320:	f242 401c 	movw	r0, #9244	; 0x241c
     324:	f2c0 0000 	movt	r0, #0
     328:	1810      	adds	r0, r2, r0
     32a:	6800      	ldr	r0, [r0, #0]
     32c:	6008      	str	r0, [r1, #0]
     32e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     330:	429a      	cmp	r2, r3
     332:	d1f0      	bne.n	316 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     334:	f240 026c 	movw	r2, #108	; 0x6c
     338:	f2c2 0200 	movt	r2, #8192	; 0x2000
     33c:	f241 5300 	movw	r3, #5376	; 0x1500
     340:	f2c2 0300 	movt	r3, #8192	; 0x2000
     344:	429a      	cmp	r2, r3
     346:	d213      	bcs.n	370 <Reset_Handler+0x94>
     348:	f240 026c 	movw	r2, #108	; 0x6c
     34c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     350:	43d3      	mvns	r3, r2
     352:	f241 5100 	movw	r1, #5376	; 0x1500
     356:	f2c2 0100 	movt	r1, #8192	; 0x2000
     35a:	468c      	mov	ip, r1
     35c:	4463      	add	r3, ip
     35e:	2103      	movs	r1, #3
     360:	438b      	bics	r3, r1
     362:	3304      	adds	r3, #4
     364:	4694      	mov	ip, r2
     366:	4463      	add	r3, ip
                *pDest++ = 0;
     368:	2100      	movs	r1, #0
     36a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     36c:	4293      	cmp	r3, r2
     36e:	d1fc      	bne.n	36a <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     370:	f240 0300 	movw	r3, #0
     374:	f2c0 0300 	movt	r3, #0
     378:	227f      	movs	r2, #127	; 0x7f
     37a:	4393      	bics	r3, r2
     37c:	f64e 5200 	movw	r2, #60672	; 0xed00
     380:	f2ce 0200 	movt	r2, #57344	; 0xe000
     384:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     386:	f241 231d 	movw	r3, #4637	; 0x121d
     38a:	f2c0 0300 	movt	r3, #0
     38e:	4798      	blx	r3
        main();
     390:	f640 53f9 	movw	r3, #3577	; 0xdf9
     394:	f2c0 0300 	movt	r3, #0
     398:	4798      	blx	r3
     39a:	e7fe      	b.n	39a <Reset_Handler+0xbe>
     39c:	20000004 	.word	0x20000004

000003a0 <TARGET_IO_PORT_init>:
#endif

struct usart_sync_descriptor TARGET_IO;

void TARGET_IO_PORT_init(void)
{
     3a0:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f243 2300 	movw	r3, #12800	; 0x3200
     3a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3aa:	2258      	movs	r2, #88	; 0x58
     3ac:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3ae:	2501      	movs	r5, #1
     3b0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	2401      	movs	r4, #1
     3b4:	4321      	orrs	r1, r4
     3b6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	203c      	movs	r0, #60	; 0x3c
     3bc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	3a49      	subs	r2, #73	; 0x49
     3c0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	3a0d      	subs	r2, #13
     3c4:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	3111      	adds	r1, #17
     3dc:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3de:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA24, PINMUX_PA24C_SERCOM0_PAD2);

	gpio_set_pin_function(PA25, PINMUX_PA25C_SERCOM0_PAD3);
}
     3e0:	bd30      	pop	{r4, r5, pc}

000003e2 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3e2:	f641 4300 	movw	r3, #7168	; 0x1c00
     3e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3ea:	2140      	movs	r1, #64	; 0x40
     3ec:	22ac      	movs	r2, #172	; 0xac
     3ee:	5099      	str	r1, [r3, r2]
     3f0:	3103      	adds	r1, #3
     3f2:	3a04      	subs	r2, #4
     3f4:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     3f6:	f640 0300 	movw	r3, #2048	; 0x800
     3fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3fe:	69da      	ldr	r2, [r3, #28]
     400:	3941      	subs	r1, #65	; 0x41
     402:	430a      	orrs	r2, r1
     404:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     406:	4770      	bx	lr

00000408 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     408:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     40a:	f240 33e3 	movw	r3, #995	; 0x3e3
     40e:	f2c0 0300 	movt	r3, #0
     412:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     414:	f240 4100 	movw	r1, #1024	; 0x400
     418:	f2c4 2100 	movt	r1, #16896	; 0x4200
     41c:	f241 00b8 	movw	r0, #4280	; 0x10b8
     420:	f2c2 0000 	movt	r0, #8192	; 0x2000
     424:	2200      	movs	r2, #0
     426:	f240 53b5 	movw	r3, #1461	; 0x5b5
     42a:	f2c0 0300 	movt	r3, #0
     42e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     430:	f240 33a1 	movw	r3, #929	; 0x3a1
     434:	f2c0 0300 	movt	r3, #0
     438:	4798      	blx	r3
}
     43a:	bd10      	pop	{r4, pc}

0000043c <system_init>:

void system_init(void)
{
     43c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     43e:	f240 6385 	movw	r3, #1669	; 0x685
     442:	f2c0 0300 	movt	r3, #0
     446:	4798      	blx	r3
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif

	TARGET_IO_init();
     448:	f240 4309 	movw	r3, #1033	; 0x409
     44c:	f2c0 0300 	movt	r3, #0
     450:	4798      	blx	r3
}
     452:	bd10      	pop	{r4, pc}

00000454 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     454:	b570      	push	{r4, r5, r6, lr}
     456:	0006      	movs	r6, r0
     458:	000c      	movs	r4, r1
     45a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     45c:	b198      	cbz	r0, 486 <io_write+0x32>
     45e:	0008      	movs	r0, r1
     460:	1e43      	subs	r3, r0, #1
     462:	4198      	sbcs	r0, r3
     464:	b2c0      	uxtb	r0, r0
     466:	f242 21bc 	movw	r1, #8892	; 0x22bc
     46a:	f2c0 0100 	movt	r1, #0
     46e:	2234      	movs	r2, #52	; 0x34
     470:	f240 6335 	movw	r3, #1589	; 0x635
     474:	f2c0 0300 	movt	r3, #0
     478:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     47a:	6833      	ldr	r3, [r6, #0]
     47c:	002a      	movs	r2, r5
     47e:	0021      	movs	r1, r4
     480:	0030      	movs	r0, r6
     482:	4798      	blx	r3
}
     484:	bd70      	pop	{r4, r5, r6, pc}
     486:	2000      	movs	r0, #0
     488:	e7ed      	b.n	466 <io_write+0x12>

0000048a <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     48a:	b570      	push	{r4, r5, r6, lr}
     48c:	0006      	movs	r6, r0
     48e:	000c      	movs	r4, r1
     490:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     492:	b198      	cbz	r0, 4bc <io_read+0x32>
     494:	0008      	movs	r0, r1
     496:	1e43      	subs	r3, r0, #1
     498:	4198      	sbcs	r0, r3
     49a:	b2c0      	uxtb	r0, r0
     49c:	f242 21bc 	movw	r1, #8892	; 0x22bc
     4a0:	f2c0 0100 	movt	r1, #0
     4a4:	223d      	movs	r2, #61	; 0x3d
     4a6:	f240 6335 	movw	r3, #1589	; 0x635
     4aa:	f2c0 0300 	movt	r3, #0
     4ae:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4b0:	6873      	ldr	r3, [r6, #4]
     4b2:	002a      	movs	r2, r5
     4b4:	0021      	movs	r1, r4
     4b6:	0030      	movs	r0, r6
     4b8:	4798      	blx	r3
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
     4bc:	2000      	movs	r0, #0
     4be:	e7ed      	b.n	49c <io_read+0x12>

000004c0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4c2:	46ce      	mov	lr, r9
     4c4:	4647      	mov	r7, r8
     4c6:	b580      	push	{r7, lr}
     4c8:	0004      	movs	r4, r0
     4ca:	000f      	movs	r7, r1
     4cc:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4ce:	2800      	cmp	r0, #0
     4d0:	d037      	beq.n	542 <usart_sync_write+0x82>
     4d2:	2900      	cmp	r1, #0
     4d4:	d037      	beq.n	546 <usart_sync_write+0x86>
     4d6:	0010      	movs	r0, r2
     4d8:	1e43      	subs	r3, r0, #1
     4da:	4198      	sbcs	r0, r3
     4dc:	f242 21d0 	movw	r1, #8912	; 0x22d0
     4e0:	f2c0 0100 	movt	r1, #0
     4e4:	22f1      	movs	r2, #241	; 0xf1
     4e6:	f240 6335 	movw	r3, #1589	; 0x635
     4ea:	f2c0 0300 	movt	r3, #0
     4ee:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     4f0:	3408      	adds	r4, #8
     4f2:	f640 05c1 	movw	r5, #2241	; 0x8c1
     4f6:	f2c0 0500 	movt	r5, #0
     4fa:	0020      	movs	r0, r4
     4fc:	47a8      	blx	r5
     4fe:	2800      	cmp	r0, #0
     500:	d0fb      	beq.n	4fa <usart_sync_write+0x3a>
     502:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     504:	f640 09b1 	movw	r9, #2225	; 0x8b1
     508:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     50c:	f640 05c1 	movw	r5, #2241	; 0x8c1
     510:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     514:	5db9      	ldrb	r1, [r7, r6]
     516:	0020      	movs	r0, r4
     518:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     51a:	0020      	movs	r0, r4
     51c:	47a8      	blx	r5
     51e:	2800      	cmp	r0, #0
     520:	d0fb      	beq.n	51a <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     522:	3601      	adds	r6, #1
     524:	4546      	cmp	r6, r8
     526:	d3f5      	bcc.n	514 <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     528:	f640 05cb 	movw	r5, #2251	; 0x8cb
     52c:	f2c0 0500 	movt	r5, #0
     530:	0020      	movs	r0, r4
     532:	47a8      	blx	r5
     534:	2800      	cmp	r0, #0
     536:	d0fb      	beq.n	530 <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     538:	0030      	movs	r0, r6
     53a:	bc0c      	pop	{r2, r3}
     53c:	4690      	mov	r8, r2
     53e:	4699      	mov	r9, r3
     540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     542:	2000      	movs	r0, #0
     544:	e7ca      	b.n	4dc <usart_sync_write+0x1c>
     546:	2000      	movs	r0, #0
     548:	e7c8      	b.n	4dc <usart_sync_write+0x1c>

0000054a <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     54c:	46ce      	mov	lr, r9
     54e:	4647      	mov	r7, r8
     550:	b580      	push	{r7, lr}
     552:	0004      	movs	r4, r0
     554:	4688      	mov	r8, r1
     556:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     558:	b340      	cbz	r0, 5ac <usart_sync_read+0x62>
     55a:	b349      	cbz	r1, 5b0 <usart_sync_read+0x66>
     55c:	0010      	movs	r0, r2
     55e:	1e43      	subs	r3, r0, #1
     560:	4198      	sbcs	r0, r3
     562:	f242 21d0 	movw	r1, #8912	; 0x22d0
     566:	f2c0 0100 	movt	r1, #0
     56a:	f240 120c 	movw	r2, #268	; 0x10c
     56e:	f240 6335 	movw	r3, #1589	; 0x635
     572:	f2c0 0300 	movt	r3, #0
     576:	4798      	blx	r3
	uint32_t                      offset = 0;
     578:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     57a:	3408      	adds	r4, #8
     57c:	f640 05d5 	movw	r5, #2261	; 0x8d5
     580:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     584:	f640 07b9 	movw	r7, #2233	; 0x8b9
     588:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
     58c:	0020      	movs	r0, r4
     58e:	47a8      	blx	r5
     590:	2800      	cmp	r0, #0
     592:	d0fb      	beq.n	58c <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     594:	0020      	movs	r0, r4
     596:	47b8      	blx	r7
     598:	4643      	mov	r3, r8
     59a:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
     59c:	3601      	adds	r6, #1
     59e:	454e      	cmp	r6, r9
     5a0:	d3f4      	bcc.n	58c <usart_sync_read+0x42>

	return (int32_t)offset;
}
     5a2:	0030      	movs	r0, r6
     5a4:	bc0c      	pop	{r2, r3}
     5a6:	4690      	mov	r8, r2
     5a8:	4699      	mov	r9, r3
     5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5ac:	2000      	movs	r0, #0
     5ae:	e7d8      	b.n	562 <usart_sync_read+0x18>
     5b0:	2000      	movs	r0, #0
     5b2:	e7d6      	b.n	562 <usart_sync_read+0x18>

000005b4 <usart_sync_init>:
{
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	0005      	movs	r5, r0
     5b8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     5ba:	b308      	cbz	r0, 600 <usart_sync_init+0x4c>
     5bc:	0008      	movs	r0, r1
     5be:	1e43      	subs	r3, r0, #1
     5c0:	4198      	sbcs	r0, r3
     5c2:	b2c0      	uxtb	r0, r0
     5c4:	f242 21d0 	movw	r1, #8912	; 0x22d0
     5c8:	f2c0 0100 	movt	r1, #0
     5cc:	2234      	movs	r2, #52	; 0x34
     5ce:	f240 6335 	movw	r3, #1589	; 0x635
     5d2:	f2c0 0300 	movt	r3, #0
     5d6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5d8:	0028      	movs	r0, r5
     5da:	3008      	adds	r0, #8
     5dc:	0021      	movs	r1, r4
     5de:	f640 036d 	movw	r3, #2157	; 0x86d
     5e2:	f2c0 0300 	movt	r3, #0
     5e6:	4798      	blx	r3
	if (init_status) {
     5e8:	b948      	cbnz	r0, 5fe <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
     5ea:	f240 534b 	movw	r3, #1355	; 0x54b
     5ee:	f2c0 0300 	movt	r3, #0
     5f2:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     5f4:	f240 43c1 	movw	r3, #1217	; 0x4c1
     5f8:	f2c0 0300 	movt	r3, #0
     5fc:	602b      	str	r3, [r5, #0]
}
     5fe:	bd70      	pop	{r4, r5, r6, pc}
     600:	2000      	movs	r0, #0
     602:	e7df      	b.n	5c4 <usart_sync_init+0x10>

00000604 <usart_sync_enable>:
{
     604:	b510      	push	{r4, lr}
     606:	0004      	movs	r4, r0
	ASSERT(descr);
     608:	f242 21d0 	movw	r1, #8912	; 0x22d0
     60c:	f2c0 0100 	movt	r1, #0
     610:	1e43      	subs	r3, r0, #1
     612:	4198      	sbcs	r0, r3
     614:	b2c0      	uxtb	r0, r0
     616:	2253      	movs	r2, #83	; 0x53
     618:	f240 6335 	movw	r3, #1589	; 0x635
     61c:	f2c0 0300 	movt	r3, #0
     620:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     622:	0020      	movs	r0, r4
     624:	3008      	adds	r0, #8
     626:	f640 039d 	movw	r3, #2205	; 0x89d
     62a:	f2c0 0300 	movt	r3, #0
     62e:	4798      	blx	r3
}
     630:	2000      	movs	r0, #0
     632:	bd10      	pop	{r4, pc}

00000634 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     634:	b900      	cbnz	r0, 638 <assert+0x4>
		__asm("BKPT #0");
     636:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     638:	4770      	bx	lr

0000063a <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     63a:	0002      	movs	r2, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     63c:	f240 0388 	movw	r3, #136	; 0x88
     640:	f2c2 0300 	movt	r3, #8192	; 0x2000
     644:	681b      	ldr	r3, [r3, #0]
     646:	b13b      	cbz	r3, 658 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     648:	f240 0388 	movw	r3, #136	; 0x88
     64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     650:	6818      	ldr	r0, [r3, #0]

	heap += incr;
     652:	1882      	adds	r2, r0, r2
     654:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
     656:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     658:	f240 0388 	movw	r3, #136	; 0x88
     65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     660:	f641 3100 	movw	r1, #6912	; 0x1b00
     664:	f2c2 0100 	movt	r1, #8192	; 0x2000
     668:	6019      	str	r1, [r3, #0]
     66a:	e7ed      	b.n	648 <_sbrk+0xe>

0000066c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     66c:	2001      	movs	r0, #1
     66e:	4240      	negs	r0, r0
     670:	4770      	bx	lr

00000672 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     672:	f242 0300 	movw	r3, #8192	; 0x2000
     676:	604b      	str	r3, [r1, #4]

	return 0;
}
     678:	2000      	movs	r0, #0
     67a:	4770      	bx	lr

0000067c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     67c:	2001      	movs	r0, #1
     67e:	4770      	bx	lr

00000680 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     680:	2000      	movs	r0, #0
     682:	4770      	bx	lr

00000684 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     684:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     686:	f245 0300 	movw	r3, #20480	; 0x5000
     68a:	f2c4 1300 	movt	r3, #16640	; 0x4100
     68e:	685a      	ldr	r2, [r3, #4]
     690:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
     692:	2000      	movs	r0, #0
     694:	f240 7353 	movw	r3, #1875	; 0x753
     698:	f2c0 0300 	movt	r3, #0
     69c:	4798      	blx	r3

	_osc32kctrl_init_sources();
     69e:	f240 730b 	movw	r3, #1803	; 0x70b
     6a2:	f2c0 0300 	movt	r3, #0
     6a6:	4798      	blx	r3
	_oscctrl_init_sources();
     6a8:	f240 7323 	movw	r3, #1827	; 0x723
     6ac:	f2c0 0300 	movt	r3, #0
     6b0:	4798      	blx	r3
	_mclk_init();
     6b2:	f240 63fd 	movw	r3, #1789	; 0x6fd
     6b6:	f2c0 0300 	movt	r3, #0
     6ba:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     6bc:	f240 7351 	movw	r3, #1873	; 0x751
     6c0:	f2c0 0300 	movt	r3, #0
     6c4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     6c6:	201f      	movs	r0, #31
     6c8:	f240 63d5 	movw	r3, #1749	; 0x6d5
     6cc:	f2c0 0300 	movt	r3, #0
     6d0:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     6d2:	bd10      	pop	{r4, pc}

000006d4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     6d4:	07c3      	lsls	r3, r0, #31
     6d6:	d510      	bpl.n	6fa <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     6d8:	f641 4300 	movw	r3, #7168	; 0x1c00
     6dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6e0:	f240 1205 	movw	r2, #261	; 0x105
     6e4:	f2c0 0201 	movt	r2, #1
     6e8:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     6ea:	f641 4200 	movw	r2, #7168	; 0x1c00
     6ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
     6f2:	217d      	movs	r1, #125	; 0x7d
     6f4:	6853      	ldr	r3, [r2, #4]
     6f6:	4219      	tst	r1, r3
     6f8:	d1fc      	bne.n	6f4 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
     6fa:	4770      	bx	lr

000006fc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     6fc:	f640 0300 	movw	r3, #2048	; 0x800
     700:	f2c4 0300 	movt	r3, #16384	; 0x4000
     704:	2201      	movs	r2, #1
     706:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     708:	4770      	bx	lr

0000070a <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     70a:	f241 4300 	movw	r3, #5120	; 0x1400
     70e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     712:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     714:	f641 7100 	movw	r1, #7936	; 0x1f00
     718:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     71a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     71c:	2200      	movs	r2, #0
     71e:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     720:	4770      	bx	lr

00000722 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     722:	f241 0300 	movw	r3, #4096	; 0x1000
     726:	f2c4 0300 	movt	r3, #16384	; 0x4000
     72a:	2202      	movs	r2, #2
     72c:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     72e:	f241 0200 	movw	r2, #4096	; 0x1000
     732:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     736:	2110      	movs	r1, #16
     738:	6913      	ldr	r3, [r2, #16]
     73a:	4219      	tst	r1, r3
     73c:	d0fc      	beq.n	738 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
     73e:	f241 0300 	movw	r3, #4096	; 0x1000
     742:	f2c4 0300 	movt	r3, #16384	; 0x4000
     746:	7e1a      	ldrb	r2, [r3, #24]
     748:	2180      	movs	r1, #128	; 0x80
     74a:	430a      	orrs	r2, r1
     74c:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     74e:	4770      	bx	lr

00000750 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     750:	4770      	bx	lr

00000752 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     752:	f240 4300 	movw	r3, #1024	; 0x400
     756:	f2c4 0300 	movt	r3, #16384	; 0x4000
     75a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     75c:	2203      	movs	r2, #3
     75e:	4013      	ands	r3, r2
     760:	4298      	cmp	r0, r3
     762:	d012      	beq.n	78a <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
     764:	f240 4200 	movw	r2, #1024	; 0x400
     768:	f2c4 0200 	movt	r2, #16384	; 0x4000
     76c:	23ff      	movs	r3, #255	; 0xff
     76e:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     770:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     772:	2103      	movs	r1, #3
     774:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     776:	4008      	ands	r0, r1
     778:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     77a:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     77c:	f240 4200 	movw	r2, #1024	; 0x400
     780:	f2c4 0200 	movt	r2, #16384	; 0x4000
     784:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     786:	2b00      	cmp	r3, #0
     788:	d0fc      	beq.n	784 <_set_performance_level+0x32>
			;
	}
}
     78a:	4770      	bx	lr

0000078c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     78c:	b530      	push	{r4, r5, lr}
     78e:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     790:	aa01      	add	r2, sp, #4
     792:	f242 23ec 	movw	r3, #8940	; 0x22ec
     796:	f2c0 0300 	movt	r3, #0
     79a:	cb32      	ldmia	r3!, {r1, r4, r5}
     79c:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     79e:	0003      	movs	r3, r0
     7a0:	9a01      	ldr	r2, [sp, #4]
     7a2:	4282      	cmp	r2, r0
     7a4:	d00c      	beq.n	7c0 <_sercom_get_hardware_index+0x34>
     7a6:	9a02      	ldr	r2, [sp, #8]
     7a8:	4282      	cmp	r2, r0
     7aa:	d007      	beq.n	7bc <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
     7ac:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     7ae:	9a03      	ldr	r2, [sp, #12]
     7b0:	429a      	cmp	r2, r3
     7b2:	d001      	beq.n	7b8 <_sercom_get_hardware_index+0x2c>
}
     7b4:	b005      	add	sp, #20
     7b6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7b8:	3002      	adds	r0, #2
     7ba:	e002      	b.n	7c2 <_sercom_get_hardware_index+0x36>
     7bc:	2001      	movs	r0, #1
     7be:	e000      	b.n	7c2 <_sercom_get_hardware_index+0x36>
     7c0:	2000      	movs	r0, #0
			return i;
     7c2:	b2c0      	uxtb	r0, r0
     7c4:	e7f6      	b.n	7b4 <_sercom_get_hardware_index+0x28>
	...

000007c8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     7c8:	b510      	push	{r4, lr}
     7ca:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     7cc:	f240 738d 	movw	r3, #1933	; 0x78d
     7d0:	f2c0 0300 	movt	r3, #0
     7d4:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     7d6:	b158      	cbz	r0, 7f0 <_usart_init+0x28>
	ASSERT(false);
     7d8:	f242 3110 	movw	r1, #8976	; 0x2310
     7dc:	f2c0 0100 	movt	r1, #0
     7e0:	f240 2247 	movw	r2, #583	; 0x247
     7e4:	2000      	movs	r0, #0
     7e6:	f240 6335 	movw	r3, #1589	; 0x635
     7ea:	f2c0 0300 	movt	r3, #0
     7ee:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     7f0:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     7f2:	07db      	lsls	r3, r3, #31
     7f4:	d418      	bmi.n	828 <_usart_init+0x60>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7f6:	2203      	movs	r2, #3
     7f8:	69e3      	ldr	r3, [r4, #28]
     7fa:	421a      	tst	r2, r3
     7fc:	d1fc      	bne.n	7f8 <_usart_init+0x30>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     7fe:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     800:	079b      	lsls	r3, r3, #30
     802:	d50b      	bpl.n	81c <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     804:	6823      	ldr	r3, [r4, #0]
     806:	2202      	movs	r2, #2
     808:	4393      	bics	r3, r2
     80a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     80c:	3201      	adds	r2, #1
     80e:	69e3      	ldr	r3, [r4, #28]
     810:	421a      	tst	r2, r3
     812:	d1fc      	bne.n	80e <_usart_init+0x46>
     814:	2202      	movs	r2, #2
     816:	69e3      	ldr	r3, [r4, #28]
     818:	421a      	tst	r2, r3
     81a:	d1fc      	bne.n	816 <_usart_init+0x4e>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     81c:	2305      	movs	r3, #5
     81e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     820:	2203      	movs	r2, #3
     822:	69e3      	ldr	r3, [r4, #28]
     824:	421a      	tst	r2, r3
     826:	d1fc      	bne.n	822 <_usart_init+0x5a>
     828:	2201      	movs	r2, #1
     82a:	69e3      	ldr	r3, [r4, #28]
     82c:	421a      	tst	r2, r3
     82e:	d1fc      	bne.n	82a <_usart_init+0x62>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     830:	2304      	movs	r3, #4
     832:	f2c4 0331 	movt	r3, #16433	; 0x4031
     836:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     838:	2203      	movs	r2, #3
     83a:	69e3      	ldr	r3, [r4, #28]
     83c:	421a      	tst	r2, r3
     83e:	d1fc      	bne.n	83a <_usart_init+0x72>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     840:	23c0      	movs	r3, #192	; 0xc0
     842:	029b      	lsls	r3, r3, #10
     844:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     846:	220f      	movs	r2, #15
     848:	69e3      	ldr	r3, [r4, #28]
     84a:	421a      	tst	r2, r3
     84c:	d1fc      	bne.n	848 <_usart_init+0x80>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     84e:	2302      	movs	r3, #2
     850:	f2c0 0370 	movt	r3, #112	; 0x70
     854:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     856:	4b04      	ldr	r3, [pc, #16]	; (868 <_usart_init+0xa0>)
     858:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     85a:	2300      	movs	r3, #0
     85c:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     85e:	2230      	movs	r2, #48	; 0x30
     860:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     862:	2000      	movs	r0, #0
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	ffff8a09 	.word	0xffff8a09

0000086c <_usart_sync_init>:
{
     86c:	b570      	push	{r4, r5, r6, lr}
     86e:	0005      	movs	r5, r0
     870:	000c      	movs	r4, r1
	ASSERT(device);
     872:	f242 3110 	movw	r1, #8976	; 0x2310
     876:	f2c0 0100 	movt	r1, #0
     87a:	1e43      	subs	r3, r0, #1
     87c:	4198      	sbcs	r0, r3
     87e:	b2c0      	uxtb	r0, r0
     880:	22bb      	movs	r2, #187	; 0xbb
     882:	f240 6335 	movw	r3, #1589	; 0x635
     886:	f2c0 0300 	movt	r3, #0
     88a:	4798      	blx	r3
	device->hw = hw;
     88c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     88e:	0020      	movs	r0, r4
     890:	f240 73c9 	movw	r3, #1993	; 0x7c9
     894:	f2c0 0300 	movt	r3, #0
     898:	4798      	blx	r3
}
     89a:	bd70      	pop	{r4, r5, r6, pc}

0000089c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     89c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     89e:	6813      	ldr	r3, [r2, #0]
     8a0:	2102      	movs	r1, #2
     8a2:	430b      	orrs	r3, r1
     8a4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8a6:	3101      	adds	r1, #1
     8a8:	69d3      	ldr	r3, [r2, #28]
     8aa:	4219      	tst	r1, r3
     8ac:	d1fc      	bne.n	8a8 <_usart_sync_enable+0xc>
}
     8ae:	4770      	bx	lr

000008b0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     8b0:	6803      	ldr	r3, [r0, #0]
     8b2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     8b4:	8519      	strh	r1, [r3, #40]	; 0x28
}
     8b6:	4770      	bx	lr

000008b8 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     8b8:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     8ba:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     8bc:	b2c0      	uxtb	r0, r0
}
     8be:	4770      	bx	lr

000008c0 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     8c0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     8c2:	7e18      	ldrb	r0, [r3, #24]
     8c4:	2301      	movs	r3, #1
     8c6:	4018      	ands	r0, r3
}
     8c8:	4770      	bx	lr

000008ca <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     8ca:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     8cc:	7e18      	ldrb	r0, [r3, #24]
     8ce:	0780      	lsls	r0, r0, #30
     8d0:	0fc0      	lsrs	r0, r0, #31
}
     8d2:	4770      	bx	lr

000008d4 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     8d4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     8d6:	7e18      	ldrb	r0, [r3, #24]
     8d8:	0740      	lsls	r0, r0, #29
     8da:	0fc0      	lsrs	r0, r0, #31
}
     8dc:	4770      	bx	lr

000008de <kernel_init>:
#include "inc/manager.h"
#include "inc/results.h"
#include "inc/types.h"
#include "inc/test_module.h"

SOS_Result_t kernel_init(){
     8de:	b510      	push	{r4, lr}
	init_stack();
     8e0:	f640 1301 	movw	r3, #2305	; 0x901
     8e4:	f2c0 0300 	movt	r3, #0
     8e8:	4798      	blx	r3
    init_modules();
     8ea:	f640 1303 	movw	r3, #2307	; 0x903
     8ee:	f2c0 0300 	movt	r3, #0
     8f2:	4798      	blx	r3
    init_test_module();
     8f4:	f640 53cd 	movw	r3, #3533	; 0xdcd
     8f8:	f2c0 0300 	movt	r3, #0
     8fc:	4798      	blx	r3
    

}
     8fe:	bd10      	pop	{r4, pc}

00000900 <init_stack>:
static uint32_t call_ID=1;                                 // this is used to generate the call_ID for each module calling
                        

void init_stack(){
    kernel_stack_pointer=(StackType_t*) kernel_stack;
}
     900:	4770      	bx	lr

00000902 <init_modules>:
    } 
}



SOS_Result_t init_modules(void){
     902:	f241 03c4 	movw	r3, #4292	; 0x10c4
     906:	f2c2 0300 	movt	r3, #8192	; 0x2000
     90a:	0019      	movs	r1, r3
     90c:	31c8      	adds	r1, #200	; 0xc8
    int i;
    for (i=0;i<MODULES_MAX;i++){
        modules[i].module_id=0;
     90e:	2200      	movs	r2, #0
     910:	601a      	str	r2, [r3, #0]
        modules[i].module_entry=NULL;
     912:	609a      	str	r2, [r3, #8]
     914:	3314      	adds	r3, #20
    for (i=0;i<MODULES_MAX;i++){
     916:	428b      	cmp	r3, r1
     918:	d1fa      	bne.n	910 <init_modules+0xe>

    }
}
     91a:	4770      	bx	lr

0000091c <add_module>:

SOS_Result_t add_module(SOS_ModuleEntry_t module_enrty,SOS_ModuleID_t module_id,SOS_Manifest_t manifest){
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if((module_id==0)||(module_enrty==NULL)){
     91e:	b1c9      	cbz	r1, 954 <add_module+0x38>
     920:	b1d8      	cbz	r0, 95a <add_module+0x3e>
        return -SOS_ERROR_INVAL;
    }
    
    modules[modules_index].module_id=module_id;
     922:	f240 058c 	movw	r5, #140	; 0x8c
     926:	f2c2 0500 	movt	r5, #8192	; 0x2000
     92a:	682c      	ldr	r4, [r5, #0]
     92c:	f241 06c4 	movw	r6, #4292	; 0x10c4
     930:	f2c2 0600 	movt	r6, #8192	; 0x2000
     934:	00a3      	lsls	r3, r4, #2
     936:	191f      	adds	r7, r3, r4
     938:	00bf      	lsls	r7, r7, #2
     93a:	51b9      	str	r1, [r7, r6]
    modules[modules_index].module_entry=module_enrty;
     93c:	003b      	movs	r3, r7
     93e:	46b4      	mov	ip, r6
     940:	4463      	add	r3, ip
     942:	6098      	str	r0, [r3, #8]
    modules[modules_index].module_manifest=manifest;
     944:	605a      	str	r2, [r3, #4]

    modules_index++;
     946:	3401      	adds	r4, #1
     948:	602c      	str	r4, [r5, #0]
    if(modules_index>=MODULES_MAX){
     94a:	2c09      	cmp	r4, #9
     94c:	d904      	bls.n	958 <add_module+0x3c>
        return -SOS_ERROR_NO_FREE_SM;
     94e:	2005      	movs	r0, #5
     950:	4240      	negs	r0, r0
     952:	e001      	b.n	958 <add_module+0x3c>
        return -SOS_ERROR_INVAL;
     954:	2002      	movs	r0, #2
     956:	4240      	negs	r0, r0
    }

    
}
     958:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -SOS_ERROR_INVAL;
     95a:	2002      	movs	r0, #2
     95c:	4240      	negs	r0, r0
     95e:	e7fb      	b.n	958 <add_module+0x3c>

00000960 <call_module>:
    SOS_Operation_t *operation,Module_t* module, StackType_t *module_stack){	

		// Store the call_ID on the top of module stack.
		// Note: On exception return, the ARMv8-M architecture only supports doubleword aligned stack pointers.
		module_stack--;
		*module_stack = call_ID-1;
     960:	1f1d      	subs	r5, r3, #4
     962:	f240 0400 	movw	r4, #0
     966:	f2c2 0400 	movt	r4, #8192	; 0x2000
     96a:	6824      	ldr	r4, [r4, #0]
     96c:	3c01      	subs	r4, #1
     96e:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = 0;						// padding
     970:	3d04      	subs	r5, #4
     972:	2400      	movs	r4, #0
     974:	602c      	str	r4, [r5, #0]
		
		// Set up the exception stack frame.
		module_stack--;
		*module_stack = INITIAL_XPSR;			
     976:	3d04      	subs	r5, #4
     978:	2680      	movs	r6, #128	; 0x80
     97a:	0476      	lsls	r6, r6, #17
     97c:	602e      	str	r6, [r5, #0]
		module_stack--;
		*module_stack = module->module_entry;
     97e:	3d04      	subs	r5, #4
     980:	6896      	ldr	r6, [r2, #8]
     982:	602e      	str	r6, [r5, #0]
		module_stack--;
		*module_stack = MODULE_RETURN_ADDRESS;	// LR
     984:	3d04      	subs	r5, #4
     986:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = 0;						// r12
     988:	3d04      	subs	r5, #4
     98a:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = 0;						// r3
     98c:	3d04      	subs	r5, #4
     98e:	602c      	str	r4, [r5, #0]
		module_stack--;
		*module_stack = module->module_entry;			// r2
     990:	001c      	movs	r4, r3
     992:	3c20      	subs	r4, #32
     994:	6892      	ldr	r2, [r2, #8]
     996:	6022      	str	r2, [r4, #0]
		module_stack--;
		*module_stack = operation;				//r1
     998:	001a      	movs	r2, r3
     99a:	3a24      	subs	r2, #36	; 0x24
     99c:	6011      	str	r1, [r2, #0]
		module_stack--;
		*module_stack = command_id;				//r0
     99e:	3b28      	subs	r3, #40	; 0x28
     9a0:	6018      	str	r0, [r3, #0]



		__asm volatile(
     9a2:	2203      	movs	r2, #3
     9a4:	4252      	negs	r2, r2
     9a6:	1c1d      	adds	r5, r3, #0
     9a8:	f385 8809 	msr	PSP, r5
     9ac:	1c15      	adds	r5, r2, #0
     9ae:	46ae      	mov	lr, r5
     9b0:	f3ef 8514 	mrs	r5, CONTROL
     9b4:	2403      	movs	r4, #3
     9b6:	4325      	orrs	r5, r4
     9b8:	f385 8814 	msr	CONTROL, r5
     9bc:	f3bf 8f4f 	dsb	sy
     9c0:	f3bf 8f6f 	isb	sy
     9c4:	4770      	bx	lr

000009c6 <call_module_list_add>:
      );
}



int call_module_list_add(struct CallModuleFrame ** item){
     9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c8:	0004      	movs	r4, r0
	if(!(*item=memory_alloc(sizeof(struct CallModuleFrame)))){
     9ca:	2050      	movs	r0, #80	; 0x50
     9cc:	f640 4319 	movw	r3, #3097	; 0xc19
     9d0:	f2c0 0300 	movt	r3, #0
     9d4:	4798      	blx	r3
     9d6:	6020      	str	r0, [r4, #0]
     9d8:	2800      	cmp	r0, #0
     9da:	d035      	beq.n	a48 <call_module_list_add+0x82>
		// The item is a NULL pointer
		return SOS_ERROR_INVAL; 
	}
	if(call_moudle_frame_head->next!=NULL){
     9dc:	f240 0300 	movw	r3, #0
     9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9e4:	685a      	ldr	r2, [r3, #4]
     9e6:	234c      	movs	r3, #76	; 0x4c
     9e8:	5cd3      	ldrb	r3, [r2, r3]
     9ea:	214d      	movs	r1, #77	; 0x4d
     9ec:	5c51      	ldrb	r1, [r2, r1]
     9ee:	0209      	lsls	r1, r1, #8
     9f0:	4319      	orrs	r1, r3
     9f2:	234e      	movs	r3, #78	; 0x4e
     9f4:	5cd3      	ldrb	r3, [r2, r3]
     9f6:	041b      	lsls	r3, r3, #16
     9f8:	4319      	orrs	r1, r3
     9fa:	234f      	movs	r3, #79	; 0x4f
     9fc:	5cd3      	ldrb	r3, [r2, r3]
     9fe:	061b      	lsls	r3, r3, #24
     a00:	430b      	orrs	r3, r1
     a02:	b1a3      	cbz	r3, a2e <call_module_list_add+0x68>
               (*item)->next=call_moudle_frame_head->next;
     a04:	274c      	movs	r7, #76	; 0x4c
     a06:	55c3      	strb	r3, [r0, r7]
     a08:	0a19      	lsrs	r1, r3, #8
     a0a:	264d      	movs	r6, #77	; 0x4d
     a0c:	5581      	strb	r1, [r0, r6]
     a0e:	0c19      	lsrs	r1, r3, #16
     a10:	254e      	movs	r5, #78	; 0x4e
     a12:	5541      	strb	r1, [r0, r5]
     a14:	0e1b      	lsrs	r3, r3, #24
     a16:	214f      	movs	r1, #79	; 0x4f
     a18:	5443      	strb	r3, [r0, r1]
               call_moudle_frame_head->next=(*item);
     a1a:	6823      	ldr	r3, [r4, #0]
     a1c:	55d3      	strb	r3, [r2, r7]
     a1e:	0a18      	lsrs	r0, r3, #8
     a20:	5590      	strb	r0, [r2, r6]
     a22:	0c18      	lsrs	r0, r3, #16
     a24:	5550      	strb	r0, [r2, r5]
     a26:	0e1b      	lsrs	r3, r3, #24
     a28:	5453      	strb	r3, [r2, r1]
    }else{
               call_moudle_frame_head->next=(*item);
    }	   
	return SOS_SUCCESS;
     a2a:	2000      	movs	r0, #0
	
}
     a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
               call_moudle_frame_head->next=(*item);
     a2e:	234c      	movs	r3, #76	; 0x4c
     a30:	54d0      	strb	r0, [r2, r3]
     a32:	0a01      	lsrs	r1, r0, #8
     a34:	3301      	adds	r3, #1
     a36:	54d1      	strb	r1, [r2, r3]
     a38:	0c01      	lsrs	r1, r0, #16
     a3a:	3301      	adds	r3, #1
     a3c:	54d1      	strb	r1, [r2, r3]
     a3e:	0e00      	lsrs	r0, r0, #24
     a40:	3301      	adds	r3, #1
     a42:	54d0      	strb	r0, [r2, r3]
	return SOS_SUCCESS;
     a44:	2000      	movs	r0, #0
     a46:	e7f1      	b.n	a2c <call_module_list_add+0x66>
		return SOS_ERROR_INVAL; 
     a48:	2002      	movs	r0, #2
     a4a:	e7ef      	b.n	a2c <call_module_list_add+0x66>

00000a4c <call_module_list_remove>:

int call_module_list_remove(struct CallModuleFrame ** item){
     a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a4e:	4684      	mov	ip, r0
	if(*item==NULL){
     a50:	6804      	ldr	r4, [r0, #0]
     a52:	2c00      	cmp	r4, #0
     a54:	d04b      	beq.n	aee <call_module_list_remove+0xa2>
		// The item is a NULL pointer
		return SOS_ERROR_INVAL; 
	}
	struct CallModuleFrame * index;
	index=call_moudle_frame_head;
     a56:	f240 0300 	movw	r3, #0
     a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a5e:	685b      	ldr	r3, [r3, #4]
			   index=index->next;
		   }		     
		   return SOS_ERROR_INVAL;
	}
	else{
		return SOS_ERROR_INVAL;
     a60:	2002      	movs	r0, #2
	if(index!=NULL){
     a62:	2b00      	cmp	r3, #0
     a64:	d042      	beq.n	aec <call_module_list_remove+0xa0>
			   if((index->next)==(*item)){
     a66:	224c      	movs	r2, #76	; 0x4c
     a68:	5c9a      	ldrb	r2, [r3, r2]
     a6a:	214d      	movs	r1, #77	; 0x4d
     a6c:	5c59      	ldrb	r1, [r3, r1]
     a6e:	0209      	lsls	r1, r1, #8
     a70:	4311      	orrs	r1, r2
     a72:	224e      	movs	r2, #78	; 0x4e
     a74:	5c9a      	ldrb	r2, [r3, r2]
     a76:	0412      	lsls	r2, r2, #16
     a78:	4311      	orrs	r1, r2
     a7a:	224f      	movs	r2, #79	; 0x4f
     a7c:	5c9a      	ldrb	r2, [r3, r2]
     a7e:	0612      	lsls	r2, r2, #24
     a80:	430a      	orrs	r2, r1
     a82:	4294      	cmp	r4, r2
     a84:	d014      	beq.n	ab0 <call_module_list_remove+0x64>
     a86:	204c      	movs	r0, #76	; 0x4c
     a88:	274d      	movs	r7, #77	; 0x4d
     a8a:	264e      	movs	r6, #78	; 0x4e
     a8c:	254f      	movs	r5, #79	; 0x4f
           while(index!=NULL){
     a8e:	b16a      	cbz	r2, aac <call_module_list_remove+0x60>
			   if((index->next)==(*item)){
     a90:	5c13      	ldrb	r3, [r2, r0]
     a92:	5dd1      	ldrb	r1, [r2, r7]
     a94:	0209      	lsls	r1, r1, #8
     a96:	4319      	orrs	r1, r3
     a98:	5d93      	ldrb	r3, [r2, r6]
     a9a:	041b      	lsls	r3, r3, #16
     a9c:	4319      	orrs	r1, r3
     a9e:	5d53      	ldrb	r3, [r2, r5]
     aa0:	061b      	lsls	r3, r3, #24
     aa2:	430b      	orrs	r3, r1
     aa4:	429c      	cmp	r4, r3
     aa6:	d004      	beq.n	ab2 <call_module_list_remove+0x66>
     aa8:	001a      	movs	r2, r3
     aaa:	e7f0      	b.n	a8e <call_module_list_remove+0x42>
		   return SOS_ERROR_INVAL;
     aac:	2002      	movs	r0, #2
     aae:	e01d      	b.n	aec <call_module_list_remove+0xa0>
			   if((index->next)==(*item)){
     ab0:	001a      	movs	r2, r3
				   index->next=(*item)->next;
     ab2:	254c      	movs	r5, #76	; 0x4c
     ab4:	5d63      	ldrb	r3, [r4, r5]
     ab6:	204d      	movs	r0, #77	; 0x4d
     ab8:	5c21      	ldrb	r1, [r4, r0]
     aba:	0209      	lsls	r1, r1, #8
     abc:	4319      	orrs	r1, r3
     abe:	264e      	movs	r6, #78	; 0x4e
     ac0:	5da3      	ldrb	r3, [r4, r6]
     ac2:	041b      	lsls	r3, r3, #16
     ac4:	4319      	orrs	r1, r3
     ac6:	274f      	movs	r7, #79	; 0x4f
     ac8:	5de3      	ldrb	r3, [r4, r7]
     aca:	061b      	lsls	r3, r3, #24
     acc:	430b      	orrs	r3, r1
     ace:	5553      	strb	r3, [r2, r5]
     ad0:	0a19      	lsrs	r1, r3, #8
     ad2:	5411      	strb	r1, [r2, r0]
     ad4:	0c19      	lsrs	r1, r3, #16
     ad6:	5591      	strb	r1, [r2, r6]
     ad8:	0e1b      	lsrs	r3, r3, #24
     ada:	55d3      	strb	r3, [r2, r7]
				   memory_free(*item);
     adc:	4663      	mov	r3, ip
     ade:	6818      	ldr	r0, [r3, #0]
     ae0:	f640 4327 	movw	r3, #3111	; 0xc27
     ae4:	f2c0 0300 	movt	r3, #0
     ae8:	4798      	blx	r3
				    return SOS_SUCCESS;
     aea:	2000      	movs	r0, #0
	}
}
     aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return SOS_ERROR_INVAL; 
     aee:	2002      	movs	r0, #2
     af0:	e7fc      	b.n	aec <call_module_list_remove+0xa0>
	...

00000af4 <SOS_invoke_command>:
){
     af4:	b5f0      	push	{r4, r5, r6, r7, lr}
     af6:	b083      	sub	sp, #12
     af8:	000d      	movs	r5, r1
     afa:	0016      	movs	r6, r2
    for(;i<modules_index;i++){
     afc:	f240 038c 	movw	r3, #140	; 0x8c
     b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b04:	6819      	ldr	r1, [r3, #0]
     b06:	2900      	cmp	r1, #0
     b08:	d100      	bne.n	b0c <SOS_invoke_command+0x18>
     b0a:	e07b      	b.n	c04 <sys_call_return_label+0x1a>
        if(modules[i].module_id==module_id){
     b0c:	f241 03c4 	movw	r3, #4292	; 0x10c4
     b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	4298      	cmp	r0, r3
     b18:	d100      	bne.n	b1c <SOS_invoke_command+0x28>
     b1a:	e076      	b.n	c0a <sys_call_return_label+0x20>
     b1c:	4b3c      	ldr	r3, [pc, #240]	; (c10 <sys_call_return_label+0x26>)
     b1e:	2400      	movs	r4, #0
    for(;i<modules_index;i++){
     b20:	3401      	adds	r4, #1
     b22:	428c      	cmp	r4, r1
     b24:	d100      	bne.n	b28 <SOS_invoke_command+0x34>
     b26:	e06d      	b.n	c04 <sys_call_return_label+0x1a>
     b28:	3314      	adds	r3, #20
        if(modules[i].module_id==module_id){
     b2a:	001a      	movs	r2, r3
     b2c:	3a14      	subs	r2, #20
     b2e:	6812      	ldr	r2, [r2, #0]
     b30:	4282      	cmp	r2, r0
     b32:	d1f5      	bne.n	b20 <SOS_invoke_command+0x2c>
		   call_module_list_add(&cur_call_moudle_frame);
     b34:	a801      	add	r0, sp, #4
     b36:	f640 13c7 	movw	r3, #2503	; 0x9c7
     b3a:	f2c0 0300 	movt	r3, #0
     b3e:	4798      	blx	r3
           cur_call_moudle_frame->cur_call_ID=call_ID;
     b40:	f240 0200 	movw	r2, #0
     b44:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b48:	6813      	ldr	r3, [r2, #0]
     b4a:	9901      	ldr	r1, [sp, #4]
     b4c:	2044      	movs	r0, #68	; 0x44
     b4e:	540b      	strb	r3, [r1, r0]
     b50:	0a1f      	lsrs	r7, r3, #8
     b52:	3001      	adds	r0, #1
     b54:	540f      	strb	r7, [r1, r0]
     b56:	0c1f      	lsrs	r7, r3, #16
     b58:	3001      	adds	r0, #1
     b5a:	540f      	strb	r7, [r1, r0]
     b5c:	0e1f      	lsrs	r7, r3, #24
     b5e:	3001      	adds	r0, #1
     b60:	540f      	strb	r7, [r1, r0]
           call_ID++;
     b62:	3301      	adds	r3, #1
     b64:	6013      	str	r3, [r2, #0]
           StackType_t module_stack_alloced = memory_alloc(SOS_MODULE_STACK_SIZE);
     b66:	f240 4000 	movw	r0, #1024	; 0x400
     b6a:	f640 4319 	movw	r3, #3097	; 0xc19
     b6e:	f2c0 0300 	movt	r3, #0
     b72:	4798      	blx	r3
     b74:	0007      	movs	r7, r0
		   cur_call_moudle_frame->module_stack=module_stack_alloced;
     b76:	9b01      	ldr	r3, [sp, #4]
     b78:	2248      	movs	r2, #72	; 0x48
     b7a:	5498      	strb	r0, [r3, r2]
     b7c:	0a01      	lsrs	r1, r0, #8
     b7e:	3201      	adds	r2, #1
     b80:	5499      	strb	r1, [r3, r2]
     b82:	0c01      	lsrs	r1, r0, #16
     b84:	3201      	adds	r2, #1
     b86:	5499      	strb	r1, [r3, r2]
     b88:	0e01      	lsrs	r1, r0, #24
     b8a:	3201      	adds	r2, #1
     b8c:	5499      	strb	r1, [r3, r2]
		   __asm volatile(
     b8e:	b43f      	push	{r0, r1, r2, r3, r4, r5}
     b90:	b430      	push	{r4, r5}
     b92:	1c1c      	adds	r4, r3, #0
     b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     b96:	1c23      	adds	r3, r4, #0
     b98:	bc30      	pop	{r4, r5}
     b9a:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
     b9c:	4640      	mov	r0, r8
     b9e:	4649      	mov	r1, r9
     ba0:	4652      	mov	r2, sl
     ba2:	465c      	mov	r4, fp
     ba4:	c317      	stmia	r3!, {r0, r1, r2, r4}
     ba6:	f3ef 8008 	mrs	r0, MSP
     baa:	3018      	adds	r0, #24
     bac:	f3ef 8114 	mrs	r1, CONTROL
     bb0:	4a18      	ldr	r2, [pc, #96]	; (c14 <sys_call_return_label+0x2a>)
     bb2:	2401      	movs	r4, #1
     bb4:	4322      	orrs	r2, r4
     bb6:	4674      	mov	r4, lr
     bb8:	f3ef 8509 	mrs	r5, PSP
     bbc:	c337      	stmia	r3!, {r0, r1, r2, r4, r5}
     bbe:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
		   module_stack=module_stack_alloced+SOS_MODULE_STACK_SIZE;
     bc0:	f240 4300 	movw	r3, #1024	; 0x400
     bc4:	18c3      	adds	r3, r0, r3
		   module_stack = ROUNDDOWN(module_stack,DOUBLEWORD);
     bc6:	3a0c      	subs	r2, #12
     bc8:	4393      	bics	r3, r2
			call_module( command_id,operation,&modules[i],module_stack);
     bca:	00a2      	lsls	r2, r4, #2
     bcc:	1912      	adds	r2, r2, r4
     bce:	0092      	lsls	r2, r2, #2
     bd0:	f241 01c4 	movw	r1, #4292	; 0x10c4
     bd4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bd8:	468c      	mov	ip, r1
     bda:	4462      	add	r2, ip
     bdc:	0031      	movs	r1, r6
     bde:	0028      	movs	r0, r5
     be0:	f640 1461 	movw	r4, #2401	; 0x961
     be4:	f2c0 0400 	movt	r4, #0
     be8:	47a0      	blx	r4

00000bea <sys_call_return_label>:
			__asm volatile
     bea:	1c04      	adds	r4, r0, #0
			memory_free(module_stack_alloced);
     bec:	0038      	movs	r0, r7
     bee:	f640 4327 	movw	r3, #3111	; 0xc27
     bf2:	f2c0 0300 	movt	r3, #0
     bf6:	4798      	blx	r3
			call_module_list_remove(&cur_call_moudle_frame);
     bf8:	a801      	add	r0, sp, #4
     bfa:	f640 234d 	movw	r3, #2637	; 0xa4d
     bfe:	f2c0 0300 	movt	r3, #0
     c02:	4798      	blx	r3
}
     c04:	0020      	movs	r0, r4
     c06:	b003      	add	sp, #12
     c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int i=0;
     c0a:	2400      	movs	r4, #0
     c0c:	e792      	b.n	b34 <SOS_invoke_command+0x40>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	200010d8 	.word	0x200010d8
     c14:	00000bea 	.word	0x00000bea

00000c18 <memory_alloc>:


#include "inc/memory.h"
#include "secure_heap.h"

void* memory_alloc(size_t size){
     c18:	b510      	push	{r4, lr}
	return pvPortMalloc(size);
     c1a:	f640 63d3 	movw	r3, #3795	; 0xed3
     c1e:	f2c0 0300 	movt	r3, #0
     c22:	4798      	blx	r3
}
     c24:	bd10      	pop	{r4, pc}

00000c26 <memory_free>:

void memory_free(void *pv){
     c26:	b510      	push	{r4, lr}
	vPortFree(pv);
     c28:	f241 0319 	movw	r3, #4121	; 0x1019
     c2c:	f2c0 0300 	movt	r3, #0
     c30:	4798      	blx	r3
}
     c32:	bd10      	pop	{r4, pc}

00000c34 <sos_return>:
	}
}


void sos_return(struct CallModuleFrame* index){
	__asm volatile(
     c34:	1c04      	adds	r4, r0, #0
     c36:	3430      	adds	r4, #48	; 0x30
     c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     c3a:	f380 8808 	msr	MSP, r0
     c3e:	f381 8814 	msr	CONTROL, r1
     c42:	2101      	movs	r1, #1
     c44:	430b      	orrs	r3, r1
     c46:	469e      	mov	lr, r3
     c48:	cc08      	ldmia	r4!, {r3}
     c4a:	f383 8809 	msr	PSP, r3
     c4e:	b404      	push	{r2}
     c50:	3c44      	subs	r4, #68	; 0x44
     c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     c54:	b401      	push	{r0}
     c56:	1c20      	adds	r0, r4, #0
     c58:	3010      	adds	r0, #16
     c5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     c5c:	46a0      	mov	r8, r4
     c5e:	46a9      	mov	r9, r5
     c60:	46b2      	mov	sl, r6
     c62:	46bb      	mov	fp, r7
     c64:	3820      	subs	r0, #32
     c66:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     c68:	bc01      	pop	{r0}
     c6a:	bd00      	pop	{pc}

00000c6c <vPortSVCHandler_C>:
{
     c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c6e:	46de      	mov	lr, fp
     c70:	4657      	mov	r7, sl
     c72:	464e      	mov	r6, r9
     c74:	4645      	mov	r5, r8
     c76:	b5e0      	push	{r5, r6, r7, lr}
	uint32_t a1 = pulCallerStackAddress[8];
     c78:	6a03      	ldr	r3, [r0, #32]
     c7a:	4699      	mov	r9, r3
	uint32_t a2 = pulCallerStackAddress[9];
     c7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
     c7e:	469a      	mov	sl, r3
	uint32_t a3 = pulCallerStackAddress[10];
     c80:	6a83      	ldr	r3, [r0, #40]	; 0x28
     c82:	469b      	mov	fp, r3
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
     c84:	6983      	ldr	r3, [r0, #24]
     c86:	3b02      	subs	r3, #2
	switch( ucSVCNumber )
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	2b04      	cmp	r3, #4
     c8c:	d041      	beq.n	d12 <vPortSVCHandler_C+0xa6>
     c8e:	2b05      	cmp	r3, #5
     c90:	d147      	bne.n	d22 <vPortSVCHandler_C+0xb6>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
     c92:	f3ef 8309 	mrs	r3, PSP
			call_ID_from_stack=*module_stack;
     c96:	6c5d      	ldr	r5, [r3, #68]	; 0x44
			index=call_moudle_frame_head->next;
     c98:	f240 0304 	movw	r3, #4
     c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ca0:	681a      	ldr	r2, [r3, #0]
     ca2:	234c      	movs	r3, #76	; 0x4c
     ca4:	5cd4      	ldrb	r4, [r2, r3]
     ca6:	3301      	adds	r3, #1
     ca8:	5cd3      	ldrb	r3, [r2, r3]
     caa:	021b      	lsls	r3, r3, #8
     cac:	4323      	orrs	r3, r4
     cae:	214e      	movs	r1, #78	; 0x4e
     cb0:	5c54      	ldrb	r4, [r2, r1]
     cb2:	0424      	lsls	r4, r4, #16
     cb4:	4323      	orrs	r3, r4
     cb6:	3101      	adds	r1, #1
     cb8:	5c54      	ldrb	r4, [r2, r1]
     cba:	0624      	lsls	r4, r4, #24
     cbc:	431c      	orrs	r4, r3
			while(index!=NULL){
     cbe:	b344      	cbz	r4, d12 <vPortSVCHandler_C+0xa6>
				if(index->cur_call_ID==call_ID_from_stack){
     cc0:	f240 0844 	movw	r8, #68	; 0x44
     cc4:	2745      	movs	r7, #69	; 0x45
     cc6:	2646      	movs	r6, #70	; 0x46
     cc8:	e00e      	b.n	ce8 <vPortSVCHandler_C+0x7c>
				index=index->next;
     cca:	234c      	movs	r3, #76	; 0x4c
     ccc:	5ce2      	ldrb	r2, [r4, r3]
     cce:	3301      	adds	r3, #1
     cd0:	5ce3      	ldrb	r3, [r4, r3]
     cd2:	021b      	lsls	r3, r3, #8
     cd4:	431a      	orrs	r2, r3
     cd6:	234e      	movs	r3, #78	; 0x4e
     cd8:	5ce3      	ldrb	r3, [r4, r3]
     cda:	041b      	lsls	r3, r3, #16
     cdc:	4313      	orrs	r3, r2
     cde:	224f      	movs	r2, #79	; 0x4f
     ce0:	5ca4      	ldrb	r4, [r4, r2]
     ce2:	0624      	lsls	r4, r4, #24
     ce4:	431c      	orrs	r4, r3
			while(index!=NULL){
     ce6:	b1a4      	cbz	r4, d12 <vPortSVCHandler_C+0xa6>
				if(index->cur_call_ID==call_ID_from_stack){
     ce8:	4643      	mov	r3, r8
     cea:	5ce3      	ldrb	r3, [r4, r3]
     cec:	5de2      	ldrb	r2, [r4, r7]
     cee:	0212      	lsls	r2, r2, #8
     cf0:	431a      	orrs	r2, r3
     cf2:	5da3      	ldrb	r3, [r4, r6]
     cf4:	041b      	lsls	r3, r3, #16
     cf6:	431a      	orrs	r2, r3
     cf8:	2347      	movs	r3, #71	; 0x47
     cfa:	5ce3      	ldrb	r3, [r4, r3]
     cfc:	061b      	lsls	r3, r3, #24
     cfe:	4313      	orrs	r3, r2
     d00:	429d      	cmp	r5, r3
     d02:	d1e2      	bne.n	cca <vPortSVCHandler_C+0x5e>
					sos_return( index);
     d04:	0020      	movs	r0, r4
     d06:	f640 4335 	movw	r3, #3125	; 0xc35
     d0a:	f2c0 0300 	movt	r3, #0
     d0e:	4798      	blx	r3
     d10:	e7db      	b.n	cca <vPortSVCHandler_C+0x5e>
			return SOS_invoke_command((SOS_ModuleID_t)a1, (uint32_t)a2, (SOS_Operation_t *) a3);
     d12:	465a      	mov	r2, fp
     d14:	4651      	mov	r1, sl
     d16:	4648      	mov	r0, r9
     d18:	f640 23f5 	movw	r3, #2805	; 0xaf5
     d1c:	f2c0 0300 	movt	r3, #0
     d20:	4798      	blx	r3
}
     d22:	bc3c      	pop	{r2, r3, r4, r5}
     d24:	4690      	mov	r8, r2
     d26:	4699      	mov	r9, r3
     d28:	46a2      	mov	sl, r4
     d2a:	46ab      	mov	fp, r5
     d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00000d30 <SVCall_Handler>:
	);
}

void SVCall_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
     d30:	2004      	movs	r0, #4
     d32:	4671      	mov	r1, lr
     d34:	4208      	tst	r0, r1
     d36:	d003      	beq.n	d40 <stacking_used_msp>
     d38:	f3ef 8009 	mrs	r0, PSP
     d3c:	4a04      	ldr	r2, [pc, #16]	; (d50 <svchandler_address_const>)
     d3e:	4710      	bx	r2

00000d40 <stacking_used_msp>:
     d40:	f3ef 8008 	mrs	r0, MSP
     d44:	4a02      	ldr	r2, [pc, #8]	; (d50 <svchandler_address_const>)
     d46:	4710      	bx	r2
     d48:	46c0      	nop			; (mov r8, r8)
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	46c0      	nop			; (mov r8, r8)
     d4e:	46c0      	nop			; (mov r8, r8)

00000d50 <svchandler_address_const>:
     d50:	00000c6d 	.word	0x00000c6d

00000d54 <syscall_return>:


static inline int32_t
syscall(uint8_t num,uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4){
	int32_t ret;
	__asm volatile
     d54:	2109      	movs	r1, #9
     d56:	2204      	movs	r2, #4
     d58:	2303      	movs	r3, #3
     d5a:	b4f0      	push	{r4, r5, r6, r7}
     d5c:	1c04      	adds	r4, r0, #0
     d5e:	1c1d      	adds	r5, r3, #0
     d60:	1c16      	adds	r6, r2, #0
     d62:	1c0f      	adds	r7, r1, #0
     d64:	b480      	push	{r7}
     d66:	b440      	push	{r6}
     d68:	b420      	push	{r5}
     d6a:	b410      	push	{r4}
     d6c:	df05      	svc	5
     d6e:	b004      	add	sp, #16
     d70:	bcf0      	pop	{r4, r5, r6, r7}
}

void syscall_return(int ret){

	syscall(SYS_module_return,ret,3,4,9);
}
     d72:	4770      	bx	lr

00000d74 <syscall_nsc_call_module>:
	__asm volatile
     d74:	2300      	movs	r3, #0
     d76:	b4f0      	push	{r4, r5, r6, r7}
     d78:	1c04      	adds	r4, r0, #0
     d7a:	1c0d      	adds	r5, r1, #0
     d7c:	1c16      	adds	r6, r2, #0
     d7e:	1c1f      	adds	r7, r3, #0
     d80:	b480      	push	{r7}
     d82:	b440      	push	{r6}
     d84:	b420      	push	{r5}
     d86:	b410      	push	{r4}
     d88:	df04      	svc	4
     d8a:	b004      	add	sp, #16
     d8c:	bcf0      	pop	{r4, r5, r6, r7}

void syscall_nsc_call_module(uint32_t module_id,uint32_t command_id,uint32_t *operation){
	syscall(SYS_nsc_call_module, module_id, command_id, operation, 0);
     d8e:	4770      	bx	lr

00000d90 <invoke_entry>:

SOS_Result_t invoke_entry(
    uint32_t command_id,
    SOS_Operation_t  *operation
){
    switch (command_id)
     d90:	2801      	cmp	r0, #1
     d92:	d007      	beq.n	da4 <invoke_entry+0x14>
     d94:	2802      	cmp	r0, #2
     d96:	d00f      	beq.n	db8 <invoke_entry+0x28>
            break;
        }
            
    }

     syscall_return(SYS_module_return);
     d98:	2005      	movs	r0, #5
     d9a:	f640 5355 	movw	r3, #3413	; 0xd55
     d9e:	f2c0 0300 	movt	r3, #0
     da2:	4798      	blx	r3
            printf("l m test module of ping\r\n");
     da4:	f242 302c 	movw	r0, #9004	; 0x232c
     da8:	f2c0 0000 	movt	r0, #0
     dac:	f241 3365 	movw	r3, #4965	; 0x1365
     db0:	f2c0 0300 	movt	r3, #0
     db4:	4798      	blx	r3
            break;
     db6:	e7ef      	b.n	d98 <invoke_entry+0x8>
			 printf("l m test module of pong\r\n");
     db8:	f242 3048 	movw	r0, #9032	; 0x2348
     dbc:	f2c0 0000 	movt	r0, #0
     dc0:	f241 3365 	movw	r3, #4965	; 0x1365
     dc4:	f2c0 0300 	movt	r3, #0
     dc8:	4798      	blx	r3
			 break;
     dca:	e7e5      	b.n	d98 <invoke_entry+0x8>

00000dcc <init_test_module>:
}

SOS_Result_t init_test_module(){
     dcc:	b510      	push	{r4, lr}
    return add_module(invoke_entry,SOS_TEST_MOUDLE_ID,maniifest);
     dce:	f240 0390 	movw	r3, #144	; 0x90
     dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dd6:	681a      	ldr	r2, [r3, #0]
     dd8:	f640 5091 	movw	r0, #3473	; 0xd91
     ddc:	f2c0 0000 	movt	r0, #0
     de0:	f241 2134 	movw	r1, #4660	; 0x1234
     de4:	f640 131d 	movw	r3, #2333	; 0x91d
     de8:	f2c0 0300 	movt	r3, #0
     dec:	4798      	blx	r3
    
}
     dee:	bd10      	pop	{r4, pc}

00000df0 <func_plus3>:
/**
 * \brief This function will return a value of input parameter plus three.
 */
int func_plus3(int x)
{
	return x + 3;
     df0:	3003      	adds	r0, #3
}
     df2:	4770      	bx	lr

00000df4 <func_minus2>:
/**
 * \brief This function will return a value of input parameter minus two.
 */
int func_minus2(int x)
{
	return x - 2;
     df4:	3802      	subs	r0, #2
}
     df6:	4770      	bx	lr

00000df8 <main>:
 * - Sets the non-secure main stack (MSP_NS)
 * - Gets the non-secure reset handler
 * - Jumps to the non-secure software application
 */
int main(void)
{
     df8:	b510      	push	{r4, lr}
	funcptr_void NonSecure_ResetHandler;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     dfa:	f240 23a5 	movw	r3, #677	; 0x2a5
     dfe:	f2c0 0300 	movt	r3, #0
     e02:	4798      	blx	r3
	
	/* Init the SOS kernel */
	kernel_init();
     e04:	f640 03df 	movw	r3, #2271	; 0x8df
     e08:	f2c0 0300 	movt	r3, #0
     e0c:	4798      	blx	r3
	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(CONF_TZ_START_NS)));
     e0e:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	f383 8888 	msr	MSP_NS, r3

	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((CONF_TZ_START_NS) + 4U)));
     e18:	f248 0304 	movw	r3, #32772	; 0x8004

	/* Start non-secure state software application */
	NonSecure_ResetHandler();
     e1c:	681c      	ldr	r4, [r3, #0]
     e1e:	0864      	lsrs	r4, r4, #1
     e20:	0064      	lsls	r4, r4, #1
     e22:	0020      	movs	r0, r4
     e24:	0021      	movs	r1, r4
     e26:	0022      	movs	r2, r4
     e28:	0023      	movs	r3, r4
     e2a:	f000 f9dd 	bl	11e8 <__gnu_cmse_nonsecure_call>

	/* Replace with your application code */
	while (1) {
		__NOP();
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	e7fd      	b.n	e2e <main+0x36>

00000e32 <__acle_se_SecureContext_LoadContext>:
     e32:	f3ef 8105 	mrs	r1, IPSR
     e36:	b121      	cbz	r1, e42 <load_ctx_therad_mode>
     e38:	c806      	ldmia	r0!, {r1, r2}
     e3a:	f382 880b 	msr	PSPLIM, r2
     e3e:	f381 8809 	msr	PSP, r1

00000e42 <load_ctx_therad_mode>:
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	2000      	movs	r0, #0
     e46:	0001      	movs	r1, r0
     e48:	0002      	movs	r2, r0
     e4a:	0003      	movs	r3, r0
     e4c:	4684      	mov	ip, r0
     e4e:	f38e 8800 	msr	CPSR_f, lr
     e52:	4774      	bxns	lr

00000e54 <__acle_se_SecureContext_SaveContext>:
     e54:	f3ef 8105 	mrs	r1, IPSR
     e58:	b139      	cbz	r1, e6a <save_ctx_therad_mode>
     e5a:	f3ef 8109 	mrs	r1, PSP
     e5e:	6001      	str	r1, [r0, #0]
     e60:	2100      	movs	r1, #0
     e62:	f381 880b 	msr	PSPLIM, r1
     e66:	f381 8809 	msr	PSP, r1

00000e6a <save_ctx_therad_mode>:
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	2000      	movs	r0, #0
     e6e:	0001      	movs	r1, r0
     e70:	0002      	movs	r2, r0
     e72:	0003      	movs	r3, r0
     e74:	4684      	mov	ip, r0
     e76:	f38e 8800 	msr	CPSR_f, lr
     e7a:	4774      	bxns	lr

00000e7c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * secureheapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     e7c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 * than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     e7e:	f240 0394 	movw	r3, #148	; 0x94
     e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e86:	681a      	ldr	r2, [r3, #0]
     e88:	4282      	cmp	r2, r0
     e8a:	d31c      	bcc.n	ec6 <prvInsertBlockIntoFreeList+0x4a>
	}

	/* Do the block being inserted, and the block it is being inserted after
	 * make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     e8c:	685c      	ldr	r4, [r3, #4]
     e8e:	1919      	adds	r1, r3, r4
     e90:	4288      	cmp	r0, r1
     e92:	d103      	bne.n	e9c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     e94:	6841      	ldr	r1, [r0, #4]
     e96:	1909      	adds	r1, r1, r4
     e98:	6059      	str	r1, [r3, #4]
     e9a:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	 * make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     e9c:	6844      	ldr	r4, [r0, #4]
     e9e:	1901      	adds	r1, r0, r4
     ea0:	428a      	cmp	r2, r1
     ea2:	d114      	bne.n	ece <prvInsertBlockIntoFreeList+0x52>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     ea4:	f240 0194 	movw	r1, #148	; 0x94
     ea8:	f2c2 0100 	movt	r1, #8192	; 0x2000
     eac:	6889      	ldr	r1, [r1, #8]
     eae:	428a      	cmp	r2, r1
     eb0:	d00b      	beq.n	eca <prvInsertBlockIntoFreeList+0x4e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     eb2:	6852      	ldr	r2, [r2, #4]
     eb4:	1912      	adds	r2, r2, r4
     eb6:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     eb8:	681a      	ldr	r2, [r3, #0]
     eba:	6812      	ldr	r2, [r2, #0]
     ebc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	 * before and the block after, then it's pxNextFreeBlock pointer will have
	 * already been set, and should not be set here as that would make it point
	 * to itself. */
	if( pxIterator != pxBlockToInsert )
     ebe:	4298      	cmp	r0, r3
     ec0:	d000      	beq.n	ec4 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     ec2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     ec4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     ec6:	0013      	movs	r3, r2
     ec8:	e7dd      	b.n	e86 <prvInsertBlockIntoFreeList+0xa>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     eca:	6002      	str	r2, [r0, #0]
     ecc:	e7f7      	b.n	ebe <prvInsertBlockIntoFreeList+0x42>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     ece:	6002      	str	r2, [r0, #0]
     ed0:	e7f5      	b.n	ebe <prvInsertBlockIntoFreeList+0x42>

00000ed2 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	/* If this is the first call to malloc then the heap will require
	 * initialisation to setup the list of free blocks. */
	if( pxEnd == NULL )
     ed4:	f240 0394 	movw	r3, #148	; 0x94
     ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     edc:	689b      	ldr	r3, [r3, #8]
     ede:	b313      	cbz	r3, f26 <pvPortMalloc+0x54>

	/* Check the requested block size is not so large that the top bit is set.
	 * The top bit of the block size member of the BlockLink_t structure is used
	 * to determine who owns the block - the application or the kernel, so it
	 * must be free. */
	if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ee0:	f241 0394 	movw	r3, #4244	; 0x1094
     ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ee8:	695e      	ldr	r6, [r3, #20]
     eea:	4230      	tst	r0, r6
     eec:	d000      	beq.n	ef0 <pvPortMalloc+0x1e>
     eee:	e089      	b.n	1004 <pvPortMalloc+0x132>
	{
		/* The wanted size is increased so it can contain a BlockLink_t
		 * structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     ef0:	2800      	cmp	r0, #0
     ef2:	d100      	bne.n	ef6 <pvPortMalloc+0x24>
     ef4:	e088      	b.n	1008 <pvPortMalloc+0x136>
		{
			xWantedSize += xHeapStructSize;
     ef6:	0003      	movs	r3, r0
     ef8:	3308      	adds	r3, #8

			/* Ensure that blocks are always aligned to the required number of
			 * bytes. */
			if( ( xWantedSize & secureportBYTE_ALIGNMENT_MASK ) != 0x00 )
     efa:	075a      	lsls	r2, r3, #29
     efc:	d002      	beq.n	f04 <pvPortMalloc+0x32>
			{
				/* Byte alignment required. */
				xWantedSize += ( secureportBYTE_ALIGNMENT - ( xWantedSize & secureportBYTE_ALIGNMENT_MASK ) );
     efe:	2207      	movs	r2, #7
     f00:	4393      	bics	r3, r2
     f02:	3308      	adds	r3, #8
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     f04:	2b00      	cmp	r3, #0
     f06:	d100      	bne.n	f0a <pvPortMalloc+0x38>
     f08:	e080      	b.n	100c <pvPortMalloc+0x13a>
     f0a:	f241 0294 	movw	r2, #4244	; 0x1094
     f0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f12:	6917      	ldr	r7, [r2, #16]
     f14:	42bb      	cmp	r3, r7
     f16:	d900      	bls.n	f1a <pvPortMalloc+0x48>
     f18:	e07a      	b.n	1010 <pvPortMalloc+0x13e>
		{
			/* Traverse the list from the start (lowest address) block until
			 * one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     f1a:	f240 0294 	movw	r2, #148	; 0x94
     f1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f22:	6814      	ldr	r4, [r2, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f24:	e02d      	b.n	f82 <pvPortMalloc+0xb0>
	uxAddress = ( size_t ) ucHeap;
     f26:	f240 0394 	movw	r3, #148	; 0x94
     f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f2e:	330c      	adds	r3, #12
size_t xTotalHeapSize = secureconfigTOTAL_HEAP_SIZE;
     f30:	f241 0200 	movw	r2, #4096	; 0x1000
	if( ( uxAddress & secureportBYTE_ALIGNMENT_MASK ) != 0 )
     f34:	0759      	lsls	r1, r3, #29
     f36:	d007      	beq.n	f48 <pvPortMalloc+0x76>
		uxAddress += ( secureportBYTE_ALIGNMENT - 1 );
     f38:	1dd9      	adds	r1, r3, #7
		uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     f3a:	2207      	movs	r2, #7
     f3c:	4391      	bics	r1, r2
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
     f3e:	f241 0c00 	movw	ip, #4096	; 0x1000
     f42:	4463      	add	r3, ip
     f44:	1a5a      	subs	r2, r3, r1
		uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     f46:	000b      	movs	r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     f48:	f240 0194 	movw	r1, #148	; 0x94
     f4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f50:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
     f52:	2400      	movs	r4, #0
     f54:	604c      	str	r4, [r1, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     f56:	189a      	adds	r2, r3, r2
	uxAddress -= xHeapStructSize;
     f58:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) secureportBYTE_ALIGNMENT_MASK );
     f5a:	2507      	movs	r5, #7
     f5c:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
     f5e:	608a      	str	r2, [r1, #8]
	pxEnd->xBlockSize = 0;
     f60:	6054      	str	r4, [r2, #4]
	pxEnd->pxNextFreeBlock = NULL;
     f62:	6014      	str	r4, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     f64:	1ad1      	subs	r1, r2, r3
     f66:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     f68:	601a      	str	r2, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     f6a:	f241 0394 	movw	r3, #4244	; 0x1094
     f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f72:	60d9      	str	r1, [r3, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     f74:	6119      	str	r1, [r3, #16]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * secureheapBITS_PER_BYTE ) - 1 );
     f76:	2280      	movs	r2, #128	; 0x80
     f78:	0612      	lsls	r2, r2, #24
     f7a:	615a      	str	r2, [r3, #20]
     f7c:	e7b0      	b.n	ee0 <pvPortMalloc+0xe>
     f7e:	0022      	movs	r2, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     f80:	000c      	movs	r4, r1
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f82:	6861      	ldr	r1, [r4, #4]
     f84:	428b      	cmp	r3, r1
     f86:	d902      	bls.n	f8e <pvPortMalloc+0xbc>
     f88:	6821      	ldr	r1, [r4, #0]
     f8a:	2900      	cmp	r1, #0
     f8c:	d1f7      	bne.n	f7e <pvPortMalloc+0xac>
			}

			/* If the end marker was reached then a block of adequate size was
			 * not found. */
			if( pxBlock != pxEnd )
     f8e:	f240 0194 	movw	r1, #148	; 0x94
     f92:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f96:	6889      	ldr	r1, [r1, #8]
     f98:	428c      	cmp	r4, r1
     f9a:	d03b      	beq.n	1014 <pvPortMalloc+0x142>
			{
				/* Return the memory space pointed to - jumping over the
				 * BlockLink_t structure at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     f9c:	6815      	ldr	r5, [r2, #0]

				/* This block is being returned for use so must be taken out
				 * of the list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     f9e:	6821      	ldr	r1, [r4, #0]
     fa0:	6011      	str	r1, [r2, #0]

				/* If the block is larger than required it can be split into
				 * two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > secureheapMINIMUM_BLOCK_SIZE )
     fa2:	6862      	ldr	r2, [r4, #4]
     fa4:	1ad2      	subs	r2, r2, r3
     fa6:	2a10      	cmp	r2, #16
     fa8:	d90f      	bls.n	fca <pvPortMalloc+0xf8>
				{
					/* This block is to be split into two.  Create a new
					 * block following the number of bytes requested. The void
					 * cast is used to prevent byte alignment warnings from the
					 * compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     faa:	18e0      	adds	r0, r4, r3
					secureportASSERT( ( ( ( size_t ) pxNewBlockLink ) & secureportBYTE_ALIGNMENT_MASK ) == 0 );
     fac:	0741      	lsls	r1, r0, #29
     fae:	d005      	beq.n	fbc <pvPortMalloc+0xea>
     fb0:	2301      	movs	r3, #1
     fb2:	f383 8810 	msr	PRIMASK, r3
     fb6:	f383 8890 	msr	PRIMASK_NS, r3
     fba:	e7fe      	b.n	fba <pvPortMalloc+0xe8>

					/* Calculate the sizes of two blocks split from the single
					 * block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     fbc:	6042      	str	r2, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
     fbe:	6063      	str	r3, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( pxNewBlockLink );
     fc0:	f640 637d 	movw	r3, #3709	; 0xe7d
     fc4:	f2c0 0300 	movt	r3, #0
     fc8:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     fca:	6861      	ldr	r1, [r4, #4]
     fcc:	1a7f      	subs	r7, r7, r1
     fce:	f241 0294 	movw	r2, #4244	; 0x1094
     fd2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     fd6:	6117      	str	r7, [r2, #16]

				if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     fd8:	68d2      	ldr	r2, [r2, #12]
     fda:	4297      	cmp	r7, r2
     fdc:	d204      	bcs.n	fe8 <pvPortMalloc+0x116>
				{
					xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     fde:	f241 0294 	movw	r2, #4244	; 0x1094
     fe2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     fe6:	60d7      	str	r7, [r2, #12]
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     fe8:	0028      	movs	r0, r5
     fea:	3008      	adds	r0, #8
					mtCOVERAGE_TEST_MARKER();
				}

				/* The block is being returned - it is allocated and owned by
				 * the application and has no "next" block. */
				pxBlock->xBlockSize |= xBlockAllocatedBit;
     fec:	430e      	orrs	r6, r1
     fee:	6066      	str	r6, [r4, #4]
				pxBlock->pxNextFreeBlock = NULL;
     ff0:	2300      	movs	r3, #0
     ff2:	6023      	str	r3, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	secureportASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) secureportBYTE_ALIGNMENT_MASK ) == 0 );
     ff4:	0743      	lsls	r3, r0, #29
     ff6:	d008      	beq.n	100a <pvPortMalloc+0x138>
     ff8:	2301      	movs	r3, #1
     ffa:	f383 8810 	msr	PRIMASK, r3
     ffe:	f383 8890 	msr	PRIMASK_NS, r3
    1002:	e7fe      	b.n	1002 <pvPortMalloc+0x130>
    1004:	2000      	movs	r0, #0
    1006:	e000      	b.n	100a <pvPortMalloc+0x138>
void *pvReturn = NULL;
    1008:	2000      	movs	r0, #0
	return pvReturn;
}
    100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    100c:	2000      	movs	r0, #0
    100e:	e7fc      	b.n	100a <pvPortMalloc+0x138>
    1010:	2000      	movs	r0, #0
    1012:	e7fa      	b.n	100a <pvPortMalloc+0x138>
    1014:	2000      	movs	r0, #0
	return pvReturn;
    1016:	e7f8      	b.n	100a <pvPortMalloc+0x138>

00001018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1018:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    101a:	b380      	cbz	r0, 107e <vPortFree+0x66>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		secureportASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    101c:	0003      	movs	r3, r0
    101e:	3b08      	subs	r3, #8
    1020:	685b      	ldr	r3, [r3, #4]
    1022:	f241 0294 	movw	r2, #4244	; 0x1094
    1026:	f2c2 0200 	movt	r2, #8192	; 0x2000
    102a:	6952      	ldr	r2, [r2, #20]
    102c:	421a      	tst	r2, r3
    102e:	d105      	bne.n	103c <vPortFree+0x24>
    1030:	2301      	movs	r3, #1
    1032:	f383 8810 	msr	PRIMASK, r3
    1036:	f383 8890 	msr	PRIMASK_NS, r3
    103a:	e7fe      	b.n	103a <vPortFree+0x22>
		secureportASSERT( pxLink->pxNextFreeBlock == NULL );
    103c:	0001      	movs	r1, r0
    103e:	3908      	subs	r1, #8
    1040:	6809      	ldr	r1, [r1, #0]
    1042:	b129      	cbz	r1, 1050 <vPortFree+0x38>
    1044:	2301      	movs	r3, #1
    1046:	f383 8810 	msr	PRIMASK, r3
    104a:	f383 8890 	msr	PRIMASK_NS, r3
    104e:	e7fe      	b.n	104e <vPortFree+0x36>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				 * allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1050:	3808      	subs	r0, #8
    1052:	4393      	bics	r3, r2
    1054:	6043      	str	r3, [r0, #4]

				secureportDISABLE_NON_SECURE_INTERRUPTS();
    1056:	2301      	movs	r3, #1
    1058:	f383 8890 	msr	PRIMASK_NS, r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    105c:	f241 0394 	movw	r3, #4244	; 0x1094
    1060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1064:	6842      	ldr	r2, [r0, #4]
    1066:	6919      	ldr	r1, [r3, #16]
    1068:	468c      	mov	ip, r1
    106a:	4462      	add	r2, ip
    106c:	611a      	str	r2, [r3, #16]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    106e:	f640 637d 	movw	r3, #3709	; 0xe7d
    1072:	f2c0 0300 	movt	r3, #0
    1076:	4798      	blx	r3
				}
				secureportENABLE_NON_SECURE_INTERRUPTS();
    1078:	2300      	movs	r3, #0
    107a:	f383 8890 	msr	PRIMASK_NS, r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    107e:	bd10      	pop	{r4, pc}

00001080 <__acle_se_SecureInit_DePrioritizeNSExceptions>:
    1080:	f3ef 8305 	mrs	r3, IPSR
    1084:	b16b      	cbz	r3, 10a2 <__acle_se_SecureInit_DePrioritizeNSExceptions+0x22>
    1086:	f64e 520c 	movw	r2, #60684	; 0xed0c
    108a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    108e:	6811      	ldr	r1, [r2, #0]
    1090:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1094:	4019      	ands	r1, r3
    1096:	f244 0300 	movw	r3, #16384	; 0x4000
    109a:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
    109e:	430b      	orrs	r3, r1
    10a0:	6013      	str	r3, [r2, #0]
    10a2:	2000      	movs	r0, #0
    10a4:	0001      	movs	r1, r0
    10a6:	0002      	movs	r2, r0
    10a8:	0003      	movs	r3, r0
    10aa:	4684      	mov	ip, r0
    10ac:	f38e 8800 	msr	CPSR_f, lr
    10b0:	4774      	bxns	lr
	...

000010b4 <__acle_se_SecureInit_EnableNSFPUAccess>:
    10b4:	f3ef 8305 	mrs	r3, IPSR
    10b8:	b1ab      	cbz	r3, 10e6 <__acle_se_SecureInit_EnableNSFPUAccess+0x32>
    10ba:	f64e 538c 	movw	r3, #60812	; 0xed8c
    10be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    10c2:	681a      	ldr	r2, [r3, #0]
    10c4:	f640 4100 	movw	r1, #3072	; 0xc00
    10c8:	430a      	orrs	r2, r1
    10ca:	601a      	str	r2, [r3, #0]
    10cc:	f64e 7334 	movw	r3, #61236	; 0xef34
    10d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    10d4:	681a      	ldr	r2, [r3, #0]
    10d6:	4908      	ldr	r1, [pc, #32]	; (10f8 <__acle_se_SecureInit_EnableNSFPUAccess+0x44>)
    10d8:	400a      	ands	r2, r1
    10da:	601a      	str	r2, [r3, #0]
    10dc:	6819      	ldr	r1, [r3, #0]
    10de:	2280      	movs	r2, #128	; 0x80
    10e0:	04d2      	lsls	r2, r2, #19
    10e2:	430a      	orrs	r2, r1
    10e4:	601a      	str	r2, [r3, #0]
    10e6:	2000      	movs	r0, #0
    10e8:	0001      	movs	r1, r0
    10ea:	0002      	movs	r2, r0
    10ec:	0003      	movs	r3, r0
    10ee:	4684      	mov	ip, r0
    10f0:	f38e 8800 	msr	CPSR_f, lr
    10f4:	4774      	bxns	lr
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	dfffffff 	.word	0xdfffffff

000010fc <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    10fc:	b510      	push	{r4, lr}
    10fe:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1100:	b960      	cbnz	r0, 111c <_read+0x20>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1102:	0011      	movs	r1, r2
    1104:	0018      	movs	r0, r3
    1106:	f241 137d 	movw	r3, #4477	; 0x117d
    110a:	f2c0 0300 	movt	r3, #0
    110e:	4798      	blx	r3
    1110:	2800      	cmp	r0, #0
    1112:	db00      	blt.n	1116 <_read+0x1a>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1114:	bd10      	pop	{r4, pc}
    1116:	2001      	movs	r0, #1
    1118:	4240      	negs	r0, r0
    111a:	e7fb      	b.n	1114 <_read+0x18>
		return -1;
    111c:	2001      	movs	r0, #1
    111e:	4240      	negs	r0, r0
    1120:	e7f8      	b.n	1114 <_read+0x18>

00001122 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1122:	b510      	push	{r4, lr}
    1124:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1126:	3801      	subs	r0, #1
    1128:	2802      	cmp	r0, #2
    112a:	d80c      	bhi.n	1146 <_write+0x24>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    112c:	0011      	movs	r1, r2
    112e:	0018      	movs	r0, r3
    1130:	f241 13a1 	movw	r3, #4513	; 0x11a1
    1134:	f2c0 0300 	movt	r3, #0
    1138:	4798      	blx	r3
    113a:	2800      	cmp	r0, #0
    113c:	db00      	blt.n	1140 <_write+0x1e>
	if (n < 0) {
		return -1;
	}

	return n;
}
    113e:	bd10      	pop	{r4, pc}
    1140:	2001      	movs	r0, #1
    1142:	4240      	negs	r0, r0
    1144:	e7fb      	b.n	113e <_write+0x1c>
		return -1;
    1146:	2001      	movs	r0, #1
    1148:	4240      	negs	r0, r0
    114a:	e7f8      	b.n	113e <_write+0x1c>

0000114c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    114c:	b570      	push	{r4, r5, r6, lr}
    114e:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1150:	f240 0508 	movw	r5, #8
    1154:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1158:	682b      	ldr	r3, [r5, #0]
    115a:	6898      	ldr	r0, [r3, #8]
    115c:	2100      	movs	r1, #0
    115e:	f241 3479 	movw	r4, #4985	; 0x1379
    1162:	f2c0 0400 	movt	r4, #0
    1166:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1168:	682b      	ldr	r3, [r5, #0]
    116a:	6858      	ldr	r0, [r3, #4]
    116c:	2100      	movs	r1, #0
    116e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1170:	f241 03ac 	movw	r3, #4268	; 0x10ac
    1174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1178:	601e      	str	r6, [r3, #0]
}
    117a:	bd70      	pop	{r4, r5, r6, pc}

0000117c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    117c:	b510      	push	{r4, lr}
    117e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1180:	f241 03ac 	movw	r3, #4268	; 0x10ac
    1184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1188:	6818      	ldr	r0, [r3, #0]
    118a:	b138      	cbz	r0, 119c <stdio_io_read+0x20>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    118c:	b28a      	uxth	r2, r1
    118e:	0021      	movs	r1, r4
    1190:	f240 438b 	movw	r3, #1163	; 0x48b
    1194:	f2c0 0300 	movt	r3, #0
    1198:	4798      	blx	r3
}
    119a:	bd10      	pop	{r4, pc}
		return 0;
    119c:	2000      	movs	r0, #0
    119e:	e7fc      	b.n	119a <stdio_io_read+0x1e>

000011a0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    11a0:	b510      	push	{r4, lr}
    11a2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    11a4:	f241 03ac 	movw	r3, #4268	; 0x10ac
    11a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11ac:	6818      	ldr	r0, [r3, #0]
    11ae:	b138      	cbz	r0, 11c0 <stdio_io_write+0x20>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    11b0:	b28a      	uxth	r2, r1
    11b2:	0021      	movs	r1, r4
    11b4:	f240 4355 	movw	r3, #1109	; 0x455
    11b8:	f2c0 0300 	movt	r3, #0
    11bc:	4798      	blx	r3
}
    11be:	bd10      	pop	{r4, pc}
		return 0;
    11c0:	2000      	movs	r0, #0
    11c2:	e7fc      	b.n	11be <stdio_io_write+0x1e>

000011c4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    11c4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    11c6:	f241 04b8 	movw	r4, #4280	; 0x10b8
    11ca:	f2c2 0400 	movt	r4, #8192	; 0x2000
    11ce:	0020      	movs	r0, r4
    11d0:	f240 6305 	movw	r3, #1541	; 0x605
    11d4:	f2c0 0300 	movt	r3, #0
    11d8:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    11da:	0020      	movs	r0, r4
    11dc:	f241 134d 	movw	r3, #4429	; 0x114d
    11e0:	f2c0 0300 	movt	r3, #0
    11e4:	4798      	blx	r3
}
    11e6:	bd10      	pop	{r4, pc}

000011e8 <__gnu_cmse_nonsecure_call>:
    11e8:	b5e0      	push	{r5, r6, r7, lr}
    11ea:	4645      	mov	r5, r8
    11ec:	464e      	mov	r6, r9
    11ee:	4657      	mov	r7, sl
    11f0:	b4e0      	push	{r5, r6, r7}
    11f2:	465d      	mov	r5, fp
    11f4:	b420      	push	{r5}
    11f6:	4625      	mov	r5, r4
    11f8:	4626      	mov	r6, r4
    11fa:	4627      	mov	r7, r4
    11fc:	46a0      	mov	r8, r4
    11fe:	46a1      	mov	r9, r4
    1200:	46a2      	mov	sl, r4
    1202:	46a3      	mov	fp, r4
    1204:	46a4      	mov	ip, r4
    1206:	f384 8800 	msr	CPSR_f, r4
    120a:	47a4      	blxns	r4
    120c:	bc20      	pop	{r5}
    120e:	46ab      	mov	fp, r5
    1210:	bce0      	pop	{r5, r6, r7}
    1212:	46ba      	mov	sl, r7
    1214:	46b1      	mov	r9, r6
    1216:	46a8      	mov	r8, r5
    1218:	bde0      	pop	{r5, r6, r7, pc}
	...

0000121c <__libc_init_array>:
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	2500      	movs	r5, #0
    1220:	4b0e      	ldr	r3, [pc, #56]	; (125c <__libc_init_array+0x40>)
    1222:	4c0f      	ldr	r4, [pc, #60]	; (1260 <__libc_init_array+0x44>)
    1224:	1ae4      	subs	r4, r4, r3
    1226:	10a4      	asrs	r4, r4, #2
    1228:	42a5      	cmp	r5, r4
    122a:	d109      	bne.n	1240 <__libc_init_array+0x24>
    122c:	2500      	movs	r5, #0
    122e:	f001 f8e5 	bl	23fc <_init>
    1232:	4c0c      	ldr	r4, [pc, #48]	; (1264 <__libc_init_array+0x48>)
    1234:	4b0c      	ldr	r3, [pc, #48]	; (1268 <__libc_init_array+0x4c>)
    1236:	1ae4      	subs	r4, r4, r3
    1238:	10a4      	asrs	r4, r4, #2
    123a:	42a5      	cmp	r5, r4
    123c:	d107      	bne.n	124e <__libc_init_array+0x32>
    123e:	bd70      	pop	{r4, r5, r6, pc}
    1240:	4a06      	ldr	r2, [pc, #24]	; (125c <__libc_init_array+0x40>)
    1242:	00ab      	lsls	r3, r5, #2
    1244:	189b      	adds	r3, r3, r2
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	4798      	blx	r3
    124a:	3501      	adds	r5, #1
    124c:	e7ec      	b.n	1228 <__libc_init_array+0xc>
    124e:	4a06      	ldr	r2, [pc, #24]	; (1268 <__libc_init_array+0x4c>)
    1250:	00ab      	lsls	r3, r5, #2
    1252:	189b      	adds	r3, r3, r2
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	4798      	blx	r3
    1258:	3501      	adds	r5, #1
    125a:	e7ee      	b.n	123a <__libc_init_array+0x1e>
    125c:	00002408 	.word	0x00002408
    1260:	00002408 	.word	0x00002408
    1264:	0000240c 	.word	0x0000240c
    1268:	00002408 	.word	0x00002408

0000126c <memset>:
    126c:	0003      	movs	r3, r0
    126e:	1882      	adds	r2, r0, r2
    1270:	4293      	cmp	r3, r2
    1272:	d100      	bne.n	1276 <memset+0xa>
    1274:	4770      	bx	lr
    1276:	7019      	strb	r1, [r3, #0]
    1278:	3301      	adds	r3, #1
    127a:	e7f9      	b.n	1270 <memset+0x4>

0000127c <iprintf>:
    127c:	b40f      	push	{r0, r1, r2, r3}
    127e:	4b0a      	ldr	r3, [pc, #40]	; (12a8 <iprintf+0x2c>)
    1280:	b513      	push	{r0, r1, r4, lr}
    1282:	681c      	ldr	r4, [r3, #0]
    1284:	b124      	cbz	r4, 1290 <iprintf+0x14>
    1286:	69a3      	ldr	r3, [r4, #24]
    1288:	b913      	cbnz	r3, 1290 <iprintf+0x14>
    128a:	0020      	movs	r0, r4
    128c:	f000 fade 	bl	184c <__sinit>
    1290:	ab05      	add	r3, sp, #20
    1292:	9a04      	ldr	r2, [sp, #16]
    1294:	68a1      	ldr	r1, [r4, #8]
    1296:	0020      	movs	r0, r4
    1298:	9301      	str	r3, [sp, #4]
    129a:	f000 fca7 	bl	1bec <_vfiprintf_r>
    129e:	bc16      	pop	{r1, r2, r4}
    12a0:	bc08      	pop	{r3}
    12a2:	b004      	add	sp, #16
    12a4:	4718      	bx	r3
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	20000008 	.word	0x20000008

000012ac <_puts_r>:
    12ac:	b570      	push	{r4, r5, r6, lr}
    12ae:	0005      	movs	r5, r0
    12b0:	000e      	movs	r6, r1
    12b2:	b118      	cbz	r0, 12bc <_puts_r+0x10>
    12b4:	6983      	ldr	r3, [r0, #24]
    12b6:	b90b      	cbnz	r3, 12bc <_puts_r+0x10>
    12b8:	f000 fac8 	bl	184c <__sinit>
    12bc:	69ab      	ldr	r3, [r5, #24]
    12be:	68ac      	ldr	r4, [r5, #8]
    12c0:	b913      	cbnz	r3, 12c8 <_puts_r+0x1c>
    12c2:	0028      	movs	r0, r5
    12c4:	f000 fac2 	bl	184c <__sinit>
    12c8:	4b23      	ldr	r3, [pc, #140]	; (1358 <_puts_r+0xac>)
    12ca:	429c      	cmp	r4, r3
    12cc:	d10d      	bne.n	12ea <_puts_r+0x3e>
    12ce:	686c      	ldr	r4, [r5, #4]
    12d0:	89a3      	ldrh	r3, [r4, #12]
    12d2:	071b      	lsls	r3, r3, #28
    12d4:	d501      	bpl.n	12da <_puts_r+0x2e>
    12d6:	6923      	ldr	r3, [r4, #16]
    12d8:	b9fb      	cbnz	r3, 131a <_puts_r+0x6e>
    12da:	0021      	movs	r1, r4
    12dc:	0028      	movs	r0, r5
    12de:	f000 f94f 	bl	1580 <__swsetup_r>
    12e2:	b1d0      	cbz	r0, 131a <_puts_r+0x6e>
    12e4:	2001      	movs	r0, #1
    12e6:	4240      	negs	r0, r0
    12e8:	bd70      	pop	{r4, r5, r6, pc}
    12ea:	4b1c      	ldr	r3, [pc, #112]	; (135c <_puts_r+0xb0>)
    12ec:	429c      	cmp	r4, r3
    12ee:	d101      	bne.n	12f4 <_puts_r+0x48>
    12f0:	68ac      	ldr	r4, [r5, #8]
    12f2:	e7ed      	b.n	12d0 <_puts_r+0x24>
    12f4:	4b1a      	ldr	r3, [pc, #104]	; (1360 <_puts_r+0xb4>)
    12f6:	429c      	cmp	r4, r3
    12f8:	d1ea      	bne.n	12d0 <_puts_r+0x24>
    12fa:	68ec      	ldr	r4, [r5, #12]
    12fc:	e7e8      	b.n	12d0 <_puts_r+0x24>
    12fe:	3b01      	subs	r3, #1
    1300:	3601      	adds	r6, #1
    1302:	60a3      	str	r3, [r4, #8]
    1304:	2b00      	cmp	r3, #0
    1306:	da04      	bge.n	1312 <_puts_r+0x66>
    1308:	69a2      	ldr	r2, [r4, #24]
    130a:	4293      	cmp	r3, r2
    130c:	db16      	blt.n	133c <_puts_r+0x90>
    130e:	290a      	cmp	r1, #10
    1310:	d014      	beq.n	133c <_puts_r+0x90>
    1312:	6823      	ldr	r3, [r4, #0]
    1314:	1c5a      	adds	r2, r3, #1
    1316:	6022      	str	r2, [r4, #0]
    1318:	7019      	strb	r1, [r3, #0]
    131a:	7831      	ldrb	r1, [r6, #0]
    131c:	68a3      	ldr	r3, [r4, #8]
    131e:	2900      	cmp	r1, #0
    1320:	d1ed      	bne.n	12fe <_puts_r+0x52>
    1322:	3b01      	subs	r3, #1
    1324:	60a3      	str	r3, [r4, #8]
    1326:	2b00      	cmp	r3, #0
    1328:	da0f      	bge.n	134a <_puts_r+0x9e>
    132a:	0022      	movs	r2, r4
    132c:	310a      	adds	r1, #10
    132e:	0028      	movs	r0, r5
    1330:	f000 f8d4 	bl	14dc <__swbuf_r>
    1334:	1c43      	adds	r3, r0, #1
    1336:	d0d5      	beq.n	12e4 <_puts_r+0x38>
    1338:	200a      	movs	r0, #10
    133a:	e7d5      	b.n	12e8 <_puts_r+0x3c>
    133c:	0022      	movs	r2, r4
    133e:	0028      	movs	r0, r5
    1340:	f000 f8cc 	bl	14dc <__swbuf_r>
    1344:	1c43      	adds	r3, r0, #1
    1346:	d1e8      	bne.n	131a <_puts_r+0x6e>
    1348:	e7cc      	b.n	12e4 <_puts_r+0x38>
    134a:	200a      	movs	r0, #10
    134c:	6823      	ldr	r3, [r4, #0]
    134e:	1c5a      	adds	r2, r3, #1
    1350:	6022      	str	r2, [r4, #0]
    1352:	7018      	strb	r0, [r3, #0]
    1354:	e7c8      	b.n	12e8 <_puts_r+0x3c>
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	00002388 	.word	0x00002388
    135c:	000023a8 	.word	0x000023a8
    1360:	00002368 	.word	0x00002368

00001364 <puts>:
    1364:	b510      	push	{r4, lr}
    1366:	4b03      	ldr	r3, [pc, #12]	; (1374 <puts+0x10>)
    1368:	0001      	movs	r1, r0
    136a:	6818      	ldr	r0, [r3, #0]
    136c:	f7ff ff9e 	bl	12ac <_puts_r>
    1370:	bd10      	pop	{r4, pc}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	20000008 	.word	0x20000008

00001378 <setbuf>:
    1378:	424a      	negs	r2, r1
    137a:	414a      	adcs	r2, r1
    137c:	b510      	push	{r4, lr}
    137e:	0052      	lsls	r2, r2, #1
    1380:	f240 4300 	movw	r3, #1024	; 0x400
    1384:	f000 f802 	bl	138c <setvbuf>
    1388:	bd10      	pop	{r4, pc}
	...

0000138c <setvbuf>:
    138c:	b5f0      	push	{r4, r5, r6, r7, lr}
    138e:	001d      	movs	r5, r3
    1390:	4b4d      	ldr	r3, [pc, #308]	; (14c8 <setvbuf+0x13c>)
    1392:	b085      	sub	sp, #20
    1394:	681e      	ldr	r6, [r3, #0]
    1396:	0004      	movs	r4, r0
    1398:	000f      	movs	r7, r1
    139a:	9200      	str	r2, [sp, #0]
    139c:	b126      	cbz	r6, 13a8 <setvbuf+0x1c>
    139e:	69b3      	ldr	r3, [r6, #24]
    13a0:	b913      	cbnz	r3, 13a8 <setvbuf+0x1c>
    13a2:	0030      	movs	r0, r6
    13a4:	f000 fa52 	bl	184c <__sinit>
    13a8:	4b48      	ldr	r3, [pc, #288]	; (14cc <setvbuf+0x140>)
    13aa:	429c      	cmp	r4, r3
    13ac:	d14f      	bne.n	144e <setvbuf+0xc2>
    13ae:	6874      	ldr	r4, [r6, #4]
    13b0:	9b00      	ldr	r3, [sp, #0]
    13b2:	2b02      	cmp	r3, #2
    13b4:	d005      	beq.n	13c2 <setvbuf+0x36>
    13b6:	2b01      	cmp	r3, #1
    13b8:	d900      	bls.n	13bc <setvbuf+0x30>
    13ba:	e082      	b.n	14c2 <setvbuf+0x136>
    13bc:	2d00      	cmp	r5, #0
    13be:	da00      	bge.n	13c2 <setvbuf+0x36>
    13c0:	e07f      	b.n	14c2 <setvbuf+0x136>
    13c2:	0021      	movs	r1, r4
    13c4:	0030      	movs	r0, r6
    13c6:	f000 f9d5 	bl	1774 <_fflush_r>
    13ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    13cc:	b141      	cbz	r1, 13e0 <setvbuf+0x54>
    13ce:	0023      	movs	r3, r4
    13d0:	3344      	adds	r3, #68	; 0x44
    13d2:	4299      	cmp	r1, r3
    13d4:	d002      	beq.n	13dc <setvbuf+0x50>
    13d6:	0030      	movs	r0, r6
    13d8:	f000 fb38 	bl	1a4c <_free_r>
    13dc:	2300      	movs	r3, #0
    13de:	6363      	str	r3, [r4, #52]	; 0x34
    13e0:	2300      	movs	r3, #0
    13e2:	61a3      	str	r3, [r4, #24]
    13e4:	6063      	str	r3, [r4, #4]
    13e6:	89a3      	ldrh	r3, [r4, #12]
    13e8:	061b      	lsls	r3, r3, #24
    13ea:	d503      	bpl.n	13f4 <setvbuf+0x68>
    13ec:	6921      	ldr	r1, [r4, #16]
    13ee:	0030      	movs	r0, r6
    13f0:	f000 fb2c 	bl	1a4c <_free_r>
    13f4:	89a3      	ldrh	r3, [r4, #12]
    13f6:	4a36      	ldr	r2, [pc, #216]	; (14d0 <setvbuf+0x144>)
    13f8:	4013      	ands	r3, r2
    13fa:	81a3      	strh	r3, [r4, #12]
    13fc:	9b00      	ldr	r3, [sp, #0]
    13fe:	2b02      	cmp	r3, #2
    1400:	d059      	beq.n	14b6 <setvbuf+0x12a>
    1402:	ab03      	add	r3, sp, #12
    1404:	aa02      	add	r2, sp, #8
    1406:	0021      	movs	r1, r4
    1408:	0030      	movs	r0, r6
    140a:	f000 faad 	bl	1968 <__swhatbuf_r>
    140e:	89a3      	ldrh	r3, [r4, #12]
    1410:	4318      	orrs	r0, r3
    1412:	81a0      	strh	r0, [r4, #12]
    1414:	bb2d      	cbnz	r5, 1462 <setvbuf+0xd6>
    1416:	9d02      	ldr	r5, [sp, #8]
    1418:	0028      	movs	r0, r5
    141a:	f000 fb0d 	bl	1a38 <malloc>
    141e:	9501      	str	r5, [sp, #4]
    1420:	0007      	movs	r7, r0
    1422:	2800      	cmp	r0, #0
    1424:	d141      	bne.n	14aa <setvbuf+0x11e>
    1426:	9b02      	ldr	r3, [sp, #8]
    1428:	9301      	str	r3, [sp, #4]
    142a:	42ab      	cmp	r3, r5
    142c:	d137      	bne.n	149e <setvbuf+0x112>
    142e:	2001      	movs	r0, #1
    1430:	4240      	negs	r0, r0
    1432:	2302      	movs	r3, #2
    1434:	89a2      	ldrh	r2, [r4, #12]
    1436:	4313      	orrs	r3, r2
    1438:	81a3      	strh	r3, [r4, #12]
    143a:	2300      	movs	r3, #0
    143c:	60a3      	str	r3, [r4, #8]
    143e:	0023      	movs	r3, r4
    1440:	3347      	adds	r3, #71	; 0x47
    1442:	6023      	str	r3, [r4, #0]
    1444:	6123      	str	r3, [r4, #16]
    1446:	2301      	movs	r3, #1
    1448:	6163      	str	r3, [r4, #20]
    144a:	b005      	add	sp, #20
    144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    144e:	4b21      	ldr	r3, [pc, #132]	; (14d4 <setvbuf+0x148>)
    1450:	429c      	cmp	r4, r3
    1452:	d101      	bne.n	1458 <setvbuf+0xcc>
    1454:	68b4      	ldr	r4, [r6, #8]
    1456:	e7ab      	b.n	13b0 <setvbuf+0x24>
    1458:	4b1f      	ldr	r3, [pc, #124]	; (14d8 <setvbuf+0x14c>)
    145a:	429c      	cmp	r4, r3
    145c:	d1a8      	bne.n	13b0 <setvbuf+0x24>
    145e:	68f4      	ldr	r4, [r6, #12]
    1460:	e7a6      	b.n	13b0 <setvbuf+0x24>
    1462:	2f00      	cmp	r7, #0
    1464:	d0d8      	beq.n	1418 <setvbuf+0x8c>
    1466:	69b3      	ldr	r3, [r6, #24]
    1468:	b913      	cbnz	r3, 1470 <setvbuf+0xe4>
    146a:	0030      	movs	r0, r6
    146c:	f000 f9ee 	bl	184c <__sinit>
    1470:	9b00      	ldr	r3, [sp, #0]
    1472:	2b01      	cmp	r3, #1
    1474:	d103      	bne.n	147e <setvbuf+0xf2>
    1476:	89a3      	ldrh	r3, [r4, #12]
    1478:	9a00      	ldr	r2, [sp, #0]
    147a:	431a      	orrs	r2, r3
    147c:	81a2      	strh	r2, [r4, #12]
    147e:	2008      	movs	r0, #8
    1480:	89a3      	ldrh	r3, [r4, #12]
    1482:	6027      	str	r7, [r4, #0]
    1484:	4018      	ands	r0, r3
    1486:	6127      	str	r7, [r4, #16]
    1488:	6165      	str	r5, [r4, #20]
    148a:	b1c0      	cbz	r0, 14be <setvbuf+0x132>
    148c:	2001      	movs	r0, #1
    148e:	4018      	ands	r0, r3
    1490:	2300      	movs	r3, #0
    1492:	b190      	cbz	r0, 14ba <setvbuf+0x12e>
    1494:	426d      	negs	r5, r5
    1496:	60a3      	str	r3, [r4, #8]
    1498:	61a5      	str	r5, [r4, #24]
    149a:	0018      	movs	r0, r3
    149c:	e7d5      	b.n	144a <setvbuf+0xbe>
    149e:	9801      	ldr	r0, [sp, #4]
    14a0:	f000 faca 	bl	1a38 <malloc>
    14a4:	0007      	movs	r7, r0
    14a6:	2800      	cmp	r0, #0
    14a8:	d0c1      	beq.n	142e <setvbuf+0xa2>
    14aa:	2380      	movs	r3, #128	; 0x80
    14ac:	89a2      	ldrh	r2, [r4, #12]
    14ae:	9d01      	ldr	r5, [sp, #4]
    14b0:	4313      	orrs	r3, r2
    14b2:	81a3      	strh	r3, [r4, #12]
    14b4:	e7d7      	b.n	1466 <setvbuf+0xda>
    14b6:	2000      	movs	r0, #0
    14b8:	e7bb      	b.n	1432 <setvbuf+0xa6>
    14ba:	60a5      	str	r5, [r4, #8]
    14bc:	e7c5      	b.n	144a <setvbuf+0xbe>
    14be:	60a0      	str	r0, [r4, #8]
    14c0:	e7c3      	b.n	144a <setvbuf+0xbe>
    14c2:	2001      	movs	r0, #1
    14c4:	4240      	negs	r0, r0
    14c6:	e7c0      	b.n	144a <setvbuf+0xbe>
    14c8:	20000008 	.word	0x20000008
    14cc:	00002388 	.word	0x00002388
    14d0:	fffff35c 	.word	0xfffff35c
    14d4:	000023a8 	.word	0x000023a8
    14d8:	00002368 	.word	0x00002368

000014dc <__swbuf_r>:
    14dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14de:	0005      	movs	r5, r0
    14e0:	000e      	movs	r6, r1
    14e2:	0014      	movs	r4, r2
    14e4:	b118      	cbz	r0, 14ee <__swbuf_r+0x12>
    14e6:	6983      	ldr	r3, [r0, #24]
    14e8:	b90b      	cbnz	r3, 14ee <__swbuf_r+0x12>
    14ea:	f000 f9af 	bl	184c <__sinit>
    14ee:	4b21      	ldr	r3, [pc, #132]	; (1574 <__swbuf_r+0x98>)
    14f0:	429c      	cmp	r4, r3
    14f2:	d12a      	bne.n	154a <__swbuf_r+0x6e>
    14f4:	686c      	ldr	r4, [r5, #4]
    14f6:	69a3      	ldr	r3, [r4, #24]
    14f8:	60a3      	str	r3, [r4, #8]
    14fa:	89a3      	ldrh	r3, [r4, #12]
    14fc:	071b      	lsls	r3, r3, #28
    14fe:	d52e      	bpl.n	155e <__swbuf_r+0x82>
    1500:	6923      	ldr	r3, [r4, #16]
    1502:	b363      	cbz	r3, 155e <__swbuf_r+0x82>
    1504:	6823      	ldr	r3, [r4, #0]
    1506:	6922      	ldr	r2, [r4, #16]
    1508:	b2f7      	uxtb	r7, r6
    150a:	1a98      	subs	r0, r3, r2
    150c:	6963      	ldr	r3, [r4, #20]
    150e:	b2f6      	uxtb	r6, r6
    1510:	4298      	cmp	r0, r3
    1512:	db04      	blt.n	151e <__swbuf_r+0x42>
    1514:	0021      	movs	r1, r4
    1516:	0028      	movs	r0, r5
    1518:	f000 f92c 	bl	1774 <_fflush_r>
    151c:	bb28      	cbnz	r0, 156a <__swbuf_r+0x8e>
    151e:	68a3      	ldr	r3, [r4, #8]
    1520:	3001      	adds	r0, #1
    1522:	3b01      	subs	r3, #1
    1524:	60a3      	str	r3, [r4, #8]
    1526:	6823      	ldr	r3, [r4, #0]
    1528:	1c5a      	adds	r2, r3, #1
    152a:	6022      	str	r2, [r4, #0]
    152c:	701f      	strb	r7, [r3, #0]
    152e:	6963      	ldr	r3, [r4, #20]
    1530:	4298      	cmp	r0, r3
    1532:	d004      	beq.n	153e <__swbuf_r+0x62>
    1534:	89a3      	ldrh	r3, [r4, #12]
    1536:	07db      	lsls	r3, r3, #31
    1538:	d519      	bpl.n	156e <__swbuf_r+0x92>
    153a:	2e0a      	cmp	r6, #10
    153c:	d117      	bne.n	156e <__swbuf_r+0x92>
    153e:	0021      	movs	r1, r4
    1540:	0028      	movs	r0, r5
    1542:	f000 f917 	bl	1774 <_fflush_r>
    1546:	b190      	cbz	r0, 156e <__swbuf_r+0x92>
    1548:	e00f      	b.n	156a <__swbuf_r+0x8e>
    154a:	4b0b      	ldr	r3, [pc, #44]	; (1578 <__swbuf_r+0x9c>)
    154c:	429c      	cmp	r4, r3
    154e:	d101      	bne.n	1554 <__swbuf_r+0x78>
    1550:	68ac      	ldr	r4, [r5, #8]
    1552:	e7d0      	b.n	14f6 <__swbuf_r+0x1a>
    1554:	4b09      	ldr	r3, [pc, #36]	; (157c <__swbuf_r+0xa0>)
    1556:	429c      	cmp	r4, r3
    1558:	d1cd      	bne.n	14f6 <__swbuf_r+0x1a>
    155a:	68ec      	ldr	r4, [r5, #12]
    155c:	e7cb      	b.n	14f6 <__swbuf_r+0x1a>
    155e:	0021      	movs	r1, r4
    1560:	0028      	movs	r0, r5
    1562:	f000 f80d 	bl	1580 <__swsetup_r>
    1566:	2800      	cmp	r0, #0
    1568:	d0cc      	beq.n	1504 <__swbuf_r+0x28>
    156a:	2601      	movs	r6, #1
    156c:	4276      	negs	r6, r6
    156e:	0030      	movs	r0, r6
    1570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00002388 	.word	0x00002388
    1578:	000023a8 	.word	0x000023a8
    157c:	00002368 	.word	0x00002368

00001580 <__swsetup_r>:
    1580:	4b34      	ldr	r3, [pc, #208]	; (1654 <__swsetup_r+0xd4>)
    1582:	b570      	push	{r4, r5, r6, lr}
    1584:	681d      	ldr	r5, [r3, #0]
    1586:	0006      	movs	r6, r0
    1588:	000c      	movs	r4, r1
    158a:	b125      	cbz	r5, 1596 <__swsetup_r+0x16>
    158c:	69ab      	ldr	r3, [r5, #24]
    158e:	b913      	cbnz	r3, 1596 <__swsetup_r+0x16>
    1590:	0028      	movs	r0, r5
    1592:	f000 f95b 	bl	184c <__sinit>
    1596:	4b30      	ldr	r3, [pc, #192]	; (1658 <__swsetup_r+0xd8>)
    1598:	429c      	cmp	r4, r3
    159a:	d10f      	bne.n	15bc <__swsetup_r+0x3c>
    159c:	686c      	ldr	r4, [r5, #4]
    159e:	230c      	movs	r3, #12
    15a0:	5ee2      	ldrsh	r2, [r4, r3]
    15a2:	b293      	uxth	r3, r2
    15a4:	0719      	lsls	r1, r3, #28
    15a6:	d42c      	bmi.n	1602 <__swsetup_r+0x82>
    15a8:	06d9      	lsls	r1, r3, #27
    15aa:	d411      	bmi.n	15d0 <__swsetup_r+0x50>
    15ac:	2309      	movs	r3, #9
    15ae:	2001      	movs	r0, #1
    15b0:	6033      	str	r3, [r6, #0]
    15b2:	3337      	adds	r3, #55	; 0x37
    15b4:	4313      	orrs	r3, r2
    15b6:	81a3      	strh	r3, [r4, #12]
    15b8:	4240      	negs	r0, r0
    15ba:	bd70      	pop	{r4, r5, r6, pc}
    15bc:	4b27      	ldr	r3, [pc, #156]	; (165c <__swsetup_r+0xdc>)
    15be:	429c      	cmp	r4, r3
    15c0:	d101      	bne.n	15c6 <__swsetup_r+0x46>
    15c2:	68ac      	ldr	r4, [r5, #8]
    15c4:	e7eb      	b.n	159e <__swsetup_r+0x1e>
    15c6:	4b26      	ldr	r3, [pc, #152]	; (1660 <__swsetup_r+0xe0>)
    15c8:	429c      	cmp	r4, r3
    15ca:	d1e8      	bne.n	159e <__swsetup_r+0x1e>
    15cc:	68ec      	ldr	r4, [r5, #12]
    15ce:	e7e6      	b.n	159e <__swsetup_r+0x1e>
    15d0:	075b      	lsls	r3, r3, #29
    15d2:	d512      	bpl.n	15fa <__swsetup_r+0x7a>
    15d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    15d6:	b141      	cbz	r1, 15ea <__swsetup_r+0x6a>
    15d8:	0023      	movs	r3, r4
    15da:	3344      	adds	r3, #68	; 0x44
    15dc:	4299      	cmp	r1, r3
    15de:	d002      	beq.n	15e6 <__swsetup_r+0x66>
    15e0:	0030      	movs	r0, r6
    15e2:	f000 fa33 	bl	1a4c <_free_r>
    15e6:	2300      	movs	r3, #0
    15e8:	6363      	str	r3, [r4, #52]	; 0x34
    15ea:	2224      	movs	r2, #36	; 0x24
    15ec:	89a3      	ldrh	r3, [r4, #12]
    15ee:	4393      	bics	r3, r2
    15f0:	81a3      	strh	r3, [r4, #12]
    15f2:	2300      	movs	r3, #0
    15f4:	6063      	str	r3, [r4, #4]
    15f6:	6923      	ldr	r3, [r4, #16]
    15f8:	6023      	str	r3, [r4, #0]
    15fa:	2308      	movs	r3, #8
    15fc:	89a2      	ldrh	r2, [r4, #12]
    15fe:	4313      	orrs	r3, r2
    1600:	81a3      	strh	r3, [r4, #12]
    1602:	6923      	ldr	r3, [r4, #16]
    1604:	b95b      	cbnz	r3, 161e <__swsetup_r+0x9e>
    1606:	f240 2180 	movw	r1, #640	; 0x280
    160a:	f240 2200 	movw	r2, #512	; 0x200
    160e:	89a3      	ldrh	r3, [r4, #12]
    1610:	400b      	ands	r3, r1
    1612:	4293      	cmp	r3, r2
    1614:	d003      	beq.n	161e <__swsetup_r+0x9e>
    1616:	0021      	movs	r1, r4
    1618:	0030      	movs	r0, r6
    161a:	f000 f9cd 	bl	19b8 <__smakebuf_r>
    161e:	2301      	movs	r3, #1
    1620:	89a2      	ldrh	r2, [r4, #12]
    1622:	4013      	ands	r3, r2
    1624:	b18b      	cbz	r3, 164a <__swsetup_r+0xca>
    1626:	2300      	movs	r3, #0
    1628:	60a3      	str	r3, [r4, #8]
    162a:	6963      	ldr	r3, [r4, #20]
    162c:	425b      	negs	r3, r3
    162e:	61a3      	str	r3, [r4, #24]
    1630:	6923      	ldr	r3, [r4, #16]
    1632:	2000      	movs	r0, #0
    1634:	2b00      	cmp	r3, #0
    1636:	d1c0      	bne.n	15ba <__swsetup_r+0x3a>
    1638:	230c      	movs	r3, #12
    163a:	5ee2      	ldrsh	r2, [r4, r3]
    163c:	0613      	lsls	r3, r2, #24
    163e:	d5bc      	bpl.n	15ba <__swsetup_r+0x3a>
    1640:	2340      	movs	r3, #64	; 0x40
    1642:	4313      	orrs	r3, r2
    1644:	81a3      	strh	r3, [r4, #12]
    1646:	3801      	subs	r0, #1
    1648:	e7b7      	b.n	15ba <__swsetup_r+0x3a>
    164a:	0792      	lsls	r2, r2, #30
    164c:	d400      	bmi.n	1650 <__swsetup_r+0xd0>
    164e:	6963      	ldr	r3, [r4, #20]
    1650:	60a3      	str	r3, [r4, #8]
    1652:	e7ed      	b.n	1630 <__swsetup_r+0xb0>
    1654:	20000008 	.word	0x20000008
    1658:	00002388 	.word	0x00002388
    165c:	000023a8 	.word	0x000023a8
    1660:	00002368 	.word	0x00002368

00001664 <__sflush_r>:
    1664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1666:	898a      	ldrh	r2, [r1, #12]
    1668:	0005      	movs	r5, r0
    166a:	000c      	movs	r4, r1
    166c:	0713      	lsls	r3, r2, #28
    166e:	d45e      	bmi.n	172e <__sflush_r+0xca>
    1670:	684b      	ldr	r3, [r1, #4]
    1672:	2b00      	cmp	r3, #0
    1674:	dc04      	bgt.n	1680 <__sflush_r+0x1c>
    1676:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1678:	2b00      	cmp	r3, #0
    167a:	dc01      	bgt.n	1680 <__sflush_r+0x1c>
    167c:	2000      	movs	r0, #0
    167e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1680:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1682:	2f00      	cmp	r7, #0
    1684:	d0fa      	beq.n	167c <__sflush_r+0x18>
    1686:	2300      	movs	r3, #0
    1688:	682e      	ldr	r6, [r5, #0]
    168a:	602b      	str	r3, [r5, #0]
    168c:	f241 0300 	movw	r3, #4096	; 0x1000
    1690:	401a      	ands	r2, r3
    1692:	b392      	cbz	r2, 16fa <__sflush_r+0x96>
    1694:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1696:	89a3      	ldrh	r3, [r4, #12]
    1698:	075b      	lsls	r3, r3, #29
    169a:	d505      	bpl.n	16a8 <__sflush_r+0x44>
    169c:	6863      	ldr	r3, [r4, #4]
    169e:	1ac0      	subs	r0, r0, r3
    16a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    16a2:	b10b      	cbz	r3, 16a8 <__sflush_r+0x44>
    16a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    16a6:	1ac0      	subs	r0, r0, r3
    16a8:	0002      	movs	r2, r0
    16aa:	6a21      	ldr	r1, [r4, #32]
    16ac:	2300      	movs	r3, #0
    16ae:	0028      	movs	r0, r5
    16b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    16b2:	47b8      	blx	r7
    16b4:	89a1      	ldrh	r1, [r4, #12]
    16b6:	1c43      	adds	r3, r0, #1
    16b8:	d106      	bne.n	16c8 <__sflush_r+0x64>
    16ba:	682b      	ldr	r3, [r5, #0]
    16bc:	2b1d      	cmp	r3, #29
    16be:	d830      	bhi.n	1722 <__sflush_r+0xbe>
    16c0:	4a2b      	ldr	r2, [pc, #172]	; (1770 <__sflush_r+0x10c>)
    16c2:	40da      	lsrs	r2, r3
    16c4:	07d3      	lsls	r3, r2, #31
    16c6:	d52c      	bpl.n	1722 <__sflush_r+0xbe>
    16c8:	2300      	movs	r3, #0
    16ca:	6063      	str	r3, [r4, #4]
    16cc:	6923      	ldr	r3, [r4, #16]
    16ce:	6023      	str	r3, [r4, #0]
    16d0:	04cb      	lsls	r3, r1, #19
    16d2:	d504      	bpl.n	16de <__sflush_r+0x7a>
    16d4:	1c43      	adds	r3, r0, #1
    16d6:	d101      	bne.n	16dc <__sflush_r+0x78>
    16d8:	682b      	ldr	r3, [r5, #0]
    16da:	b903      	cbnz	r3, 16de <__sflush_r+0x7a>
    16dc:	6560      	str	r0, [r4, #84]	; 0x54
    16de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    16e0:	602e      	str	r6, [r5, #0]
    16e2:	2900      	cmp	r1, #0
    16e4:	d0ca      	beq.n	167c <__sflush_r+0x18>
    16e6:	0023      	movs	r3, r4
    16e8:	3344      	adds	r3, #68	; 0x44
    16ea:	4299      	cmp	r1, r3
    16ec:	d002      	beq.n	16f4 <__sflush_r+0x90>
    16ee:	0028      	movs	r0, r5
    16f0:	f000 f9ac 	bl	1a4c <_free_r>
    16f4:	2000      	movs	r0, #0
    16f6:	6360      	str	r0, [r4, #52]	; 0x34
    16f8:	e7c1      	b.n	167e <__sflush_r+0x1a>
    16fa:	2301      	movs	r3, #1
    16fc:	6a21      	ldr	r1, [r4, #32]
    16fe:	0028      	movs	r0, r5
    1700:	47b8      	blx	r7
    1702:	1c43      	adds	r3, r0, #1
    1704:	d1c7      	bne.n	1696 <__sflush_r+0x32>
    1706:	682b      	ldr	r3, [r5, #0]
    1708:	2b00      	cmp	r3, #0
    170a:	d0c4      	beq.n	1696 <__sflush_r+0x32>
    170c:	2b1d      	cmp	r3, #29
    170e:	d001      	beq.n	1714 <__sflush_r+0xb0>
    1710:	2b16      	cmp	r3, #22
    1712:	d101      	bne.n	1718 <__sflush_r+0xb4>
    1714:	602e      	str	r6, [r5, #0]
    1716:	e7b1      	b.n	167c <__sflush_r+0x18>
    1718:	2340      	movs	r3, #64	; 0x40
    171a:	89a2      	ldrh	r2, [r4, #12]
    171c:	4313      	orrs	r3, r2
    171e:	81a3      	strh	r3, [r4, #12]
    1720:	e7ad      	b.n	167e <__sflush_r+0x1a>
    1722:	2340      	movs	r3, #64	; 0x40
    1724:	430b      	orrs	r3, r1
    1726:	2001      	movs	r0, #1
    1728:	81a3      	strh	r3, [r4, #12]
    172a:	4240      	negs	r0, r0
    172c:	e7a7      	b.n	167e <__sflush_r+0x1a>
    172e:	690f      	ldr	r7, [r1, #16]
    1730:	2f00      	cmp	r7, #0
    1732:	d0a3      	beq.n	167c <__sflush_r+0x18>
    1734:	680b      	ldr	r3, [r1, #0]
    1736:	600f      	str	r7, [r1, #0]
    1738:	1bdb      	subs	r3, r3, r7
    173a:	9301      	str	r3, [sp, #4]
    173c:	2300      	movs	r3, #0
    173e:	0792      	lsls	r2, r2, #30
    1740:	d100      	bne.n	1744 <__sflush_r+0xe0>
    1742:	694b      	ldr	r3, [r1, #20]
    1744:	60a3      	str	r3, [r4, #8]
    1746:	9b01      	ldr	r3, [sp, #4]
    1748:	2b00      	cmp	r3, #0
    174a:	dc00      	bgt.n	174e <__sflush_r+0xea>
    174c:	e796      	b.n	167c <__sflush_r+0x18>
    174e:	9b01      	ldr	r3, [sp, #4]
    1750:	003a      	movs	r2, r7
    1752:	6a21      	ldr	r1, [r4, #32]
    1754:	0028      	movs	r0, r5
    1756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1758:	47b0      	blx	r6
    175a:	2800      	cmp	r0, #0
    175c:	dc03      	bgt.n	1766 <__sflush_r+0x102>
    175e:	2340      	movs	r3, #64	; 0x40
    1760:	89a2      	ldrh	r2, [r4, #12]
    1762:	4313      	orrs	r3, r2
    1764:	e7df      	b.n	1726 <__sflush_r+0xc2>
    1766:	9b01      	ldr	r3, [sp, #4]
    1768:	183f      	adds	r7, r7, r0
    176a:	1a1b      	subs	r3, r3, r0
    176c:	9301      	str	r3, [sp, #4]
    176e:	e7ea      	b.n	1746 <__sflush_r+0xe2>
    1770:	20400001 	.word	0x20400001

00001774 <_fflush_r>:
    1774:	690b      	ldr	r3, [r1, #16]
    1776:	b570      	push	{r4, r5, r6, lr}
    1778:	0005      	movs	r5, r0
    177a:	000c      	movs	r4, r1
    177c:	b90b      	cbnz	r3, 1782 <_fflush_r+0xe>
    177e:	2000      	movs	r0, #0
    1780:	bd70      	pop	{r4, r5, r6, pc}
    1782:	b118      	cbz	r0, 178c <_fflush_r+0x18>
    1784:	6983      	ldr	r3, [r0, #24]
    1786:	b90b      	cbnz	r3, 178c <_fflush_r+0x18>
    1788:	f000 f860 	bl	184c <__sinit>
    178c:	4b0b      	ldr	r3, [pc, #44]	; (17bc <_fflush_r+0x48>)
    178e:	429c      	cmp	r4, r3
    1790:	d109      	bne.n	17a6 <_fflush_r+0x32>
    1792:	686c      	ldr	r4, [r5, #4]
    1794:	220c      	movs	r2, #12
    1796:	5ea3      	ldrsh	r3, [r4, r2]
    1798:	2b00      	cmp	r3, #0
    179a:	d0f0      	beq.n	177e <_fflush_r+0xa>
    179c:	0021      	movs	r1, r4
    179e:	0028      	movs	r0, r5
    17a0:	f7ff ff60 	bl	1664 <__sflush_r>
    17a4:	e7ec      	b.n	1780 <_fflush_r+0xc>
    17a6:	4b06      	ldr	r3, [pc, #24]	; (17c0 <_fflush_r+0x4c>)
    17a8:	429c      	cmp	r4, r3
    17aa:	d101      	bne.n	17b0 <_fflush_r+0x3c>
    17ac:	68ac      	ldr	r4, [r5, #8]
    17ae:	e7f1      	b.n	1794 <_fflush_r+0x20>
    17b0:	4b04      	ldr	r3, [pc, #16]	; (17c4 <_fflush_r+0x50>)
    17b2:	429c      	cmp	r4, r3
    17b4:	d1ee      	bne.n	1794 <_fflush_r+0x20>
    17b6:	68ec      	ldr	r4, [r5, #12]
    17b8:	e7ec      	b.n	1794 <_fflush_r+0x20>
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	00002388 	.word	0x00002388
    17c0:	000023a8 	.word	0x000023a8
    17c4:	00002368 	.word	0x00002368

000017c8 <_cleanup_r>:
    17c8:	b510      	push	{r4, lr}
    17ca:	4902      	ldr	r1, [pc, #8]	; (17d4 <_cleanup_r+0xc>)
    17cc:	f000 f8ac 	bl	1928 <_fwalk_reent>
    17d0:	bd10      	pop	{r4, pc}
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	00001775 	.word	0x00001775

000017d8 <std.isra.0>:
    17d8:	2300      	movs	r3, #0
    17da:	b510      	push	{r4, lr}
    17dc:	0004      	movs	r4, r0
    17de:	6003      	str	r3, [r0, #0]
    17e0:	6043      	str	r3, [r0, #4]
    17e2:	6083      	str	r3, [r0, #8]
    17e4:	8181      	strh	r1, [r0, #12]
    17e6:	6643      	str	r3, [r0, #100]	; 0x64
    17e8:	81c2      	strh	r2, [r0, #14]
    17ea:	6103      	str	r3, [r0, #16]
    17ec:	6143      	str	r3, [r0, #20]
    17ee:	6183      	str	r3, [r0, #24]
    17f0:	0019      	movs	r1, r3
    17f2:	2208      	movs	r2, #8
    17f4:	305c      	adds	r0, #92	; 0x5c
    17f6:	f7ff fd39 	bl	126c <memset>
    17fa:	4b05      	ldr	r3, [pc, #20]	; (1810 <std.isra.0+0x38>)
    17fc:	6224      	str	r4, [r4, #32]
    17fe:	6263      	str	r3, [r4, #36]	; 0x24
    1800:	4b04      	ldr	r3, [pc, #16]	; (1814 <std.isra.0+0x3c>)
    1802:	62a3      	str	r3, [r4, #40]	; 0x28
    1804:	4b04      	ldr	r3, [pc, #16]	; (1818 <std.isra.0+0x40>)
    1806:	62e3      	str	r3, [r4, #44]	; 0x2c
    1808:	4b04      	ldr	r3, [pc, #16]	; (181c <std.isra.0+0x44>)
    180a:	6323      	str	r3, [r4, #48]	; 0x30
    180c:	bd10      	pop	{r4, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	00002139 	.word	0x00002139
    1814:	00002161 	.word	0x00002161
    1818:	00002199 	.word	0x00002199
    181c:	000021c5 	.word	0x000021c5

00001820 <__sfmoreglue>:
    1820:	b570      	push	{r4, r5, r6, lr}
    1822:	2568      	movs	r5, #104	; 0x68
    1824:	1e4a      	subs	r2, r1, #1
    1826:	4355      	muls	r5, r2
    1828:	000e      	movs	r6, r1
    182a:	0029      	movs	r1, r5
    182c:	3174      	adds	r1, #116	; 0x74
    182e:	f000 f957 	bl	1ae0 <_malloc_r>
    1832:	0004      	movs	r4, r0
    1834:	b140      	cbz	r0, 1848 <__sfmoreglue+0x28>
    1836:	2100      	movs	r1, #0
    1838:	002a      	movs	r2, r5
    183a:	6001      	str	r1, [r0, #0]
    183c:	6046      	str	r6, [r0, #4]
    183e:	300c      	adds	r0, #12
    1840:	60a0      	str	r0, [r4, #8]
    1842:	3268      	adds	r2, #104	; 0x68
    1844:	f7ff fd12 	bl	126c <memset>
    1848:	0020      	movs	r0, r4
    184a:	bd70      	pop	{r4, r5, r6, pc}

0000184c <__sinit>:
    184c:	6983      	ldr	r3, [r0, #24]
    184e:	b513      	push	{r0, r1, r4, lr}
    1850:	0004      	movs	r4, r0
    1852:	bb43      	cbnz	r3, 18a6 <__sinit+0x5a>
    1854:	6483      	str	r3, [r0, #72]	; 0x48
    1856:	64c3      	str	r3, [r0, #76]	; 0x4c
    1858:	6503      	str	r3, [r0, #80]	; 0x50
    185a:	4b13      	ldr	r3, [pc, #76]	; (18a8 <__sinit+0x5c>)
    185c:	4a13      	ldr	r2, [pc, #76]	; (18ac <__sinit+0x60>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	6282      	str	r2, [r0, #40]	; 0x28
    1862:	9301      	str	r3, [sp, #4]
    1864:	4298      	cmp	r0, r3
    1866:	d101      	bne.n	186c <__sinit+0x20>
    1868:	2301      	movs	r3, #1
    186a:	6183      	str	r3, [r0, #24]
    186c:	0020      	movs	r0, r4
    186e:	f000 f81f 	bl	18b0 <__sfp>
    1872:	6060      	str	r0, [r4, #4]
    1874:	0020      	movs	r0, r4
    1876:	f000 f81b 	bl	18b0 <__sfp>
    187a:	60a0      	str	r0, [r4, #8]
    187c:	0020      	movs	r0, r4
    187e:	f000 f817 	bl	18b0 <__sfp>
    1882:	2200      	movs	r2, #0
    1884:	60e0      	str	r0, [r4, #12]
    1886:	2104      	movs	r1, #4
    1888:	6860      	ldr	r0, [r4, #4]
    188a:	f7ff ffa5 	bl	17d8 <std.isra.0>
    188e:	2201      	movs	r2, #1
    1890:	2109      	movs	r1, #9
    1892:	68a0      	ldr	r0, [r4, #8]
    1894:	f7ff ffa0 	bl	17d8 <std.isra.0>
    1898:	2202      	movs	r2, #2
    189a:	2112      	movs	r1, #18
    189c:	68e0      	ldr	r0, [r4, #12]
    189e:	f7ff ff9b 	bl	17d8 <std.isra.0>
    18a2:	2301      	movs	r3, #1
    18a4:	61a3      	str	r3, [r4, #24]
    18a6:	bd13      	pop	{r0, r1, r4, pc}
    18a8:	00002364 	.word	0x00002364
    18ac:	000017c9 	.word	0x000017c9

000018b0 <__sfp>:
    18b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18b2:	4b1c      	ldr	r3, [pc, #112]	; (1924 <__sfp+0x74>)
    18b4:	0007      	movs	r7, r0
    18b6:	681e      	ldr	r6, [r3, #0]
    18b8:	69b3      	ldr	r3, [r6, #24]
    18ba:	b913      	cbnz	r3, 18c2 <__sfp+0x12>
    18bc:	0030      	movs	r0, r6
    18be:	f7ff ffc5 	bl	184c <__sinit>
    18c2:	3648      	adds	r6, #72	; 0x48
    18c4:	68b4      	ldr	r4, [r6, #8]
    18c6:	6873      	ldr	r3, [r6, #4]
    18c8:	3b01      	subs	r3, #1
    18ca:	d503      	bpl.n	18d4 <__sfp+0x24>
    18cc:	6833      	ldr	r3, [r6, #0]
    18ce:	b133      	cbz	r3, 18de <__sfp+0x2e>
    18d0:	6836      	ldr	r6, [r6, #0]
    18d2:	e7f7      	b.n	18c4 <__sfp+0x14>
    18d4:	220c      	movs	r2, #12
    18d6:	5ea5      	ldrsh	r5, [r4, r2]
    18d8:	b16d      	cbz	r5, 18f6 <__sfp+0x46>
    18da:	3468      	adds	r4, #104	; 0x68
    18dc:	e7f4      	b.n	18c8 <__sfp+0x18>
    18de:	2104      	movs	r1, #4
    18e0:	0038      	movs	r0, r7
    18e2:	f7ff ff9d 	bl	1820 <__sfmoreglue>
    18e6:	6030      	str	r0, [r6, #0]
    18e8:	2800      	cmp	r0, #0
    18ea:	d1f1      	bne.n	18d0 <__sfp+0x20>
    18ec:	230c      	movs	r3, #12
    18ee:	0004      	movs	r4, r0
    18f0:	603b      	str	r3, [r7, #0]
    18f2:	0020      	movs	r0, r4
    18f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f6:	2301      	movs	r3, #1
    18f8:	0020      	movs	r0, r4
    18fa:	425b      	negs	r3, r3
    18fc:	81e3      	strh	r3, [r4, #14]
    18fe:	3302      	adds	r3, #2
    1900:	81a3      	strh	r3, [r4, #12]
    1902:	6665      	str	r5, [r4, #100]	; 0x64
    1904:	6025      	str	r5, [r4, #0]
    1906:	60a5      	str	r5, [r4, #8]
    1908:	6065      	str	r5, [r4, #4]
    190a:	6125      	str	r5, [r4, #16]
    190c:	6165      	str	r5, [r4, #20]
    190e:	61a5      	str	r5, [r4, #24]
    1910:	2208      	movs	r2, #8
    1912:	0029      	movs	r1, r5
    1914:	305c      	adds	r0, #92	; 0x5c
    1916:	f7ff fca9 	bl	126c <memset>
    191a:	6365      	str	r5, [r4, #52]	; 0x34
    191c:	63a5      	str	r5, [r4, #56]	; 0x38
    191e:	64a5      	str	r5, [r4, #72]	; 0x48
    1920:	64e5      	str	r5, [r4, #76]	; 0x4c
    1922:	e7e6      	b.n	18f2 <__sfp+0x42>
    1924:	00002364 	.word	0x00002364

00001928 <_fwalk_reent>:
    1928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    192a:	0004      	movs	r4, r0
    192c:	0007      	movs	r7, r0
    192e:	2600      	movs	r6, #0
    1930:	9101      	str	r1, [sp, #4]
    1932:	3448      	adds	r4, #72	; 0x48
    1934:	b90c      	cbnz	r4, 193a <_fwalk_reent+0x12>
    1936:	0030      	movs	r0, r6
    1938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    193a:	6863      	ldr	r3, [r4, #4]
    193c:	68a5      	ldr	r5, [r4, #8]
    193e:	9300      	str	r3, [sp, #0]
    1940:	9b00      	ldr	r3, [sp, #0]
    1942:	3b01      	subs	r3, #1
    1944:	9300      	str	r3, [sp, #0]
    1946:	d501      	bpl.n	194c <_fwalk_reent+0x24>
    1948:	6824      	ldr	r4, [r4, #0]
    194a:	e7f3      	b.n	1934 <_fwalk_reent+0xc>
    194c:	89ab      	ldrh	r3, [r5, #12]
    194e:	2b01      	cmp	r3, #1
    1950:	d908      	bls.n	1964 <_fwalk_reent+0x3c>
    1952:	220e      	movs	r2, #14
    1954:	5eab      	ldrsh	r3, [r5, r2]
    1956:	3301      	adds	r3, #1
    1958:	d004      	beq.n	1964 <_fwalk_reent+0x3c>
    195a:	0029      	movs	r1, r5
    195c:	0038      	movs	r0, r7
    195e:	9b01      	ldr	r3, [sp, #4]
    1960:	4798      	blx	r3
    1962:	4306      	orrs	r6, r0
    1964:	3568      	adds	r5, #104	; 0x68
    1966:	e7eb      	b.n	1940 <_fwalk_reent+0x18>

00001968 <__swhatbuf_r>:
    1968:	b570      	push	{r4, r5, r6, lr}
    196a:	000e      	movs	r6, r1
    196c:	001d      	movs	r5, r3
    196e:	230e      	movs	r3, #14
    1970:	5ec9      	ldrsh	r1, [r1, r3]
    1972:	b090      	sub	sp, #64	; 0x40
    1974:	0014      	movs	r4, r2
    1976:	2900      	cmp	r1, #0
    1978:	da07      	bge.n	198a <__swhatbuf_r+0x22>
    197a:	2300      	movs	r3, #0
    197c:	602b      	str	r3, [r5, #0]
    197e:	89b3      	ldrh	r3, [r6, #12]
    1980:	061b      	lsls	r3, r3, #24
    1982:	d411      	bmi.n	19a8 <__swhatbuf_r+0x40>
    1984:	f240 4300 	movw	r3, #1024	; 0x400
    1988:	e00f      	b.n	19aa <__swhatbuf_r+0x42>
    198a:	aa01      	add	r2, sp, #4
    198c:	f000 fc42 	bl	2214 <_fstat_r>
    1990:	2800      	cmp	r0, #0
    1992:	dbf2      	blt.n	197a <__swhatbuf_r+0x12>
    1994:	f24f 0200 	movw	r2, #61440	; 0xf000
    1998:	9b02      	ldr	r3, [sp, #8]
    199a:	4013      	ands	r3, r2
    199c:	4a05      	ldr	r2, [pc, #20]	; (19b4 <__swhatbuf_r+0x4c>)
    199e:	189b      	adds	r3, r3, r2
    19a0:	425a      	negs	r2, r3
    19a2:	4153      	adcs	r3, r2
    19a4:	602b      	str	r3, [r5, #0]
    19a6:	e7ed      	b.n	1984 <__swhatbuf_r+0x1c>
    19a8:	2340      	movs	r3, #64	; 0x40
    19aa:	2000      	movs	r0, #0
    19ac:	6023      	str	r3, [r4, #0]
    19ae:	b010      	add	sp, #64	; 0x40
    19b0:	bd70      	pop	{r4, r5, r6, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	ffffe000 	.word	0xffffe000

000019b8 <__smakebuf_r>:
    19b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19ba:	2602      	movs	r6, #2
    19bc:	898b      	ldrh	r3, [r1, #12]
    19be:	0005      	movs	r5, r0
    19c0:	000c      	movs	r4, r1
    19c2:	4233      	tst	r3, r6
    19c4:	d006      	beq.n	19d4 <__smakebuf_r+0x1c>
    19c6:	0023      	movs	r3, r4
    19c8:	3347      	adds	r3, #71	; 0x47
    19ca:	6023      	str	r3, [r4, #0]
    19cc:	6123      	str	r3, [r4, #16]
    19ce:	2301      	movs	r3, #1
    19d0:	6163      	str	r3, [r4, #20]
    19d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    19d4:	ab01      	add	r3, sp, #4
    19d6:	466a      	mov	r2, sp
    19d8:	f7ff ffc6 	bl	1968 <__swhatbuf_r>
    19dc:	9900      	ldr	r1, [sp, #0]
    19de:	0007      	movs	r7, r0
    19e0:	0028      	movs	r0, r5
    19e2:	f000 f87d 	bl	1ae0 <_malloc_r>
    19e6:	b940      	cbnz	r0, 19fa <__smakebuf_r+0x42>
    19e8:	220c      	movs	r2, #12
    19ea:	5ea3      	ldrsh	r3, [r4, r2]
    19ec:	059a      	lsls	r2, r3, #22
    19ee:	d4f0      	bmi.n	19d2 <__smakebuf_r+0x1a>
    19f0:	2203      	movs	r2, #3
    19f2:	4393      	bics	r3, r2
    19f4:	431e      	orrs	r6, r3
    19f6:	81a6      	strh	r6, [r4, #12]
    19f8:	e7e5      	b.n	19c6 <__smakebuf_r+0xe>
    19fa:	4b0e      	ldr	r3, [pc, #56]	; (1a34 <__smakebuf_r+0x7c>)
    19fc:	62ab      	str	r3, [r5, #40]	; 0x28
    19fe:	2380      	movs	r3, #128	; 0x80
    1a00:	89a2      	ldrh	r2, [r4, #12]
    1a02:	6020      	str	r0, [r4, #0]
    1a04:	4313      	orrs	r3, r2
    1a06:	81a3      	strh	r3, [r4, #12]
    1a08:	9b00      	ldr	r3, [sp, #0]
    1a0a:	6120      	str	r0, [r4, #16]
    1a0c:	6163      	str	r3, [r4, #20]
    1a0e:	9b01      	ldr	r3, [sp, #4]
    1a10:	b163      	cbz	r3, 1a2c <__smakebuf_r+0x74>
    1a12:	230e      	movs	r3, #14
    1a14:	5ee1      	ldrsh	r1, [r4, r3]
    1a16:	0028      	movs	r0, r5
    1a18:	f000 fc0e 	bl	2238 <_isatty_r>
    1a1c:	b130      	cbz	r0, 1a2c <__smakebuf_r+0x74>
    1a1e:	2203      	movs	r2, #3
    1a20:	89a3      	ldrh	r3, [r4, #12]
    1a22:	4393      	bics	r3, r2
    1a24:	001a      	movs	r2, r3
    1a26:	2301      	movs	r3, #1
    1a28:	4313      	orrs	r3, r2
    1a2a:	81a3      	strh	r3, [r4, #12]
    1a2c:	89a0      	ldrh	r0, [r4, #12]
    1a2e:	4338      	orrs	r0, r7
    1a30:	81a0      	strh	r0, [r4, #12]
    1a32:	e7ce      	b.n	19d2 <__smakebuf_r+0x1a>
    1a34:	000017c9 	.word	0x000017c9

00001a38 <malloc>:
    1a38:	b510      	push	{r4, lr}
    1a3a:	4b03      	ldr	r3, [pc, #12]	; (1a48 <malloc+0x10>)
    1a3c:	0001      	movs	r1, r0
    1a3e:	6818      	ldr	r0, [r3, #0]
    1a40:	f000 f84e 	bl	1ae0 <_malloc_r>
    1a44:	bd10      	pop	{r4, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	20000008 	.word	0x20000008

00001a4c <_free_r>:
    1a4c:	b570      	push	{r4, r5, r6, lr}
    1a4e:	0005      	movs	r5, r0
    1a50:	b181      	cbz	r1, 1a74 <_free_r+0x28>
    1a52:	1f0c      	subs	r4, r1, #4
    1a54:	6823      	ldr	r3, [r4, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	da00      	bge.n	1a5c <_free_r+0x10>
    1a5a:	18e4      	adds	r4, r4, r3
    1a5c:	0028      	movs	r0, r5
    1a5e:	f000 fc18 	bl	2292 <__malloc_lock>
    1a62:	4a1e      	ldr	r2, [pc, #120]	; (1adc <_free_r+0x90>)
    1a64:	6813      	ldr	r3, [r2, #0]
    1a66:	0011      	movs	r1, r2
    1a68:	b92b      	cbnz	r3, 1a76 <_free_r+0x2a>
    1a6a:	6063      	str	r3, [r4, #4]
    1a6c:	6014      	str	r4, [r2, #0]
    1a6e:	0028      	movs	r0, r5
    1a70:	f000 fc10 	bl	2294 <__malloc_unlock>
    1a74:	bd70      	pop	{r4, r5, r6, pc}
    1a76:	42a3      	cmp	r3, r4
    1a78:	d90b      	bls.n	1a92 <_free_r+0x46>
    1a7a:	6822      	ldr	r2, [r4, #0]
    1a7c:	18a0      	adds	r0, r4, r2
    1a7e:	4283      	cmp	r3, r0
    1a80:	d103      	bne.n	1a8a <_free_r+0x3e>
    1a82:	6818      	ldr	r0, [r3, #0]
    1a84:	685b      	ldr	r3, [r3, #4]
    1a86:	1882      	adds	r2, r0, r2
    1a88:	6022      	str	r2, [r4, #0]
    1a8a:	6063      	str	r3, [r4, #4]
    1a8c:	600c      	str	r4, [r1, #0]
    1a8e:	e7ee      	b.n	1a6e <_free_r+0x22>
    1a90:	0013      	movs	r3, r2
    1a92:	685a      	ldr	r2, [r3, #4]
    1a94:	b10a      	cbz	r2, 1a9a <_free_r+0x4e>
    1a96:	42a2      	cmp	r2, r4
    1a98:	d9fa      	bls.n	1a90 <_free_r+0x44>
    1a9a:	6819      	ldr	r1, [r3, #0]
    1a9c:	1858      	adds	r0, r3, r1
    1a9e:	42a0      	cmp	r0, r4
    1aa0:	d10b      	bne.n	1aba <_free_r+0x6e>
    1aa2:	6820      	ldr	r0, [r4, #0]
    1aa4:	1809      	adds	r1, r1, r0
    1aa6:	1858      	adds	r0, r3, r1
    1aa8:	6019      	str	r1, [r3, #0]
    1aaa:	4282      	cmp	r2, r0
    1aac:	d1df      	bne.n	1a6e <_free_r+0x22>
    1aae:	6810      	ldr	r0, [r2, #0]
    1ab0:	6852      	ldr	r2, [r2, #4]
    1ab2:	1841      	adds	r1, r0, r1
    1ab4:	6019      	str	r1, [r3, #0]
    1ab6:	605a      	str	r2, [r3, #4]
    1ab8:	e7d9      	b.n	1a6e <_free_r+0x22>
    1aba:	42a0      	cmp	r0, r4
    1abc:	d902      	bls.n	1ac4 <_free_r+0x78>
    1abe:	230c      	movs	r3, #12
    1ac0:	602b      	str	r3, [r5, #0]
    1ac2:	e7d4      	b.n	1a6e <_free_r+0x22>
    1ac4:	6821      	ldr	r1, [r4, #0]
    1ac6:	1860      	adds	r0, r4, r1
    1ac8:	4282      	cmp	r2, r0
    1aca:	d103      	bne.n	1ad4 <_free_r+0x88>
    1acc:	6810      	ldr	r0, [r2, #0]
    1ace:	6852      	ldr	r2, [r2, #4]
    1ad0:	1841      	adds	r1, r0, r1
    1ad2:	6021      	str	r1, [r4, #0]
    1ad4:	6062      	str	r2, [r4, #4]
    1ad6:	605c      	str	r4, [r3, #4]
    1ad8:	e7c9      	b.n	1a6e <_free_r+0x22>
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	200010b0 	.word	0x200010b0

00001ae0 <_malloc_r>:
    1ae0:	2303      	movs	r3, #3
    1ae2:	b570      	push	{r4, r5, r6, lr}
    1ae4:	1ccd      	adds	r5, r1, #3
    1ae6:	439d      	bics	r5, r3
    1ae8:	3508      	adds	r5, #8
    1aea:	0006      	movs	r6, r0
    1aec:	2d0c      	cmp	r5, #12
    1aee:	d21c      	bcs.n	1b2a <_malloc_r+0x4a>
    1af0:	250c      	movs	r5, #12
    1af2:	42a9      	cmp	r1, r5
    1af4:	d81b      	bhi.n	1b2e <_malloc_r+0x4e>
    1af6:	0030      	movs	r0, r6
    1af8:	f000 fbcb 	bl	2292 <__malloc_lock>
    1afc:	4a25      	ldr	r2, [pc, #148]	; (1b94 <_malloc_r+0xb4>)
    1afe:	6814      	ldr	r4, [r2, #0]
    1b00:	0021      	movs	r1, r4
    1b02:	b9c1      	cbnz	r1, 1b36 <_malloc_r+0x56>
    1b04:	4c24      	ldr	r4, [pc, #144]	; (1b98 <_malloc_r+0xb8>)
    1b06:	6823      	ldr	r3, [r4, #0]
    1b08:	b91b      	cbnz	r3, 1b12 <_malloc_r+0x32>
    1b0a:	0030      	movs	r0, r6
    1b0c:	f000 fb04 	bl	2118 <_sbrk_r>
    1b10:	6020      	str	r0, [r4, #0]
    1b12:	0029      	movs	r1, r5
    1b14:	0030      	movs	r0, r6
    1b16:	f000 faff 	bl	2118 <_sbrk_r>
    1b1a:	1c43      	adds	r3, r0, #1
    1b1c:	d12d      	bne.n	1b7a <_malloc_r+0x9a>
    1b1e:	230c      	movs	r3, #12
    1b20:	0030      	movs	r0, r6
    1b22:	6033      	str	r3, [r6, #0]
    1b24:	f000 fbb6 	bl	2294 <__malloc_unlock>
    1b28:	e003      	b.n	1b32 <_malloc_r+0x52>
    1b2a:	2d00      	cmp	r5, #0
    1b2c:	dae1      	bge.n	1af2 <_malloc_r+0x12>
    1b2e:	230c      	movs	r3, #12
    1b30:	6033      	str	r3, [r6, #0]
    1b32:	2000      	movs	r0, #0
    1b34:	bd70      	pop	{r4, r5, r6, pc}
    1b36:	680b      	ldr	r3, [r1, #0]
    1b38:	1b5b      	subs	r3, r3, r5
    1b3a:	d41b      	bmi.n	1b74 <_malloc_r+0x94>
    1b3c:	2b0b      	cmp	r3, #11
    1b3e:	d903      	bls.n	1b48 <_malloc_r+0x68>
    1b40:	600b      	str	r3, [r1, #0]
    1b42:	18cc      	adds	r4, r1, r3
    1b44:	6025      	str	r5, [r4, #0]
    1b46:	e003      	b.n	1b50 <_malloc_r+0x70>
    1b48:	428c      	cmp	r4, r1
    1b4a:	d10f      	bne.n	1b6c <_malloc_r+0x8c>
    1b4c:	6863      	ldr	r3, [r4, #4]
    1b4e:	6013      	str	r3, [r2, #0]
    1b50:	0030      	movs	r0, r6
    1b52:	f000 fb9f 	bl	2294 <__malloc_unlock>
    1b56:	0020      	movs	r0, r4
    1b58:	2207      	movs	r2, #7
    1b5a:	300b      	adds	r0, #11
    1b5c:	1d23      	adds	r3, r4, #4
    1b5e:	4390      	bics	r0, r2
    1b60:	1ac3      	subs	r3, r0, r3
    1b62:	2b00      	cmp	r3, #0
    1b64:	d0e6      	beq.n	1b34 <_malloc_r+0x54>
    1b66:	425a      	negs	r2, r3
    1b68:	50e2      	str	r2, [r4, r3]
    1b6a:	e7e3      	b.n	1b34 <_malloc_r+0x54>
    1b6c:	684b      	ldr	r3, [r1, #4]
    1b6e:	6063      	str	r3, [r4, #4]
    1b70:	000c      	movs	r4, r1
    1b72:	e7ed      	b.n	1b50 <_malloc_r+0x70>
    1b74:	000c      	movs	r4, r1
    1b76:	6849      	ldr	r1, [r1, #4]
    1b78:	e7c3      	b.n	1b02 <_malloc_r+0x22>
    1b7a:	2303      	movs	r3, #3
    1b7c:	1cc4      	adds	r4, r0, #3
    1b7e:	439c      	bics	r4, r3
    1b80:	42a0      	cmp	r0, r4
    1b82:	d0df      	beq.n	1b44 <_malloc_r+0x64>
    1b84:	1a21      	subs	r1, r4, r0
    1b86:	0030      	movs	r0, r6
    1b88:	f000 fac6 	bl	2118 <_sbrk_r>
    1b8c:	1c43      	adds	r3, r0, #1
    1b8e:	d1d9      	bne.n	1b44 <_malloc_r+0x64>
    1b90:	e7c5      	b.n	1b1e <_malloc_r+0x3e>
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	200010b0 	.word	0x200010b0
    1b98:	200010b4 	.word	0x200010b4

00001b9c <__sfputc_r>:
    1b9c:	6893      	ldr	r3, [r2, #8]
    1b9e:	b510      	push	{r4, lr}
    1ba0:	3b01      	subs	r3, #1
    1ba2:	6093      	str	r3, [r2, #8]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	da05      	bge.n	1bb4 <__sfputc_r+0x18>
    1ba8:	6994      	ldr	r4, [r2, #24]
    1baa:	42a3      	cmp	r3, r4
    1bac:	db08      	blt.n	1bc0 <__sfputc_r+0x24>
    1bae:	b2cb      	uxtb	r3, r1
    1bb0:	2b0a      	cmp	r3, #10
    1bb2:	d005      	beq.n	1bc0 <__sfputc_r+0x24>
    1bb4:	6813      	ldr	r3, [r2, #0]
    1bb6:	1c58      	adds	r0, r3, #1
    1bb8:	6010      	str	r0, [r2, #0]
    1bba:	7019      	strb	r1, [r3, #0]
    1bbc:	b2c8      	uxtb	r0, r1
    1bbe:	bd10      	pop	{r4, pc}
    1bc0:	f7ff fc8c 	bl	14dc <__swbuf_r>
    1bc4:	e7fb      	b.n	1bbe <__sfputc_r+0x22>

00001bc6 <__sfputs_r>:
    1bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc8:	0006      	movs	r6, r0
    1bca:	000f      	movs	r7, r1
    1bcc:	0014      	movs	r4, r2
    1bce:	18d5      	adds	r5, r2, r3
    1bd0:	42ac      	cmp	r4, r5
    1bd2:	d101      	bne.n	1bd8 <__sfputs_r+0x12>
    1bd4:	2000      	movs	r0, #0
    1bd6:	e007      	b.n	1be8 <__sfputs_r+0x22>
    1bd8:	7821      	ldrb	r1, [r4, #0]
    1bda:	003a      	movs	r2, r7
    1bdc:	0030      	movs	r0, r6
    1bde:	f7ff ffdd 	bl	1b9c <__sfputc_r>
    1be2:	3401      	adds	r4, #1
    1be4:	1c43      	adds	r3, r0, #1
    1be6:	d1f3      	bne.n	1bd0 <__sfputs_r+0xa>
    1be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001bec <_vfiprintf_r>:
    1bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bee:	b09f      	sub	sp, #124	; 0x7c
    1bf0:	9002      	str	r0, [sp, #8]
    1bf2:	000f      	movs	r7, r1
    1bf4:	0016      	movs	r6, r2
    1bf6:	9305      	str	r3, [sp, #20]
    1bf8:	b120      	cbz	r0, 1c04 <_vfiprintf_r+0x18>
    1bfa:	6983      	ldr	r3, [r0, #24]
    1bfc:	9304      	str	r3, [sp, #16]
    1bfe:	b90b      	cbnz	r3, 1c04 <_vfiprintf_r+0x18>
    1c00:	f7ff fe24 	bl	184c <__sinit>
    1c04:	4b7e      	ldr	r3, [pc, #504]	; (1e00 <_vfiprintf_r+0x214>)
    1c06:	429f      	cmp	r7, r3
    1c08:	d15b      	bne.n	1cc2 <_vfiprintf_r+0xd6>
    1c0a:	9b02      	ldr	r3, [sp, #8]
    1c0c:	685f      	ldr	r7, [r3, #4]
    1c0e:	89bb      	ldrh	r3, [r7, #12]
    1c10:	071b      	lsls	r3, r3, #28
    1c12:	d562      	bpl.n	1cda <_vfiprintf_r+0xee>
    1c14:	693b      	ldr	r3, [r7, #16]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d05f      	beq.n	1cda <_vfiprintf_r+0xee>
    1c1a:	2300      	movs	r3, #0
    1c1c:	ad06      	add	r5, sp, #24
    1c1e:	616b      	str	r3, [r5, #20]
    1c20:	3320      	adds	r3, #32
    1c22:	766b      	strb	r3, [r5, #25]
    1c24:	3310      	adds	r3, #16
    1c26:	76ab      	strb	r3, [r5, #26]
    1c28:	0034      	movs	r4, r6
    1c2a:	7823      	ldrb	r3, [r4, #0]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d15e      	bne.n	1cee <_vfiprintf_r+0x102>
    1c30:	1ba3      	subs	r3, r4, r6
    1c32:	9304      	str	r3, [sp, #16]
    1c34:	b16b      	cbz	r3, 1c52 <_vfiprintf_r+0x66>
    1c36:	1ba3      	subs	r3, r4, r6
    1c38:	0032      	movs	r2, r6
    1c3a:	0039      	movs	r1, r7
    1c3c:	9802      	ldr	r0, [sp, #8]
    1c3e:	f7ff ffc2 	bl	1bc6 <__sfputs_r>
    1c42:	1c43      	adds	r3, r0, #1
    1c44:	d100      	bne.n	1c48 <_vfiprintf_r+0x5c>
    1c46:	e0cb      	b.n	1de0 <_vfiprintf_r+0x1f4>
    1c48:	696a      	ldr	r2, [r5, #20]
    1c4a:	9b04      	ldr	r3, [sp, #16]
    1c4c:	4694      	mov	ip, r2
    1c4e:	4463      	add	r3, ip
    1c50:	616b      	str	r3, [r5, #20]
    1c52:	7823      	ldrb	r3, [r4, #0]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d100      	bne.n	1c5a <_vfiprintf_r+0x6e>
    1c58:	e0c2      	b.n	1de0 <_vfiprintf_r+0x1f4>
    1c5a:	2201      	movs	r2, #1
    1c5c:	2300      	movs	r3, #0
    1c5e:	4252      	negs	r2, r2
    1c60:	606a      	str	r2, [r5, #4]
    1c62:	a902      	add	r1, sp, #8
    1c64:	3254      	adds	r2, #84	; 0x54
    1c66:	1852      	adds	r2, r2, r1
    1c68:	3401      	adds	r4, #1
    1c6a:	602b      	str	r3, [r5, #0]
    1c6c:	60eb      	str	r3, [r5, #12]
    1c6e:	60ab      	str	r3, [r5, #8]
    1c70:	7013      	strb	r3, [r2, #0]
    1c72:	65ab      	str	r3, [r5, #88]	; 0x58
    1c74:	4e63      	ldr	r6, [pc, #396]	; (1e04 <_vfiprintf_r+0x218>)
    1c76:	2205      	movs	r2, #5
    1c78:	7821      	ldrb	r1, [r4, #0]
    1c7a:	0030      	movs	r0, r6
    1c7c:	f000 fafe 	bl	227c <memchr>
    1c80:	1c62      	adds	r2, r4, #1
    1c82:	2800      	cmp	r0, #0
    1c84:	d137      	bne.n	1cf6 <_vfiprintf_r+0x10a>
    1c86:	6829      	ldr	r1, [r5, #0]
    1c88:	06cb      	lsls	r3, r1, #27
    1c8a:	d504      	bpl.n	1c96 <_vfiprintf_r+0xaa>
    1c8c:	2353      	movs	r3, #83	; 0x53
    1c8e:	ae02      	add	r6, sp, #8
    1c90:	3020      	adds	r0, #32
    1c92:	199b      	adds	r3, r3, r6
    1c94:	7018      	strb	r0, [r3, #0]
    1c96:	070b      	lsls	r3, r1, #28
    1c98:	d504      	bpl.n	1ca4 <_vfiprintf_r+0xb8>
    1c9a:	2353      	movs	r3, #83	; 0x53
    1c9c:	202b      	movs	r0, #43	; 0x2b
    1c9e:	ae02      	add	r6, sp, #8
    1ca0:	199b      	adds	r3, r3, r6
    1ca2:	7018      	strb	r0, [r3, #0]
    1ca4:	7823      	ldrb	r3, [r4, #0]
    1ca6:	2b2a      	cmp	r3, #42	; 0x2a
    1ca8:	d02d      	beq.n	1d06 <_vfiprintf_r+0x11a>
    1caa:	2100      	movs	r1, #0
    1cac:	200a      	movs	r0, #10
    1cae:	2601      	movs	r6, #1
    1cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cb2:	7822      	ldrb	r2, [r4, #0]
    1cb4:	3a30      	subs	r2, #48	; 0x30
    1cb6:	2a09      	cmp	r2, #9
    1cb8:	d969      	bls.n	1d8e <_vfiprintf_r+0x1a2>
    1cba:	2900      	cmp	r1, #0
    1cbc:	d02b      	beq.n	1d16 <_vfiprintf_r+0x12a>
    1cbe:	9309      	str	r3, [sp, #36]	; 0x24
    1cc0:	e029      	b.n	1d16 <_vfiprintf_r+0x12a>
    1cc2:	4b51      	ldr	r3, [pc, #324]	; (1e08 <_vfiprintf_r+0x21c>)
    1cc4:	429f      	cmp	r7, r3
    1cc6:	d102      	bne.n	1cce <_vfiprintf_r+0xe2>
    1cc8:	9b02      	ldr	r3, [sp, #8]
    1cca:	689f      	ldr	r7, [r3, #8]
    1ccc:	e79f      	b.n	1c0e <_vfiprintf_r+0x22>
    1cce:	4b4f      	ldr	r3, [pc, #316]	; (1e0c <_vfiprintf_r+0x220>)
    1cd0:	429f      	cmp	r7, r3
    1cd2:	d19c      	bne.n	1c0e <_vfiprintf_r+0x22>
    1cd4:	9b02      	ldr	r3, [sp, #8]
    1cd6:	68df      	ldr	r7, [r3, #12]
    1cd8:	e799      	b.n	1c0e <_vfiprintf_r+0x22>
    1cda:	0039      	movs	r1, r7
    1cdc:	9802      	ldr	r0, [sp, #8]
    1cde:	f7ff fc4f 	bl	1580 <__swsetup_r>
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d099      	beq.n	1c1a <_vfiprintf_r+0x2e>
    1ce6:	2001      	movs	r0, #1
    1ce8:	4240      	negs	r0, r0
    1cea:	b01f      	add	sp, #124	; 0x7c
    1cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cee:	2b25      	cmp	r3, #37	; 0x25
    1cf0:	d09e      	beq.n	1c30 <_vfiprintf_r+0x44>
    1cf2:	3401      	adds	r4, #1
    1cf4:	e799      	b.n	1c2a <_vfiprintf_r+0x3e>
    1cf6:	2301      	movs	r3, #1
    1cf8:	1b80      	subs	r0, r0, r6
    1cfa:	4083      	lsls	r3, r0
    1cfc:	6829      	ldr	r1, [r5, #0]
    1cfe:	0014      	movs	r4, r2
    1d00:	430b      	orrs	r3, r1
    1d02:	602b      	str	r3, [r5, #0]
    1d04:	e7b6      	b.n	1c74 <_vfiprintf_r+0x88>
    1d06:	9b05      	ldr	r3, [sp, #20]
    1d08:	1d18      	adds	r0, r3, #4
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	9005      	str	r0, [sp, #20]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	db37      	blt.n	1d82 <_vfiprintf_r+0x196>
    1d12:	9309      	str	r3, [sp, #36]	; 0x24
    1d14:	0014      	movs	r4, r2
    1d16:	7823      	ldrb	r3, [r4, #0]
    1d18:	2b2e      	cmp	r3, #46	; 0x2e
    1d1a:	d10b      	bne.n	1d34 <_vfiprintf_r+0x148>
    1d1c:	7863      	ldrb	r3, [r4, #1]
    1d1e:	1c62      	adds	r2, r4, #1
    1d20:	2b2a      	cmp	r3, #42	; 0x2a
    1d22:	d13c      	bne.n	1d9e <_vfiprintf_r+0x1b2>
    1d24:	9b05      	ldr	r3, [sp, #20]
    1d26:	3402      	adds	r4, #2
    1d28:	1d1a      	adds	r2, r3, #4
    1d2a:	681b      	ldr	r3, [r3, #0]
    1d2c:	9205      	str	r2, [sp, #20]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	db32      	blt.n	1d98 <_vfiprintf_r+0x1ac>
    1d32:	9307      	str	r3, [sp, #28]
    1d34:	4e36      	ldr	r6, [pc, #216]	; (1e10 <_vfiprintf_r+0x224>)
    1d36:	7821      	ldrb	r1, [r4, #0]
    1d38:	2203      	movs	r2, #3
    1d3a:	0030      	movs	r0, r6
    1d3c:	f000 fa9e 	bl	227c <memchr>
    1d40:	b130      	cbz	r0, 1d50 <_vfiprintf_r+0x164>
    1d42:	2340      	movs	r3, #64	; 0x40
    1d44:	1b80      	subs	r0, r0, r6
    1d46:	4083      	lsls	r3, r0
    1d48:	682a      	ldr	r2, [r5, #0]
    1d4a:	3401      	adds	r4, #1
    1d4c:	4313      	orrs	r3, r2
    1d4e:	602b      	str	r3, [r5, #0]
    1d50:	7821      	ldrb	r1, [r4, #0]
    1d52:	2206      	movs	r2, #6
    1d54:	482f      	ldr	r0, [pc, #188]	; (1e14 <_vfiprintf_r+0x228>)
    1d56:	1c66      	adds	r6, r4, #1
    1d58:	7629      	strb	r1, [r5, #24]
    1d5a:	f000 fa8f 	bl	227c <memchr>
    1d5e:	2800      	cmp	r0, #0
    1d60:	d044      	beq.n	1dec <_vfiprintf_r+0x200>
    1d62:	4b2d      	ldr	r3, [pc, #180]	; (1e18 <_vfiprintf_r+0x22c>)
    1d64:	bb83      	cbnz	r3, 1dc8 <_vfiprintf_r+0x1dc>
    1d66:	6829      	ldr	r1, [r5, #0]
    1d68:	9b05      	ldr	r3, [sp, #20]
    1d6a:	2207      	movs	r2, #7
    1d6c:	05c9      	lsls	r1, r1, #23
    1d6e:	d529      	bpl.n	1dc4 <_vfiprintf_r+0x1d8>
    1d70:	189b      	adds	r3, r3, r2
    1d72:	4393      	bics	r3, r2
    1d74:	3308      	adds	r3, #8
    1d76:	9305      	str	r3, [sp, #20]
    1d78:	696b      	ldr	r3, [r5, #20]
    1d7a:	9a03      	ldr	r2, [sp, #12]
    1d7c:	189b      	adds	r3, r3, r2
    1d7e:	616b      	str	r3, [r5, #20]
    1d80:	e752      	b.n	1c28 <_vfiprintf_r+0x3c>
    1d82:	425b      	negs	r3, r3
    1d84:	60eb      	str	r3, [r5, #12]
    1d86:	2302      	movs	r3, #2
    1d88:	430b      	orrs	r3, r1
    1d8a:	602b      	str	r3, [r5, #0]
    1d8c:	e7c2      	b.n	1d14 <_vfiprintf_r+0x128>
    1d8e:	4343      	muls	r3, r0
    1d90:	3401      	adds	r4, #1
    1d92:	189b      	adds	r3, r3, r2
    1d94:	0031      	movs	r1, r6
    1d96:	e78c      	b.n	1cb2 <_vfiprintf_r+0xc6>
    1d98:	2301      	movs	r3, #1
    1d9a:	425b      	negs	r3, r3
    1d9c:	e7c9      	b.n	1d32 <_vfiprintf_r+0x146>
    1d9e:	2300      	movs	r3, #0
    1da0:	0014      	movs	r4, r2
    1da2:	200a      	movs	r0, #10
    1da4:	001a      	movs	r2, r3
    1da6:	2601      	movs	r6, #1
    1da8:	606b      	str	r3, [r5, #4]
    1daa:	7821      	ldrb	r1, [r4, #0]
    1dac:	3930      	subs	r1, #48	; 0x30
    1dae:	2909      	cmp	r1, #9
    1db0:	d903      	bls.n	1dba <_vfiprintf_r+0x1ce>
    1db2:	2b00      	cmp	r3, #0
    1db4:	d0be      	beq.n	1d34 <_vfiprintf_r+0x148>
    1db6:	9207      	str	r2, [sp, #28]
    1db8:	e7bc      	b.n	1d34 <_vfiprintf_r+0x148>
    1dba:	4342      	muls	r2, r0
    1dbc:	3401      	adds	r4, #1
    1dbe:	1852      	adds	r2, r2, r1
    1dc0:	0033      	movs	r3, r6
    1dc2:	e7f2      	b.n	1daa <_vfiprintf_r+0x1be>
    1dc4:	3307      	adds	r3, #7
    1dc6:	e7d4      	b.n	1d72 <_vfiprintf_r+0x186>
    1dc8:	ab05      	add	r3, sp, #20
    1dca:	9300      	str	r3, [sp, #0]
    1dcc:	003a      	movs	r2, r7
    1dce:	4b13      	ldr	r3, [pc, #76]	; (1e1c <_vfiprintf_r+0x230>)
    1dd0:	0029      	movs	r1, r5
    1dd2:	9802      	ldr	r0, [sp, #8]
    1dd4:	e000      	b.n	1dd8 <_vfiprintf_r+0x1ec>
    1dd6:	bf00      	nop
    1dd8:	9003      	str	r0, [sp, #12]
    1dda:	9b03      	ldr	r3, [sp, #12]
    1ddc:	3301      	adds	r3, #1
    1dde:	d1cb      	bne.n	1d78 <_vfiprintf_r+0x18c>
    1de0:	89bb      	ldrh	r3, [r7, #12]
    1de2:	065b      	lsls	r3, r3, #25
    1de4:	d500      	bpl.n	1de8 <_vfiprintf_r+0x1fc>
    1de6:	e77e      	b.n	1ce6 <_vfiprintf_r+0xfa>
    1de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1dea:	e77e      	b.n	1cea <_vfiprintf_r+0xfe>
    1dec:	ab05      	add	r3, sp, #20
    1dee:	9300      	str	r3, [sp, #0]
    1df0:	003a      	movs	r2, r7
    1df2:	4b0a      	ldr	r3, [pc, #40]	; (1e1c <_vfiprintf_r+0x230>)
    1df4:	0029      	movs	r1, r5
    1df6:	9802      	ldr	r0, [sp, #8]
    1df8:	f000 f87e 	bl	1ef8 <_printf_i>
    1dfc:	e7ec      	b.n	1dd8 <_vfiprintf_r+0x1ec>
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00002388 	.word	0x00002388
    1e04:	000023c8 	.word	0x000023c8
    1e08:	000023a8 	.word	0x000023a8
    1e0c:	00002368 	.word	0x00002368
    1e10:	000023ce 	.word	0x000023ce
    1e14:	000023d2 	.word	0x000023d2
    1e18:	00000000 	.word	0x00000000
    1e1c:	00001bc7 	.word	0x00001bc7

00001e20 <_printf_common>:
    1e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e22:	0015      	movs	r5, r2
    1e24:	9301      	str	r3, [sp, #4]
    1e26:	688a      	ldr	r2, [r1, #8]
    1e28:	690b      	ldr	r3, [r1, #16]
    1e2a:	9000      	str	r0, [sp, #0]
    1e2c:	000c      	movs	r4, r1
    1e2e:	4293      	cmp	r3, r2
    1e30:	da00      	bge.n	1e34 <_printf_common+0x14>
    1e32:	0013      	movs	r3, r2
    1e34:	0022      	movs	r2, r4
    1e36:	602b      	str	r3, [r5, #0]
    1e38:	3243      	adds	r2, #67	; 0x43
    1e3a:	7812      	ldrb	r2, [r2, #0]
    1e3c:	b10a      	cbz	r2, 1e42 <_printf_common+0x22>
    1e3e:	3301      	adds	r3, #1
    1e40:	602b      	str	r3, [r5, #0]
    1e42:	6823      	ldr	r3, [r4, #0]
    1e44:	069b      	lsls	r3, r3, #26
    1e46:	d502      	bpl.n	1e4e <_printf_common+0x2e>
    1e48:	682b      	ldr	r3, [r5, #0]
    1e4a:	3302      	adds	r3, #2
    1e4c:	602b      	str	r3, [r5, #0]
    1e4e:	2706      	movs	r7, #6
    1e50:	6823      	ldr	r3, [r4, #0]
    1e52:	401f      	ands	r7, r3
    1e54:	b33f      	cbz	r7, 1ea6 <_printf_common+0x86>
    1e56:	0023      	movs	r3, r4
    1e58:	3343      	adds	r3, #67	; 0x43
    1e5a:	781b      	ldrb	r3, [r3, #0]
    1e5c:	1e5a      	subs	r2, r3, #1
    1e5e:	4193      	sbcs	r3, r2
    1e60:	6822      	ldr	r2, [r4, #0]
    1e62:	0692      	lsls	r2, r2, #26
    1e64:	d430      	bmi.n	1ec8 <_printf_common+0xa8>
    1e66:	0022      	movs	r2, r4
    1e68:	9901      	ldr	r1, [sp, #4]
    1e6a:	3243      	adds	r2, #67	; 0x43
    1e6c:	9800      	ldr	r0, [sp, #0]
    1e6e:	9e08      	ldr	r6, [sp, #32]
    1e70:	47b0      	blx	r6
    1e72:	1c43      	adds	r3, r0, #1
    1e74:	d025      	beq.n	1ec2 <_printf_common+0xa2>
    1e76:	2306      	movs	r3, #6
    1e78:	6820      	ldr	r0, [r4, #0]
    1e7a:	682a      	ldr	r2, [r5, #0]
    1e7c:	68e1      	ldr	r1, [r4, #12]
    1e7e:	4003      	ands	r3, r0
    1e80:	2500      	movs	r5, #0
    1e82:	2b04      	cmp	r3, #4
    1e84:	d103      	bne.n	1e8e <_printf_common+0x6e>
    1e86:	1a8d      	subs	r5, r1, r2
    1e88:	43eb      	mvns	r3, r5
    1e8a:	17db      	asrs	r3, r3, #31
    1e8c:	401d      	ands	r5, r3
    1e8e:	68a3      	ldr	r3, [r4, #8]
    1e90:	6922      	ldr	r2, [r4, #16]
    1e92:	4293      	cmp	r3, r2
    1e94:	dd01      	ble.n	1e9a <_printf_common+0x7a>
    1e96:	1a9b      	subs	r3, r3, r2
    1e98:	18ed      	adds	r5, r5, r3
    1e9a:	2700      	movs	r7, #0
    1e9c:	42bd      	cmp	r5, r7
    1e9e:	d120      	bne.n	1ee2 <_printf_common+0xc2>
    1ea0:	2000      	movs	r0, #0
    1ea2:	e010      	b.n	1ec6 <_printf_common+0xa6>
    1ea4:	3701      	adds	r7, #1
    1ea6:	68e3      	ldr	r3, [r4, #12]
    1ea8:	682a      	ldr	r2, [r5, #0]
    1eaa:	1a9b      	subs	r3, r3, r2
    1eac:	429f      	cmp	r7, r3
    1eae:	dad2      	bge.n	1e56 <_printf_common+0x36>
    1eb0:	0022      	movs	r2, r4
    1eb2:	2301      	movs	r3, #1
    1eb4:	3219      	adds	r2, #25
    1eb6:	9901      	ldr	r1, [sp, #4]
    1eb8:	9800      	ldr	r0, [sp, #0]
    1eba:	9e08      	ldr	r6, [sp, #32]
    1ebc:	47b0      	blx	r6
    1ebe:	1c43      	adds	r3, r0, #1
    1ec0:	d1f0      	bne.n	1ea4 <_printf_common+0x84>
    1ec2:	2001      	movs	r0, #1
    1ec4:	4240      	negs	r0, r0
    1ec6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1ec8:	2030      	movs	r0, #48	; 0x30
    1eca:	18e1      	adds	r1, r4, r3
    1ecc:	3143      	adds	r1, #67	; 0x43
    1ece:	7008      	strb	r0, [r1, #0]
    1ed0:	0021      	movs	r1, r4
    1ed2:	1c5a      	adds	r2, r3, #1
    1ed4:	3145      	adds	r1, #69	; 0x45
    1ed6:	7809      	ldrb	r1, [r1, #0]
    1ed8:	18a2      	adds	r2, r4, r2
    1eda:	3243      	adds	r2, #67	; 0x43
    1edc:	3302      	adds	r3, #2
    1ede:	7011      	strb	r1, [r2, #0]
    1ee0:	e7c1      	b.n	1e66 <_printf_common+0x46>
    1ee2:	0022      	movs	r2, r4
    1ee4:	2301      	movs	r3, #1
    1ee6:	321a      	adds	r2, #26
    1ee8:	9901      	ldr	r1, [sp, #4]
    1eea:	9800      	ldr	r0, [sp, #0]
    1eec:	9e08      	ldr	r6, [sp, #32]
    1eee:	47b0      	blx	r6
    1ef0:	1c43      	adds	r3, r0, #1
    1ef2:	d0e6      	beq.n	1ec2 <_printf_common+0xa2>
    1ef4:	3701      	adds	r7, #1
    1ef6:	e7d1      	b.n	1e9c <_printf_common+0x7c>

00001ef8 <_printf_i>:
    1ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1efa:	000e      	movs	r6, r1
    1efc:	b089      	sub	sp, #36	; 0x24
    1efe:	9305      	str	r3, [sp, #20]
    1f00:	9003      	str	r0, [sp, #12]
    1f02:	9204      	str	r2, [sp, #16]
    1f04:	7e0a      	ldrb	r2, [r1, #24]
    1f06:	000c      	movs	r4, r1
    1f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f0a:	3643      	adds	r6, #67	; 0x43
    1f0c:	2a6e      	cmp	r2, #110	; 0x6e
    1f0e:	d100      	bne.n	1f12 <_printf_i+0x1a>
    1f10:	e08b      	b.n	202a <_printf_i+0x132>
    1f12:	d817      	bhi.n	1f44 <_printf_i+0x4c>
    1f14:	2a63      	cmp	r2, #99	; 0x63
    1f16:	d02c      	beq.n	1f72 <_printf_i+0x7a>
    1f18:	d808      	bhi.n	1f2c <_printf_i+0x34>
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	d100      	bne.n	1f20 <_printf_i+0x28>
    1f1e:	e095      	b.n	204c <_printf_i+0x154>
    1f20:	2a58      	cmp	r2, #88	; 0x58
    1f22:	d065      	beq.n	1ff0 <_printf_i+0xf8>
    1f24:	0025      	movs	r5, r4
    1f26:	3542      	adds	r5, #66	; 0x42
    1f28:	702a      	strb	r2, [r5, #0]
    1f2a:	e029      	b.n	1f80 <_printf_i+0x88>
    1f2c:	2a64      	cmp	r2, #100	; 0x64
    1f2e:	d001      	beq.n	1f34 <_printf_i+0x3c>
    1f30:	2a69      	cmp	r2, #105	; 0x69
    1f32:	d1f7      	bne.n	1f24 <_printf_i+0x2c>
    1f34:	6821      	ldr	r1, [r4, #0]
    1f36:	681a      	ldr	r2, [r3, #0]
    1f38:	0608      	lsls	r0, r1, #24
    1f3a:	d523      	bpl.n	1f84 <_printf_i+0x8c>
    1f3c:	1d11      	adds	r1, r2, #4
    1f3e:	6019      	str	r1, [r3, #0]
    1f40:	6813      	ldr	r3, [r2, #0]
    1f42:	e025      	b.n	1f90 <_printf_i+0x98>
    1f44:	2a73      	cmp	r2, #115	; 0x73
    1f46:	d100      	bne.n	1f4a <_printf_i+0x52>
    1f48:	e084      	b.n	2054 <_printf_i+0x15c>
    1f4a:	d808      	bhi.n	1f5e <_printf_i+0x66>
    1f4c:	2a6f      	cmp	r2, #111	; 0x6f
    1f4e:	d027      	beq.n	1fa0 <_printf_i+0xa8>
    1f50:	2a70      	cmp	r2, #112	; 0x70
    1f52:	d1e7      	bne.n	1f24 <_printf_i+0x2c>
    1f54:	2220      	movs	r2, #32
    1f56:	6809      	ldr	r1, [r1, #0]
    1f58:	430a      	orrs	r2, r1
    1f5a:	6022      	str	r2, [r4, #0]
    1f5c:	e003      	b.n	1f66 <_printf_i+0x6e>
    1f5e:	2a75      	cmp	r2, #117	; 0x75
    1f60:	d01e      	beq.n	1fa0 <_printf_i+0xa8>
    1f62:	2a78      	cmp	r2, #120	; 0x78
    1f64:	d1de      	bne.n	1f24 <_printf_i+0x2c>
    1f66:	0022      	movs	r2, r4
    1f68:	2178      	movs	r1, #120	; 0x78
    1f6a:	3245      	adds	r2, #69	; 0x45
    1f6c:	7011      	strb	r1, [r2, #0]
    1f6e:	4968      	ldr	r1, [pc, #416]	; (2110 <_printf_i+0x218>)
    1f70:	e041      	b.n	1ff6 <_printf_i+0xfe>
    1f72:	000d      	movs	r5, r1
    1f74:	681a      	ldr	r2, [r3, #0]
    1f76:	3542      	adds	r5, #66	; 0x42
    1f78:	1d11      	adds	r1, r2, #4
    1f7a:	6019      	str	r1, [r3, #0]
    1f7c:	6813      	ldr	r3, [r2, #0]
    1f7e:	702b      	strb	r3, [r5, #0]
    1f80:	2301      	movs	r3, #1
    1f82:	e074      	b.n	206e <_printf_i+0x176>
    1f84:	0649      	lsls	r1, r1, #25
    1f86:	d5d9      	bpl.n	1f3c <_printf_i+0x44>
    1f88:	1d11      	adds	r1, r2, #4
    1f8a:	6019      	str	r1, [r3, #0]
    1f8c:	2300      	movs	r3, #0
    1f8e:	5ed3      	ldrsh	r3, [r2, r3]
    1f90:	2b00      	cmp	r3, #0
    1f92:	da02      	bge.n	1f9a <_printf_i+0xa2>
    1f94:	222d      	movs	r2, #45	; 0x2d
    1f96:	425b      	negs	r3, r3
    1f98:	7032      	strb	r2, [r6, #0]
    1f9a:	495e      	ldr	r1, [pc, #376]	; (2114 <_printf_i+0x21c>)
    1f9c:	220a      	movs	r2, #10
    1f9e:	e015      	b.n	1fcc <_printf_i+0xd4>
    1fa0:	6820      	ldr	r0, [r4, #0]
    1fa2:	6819      	ldr	r1, [r3, #0]
    1fa4:	0605      	lsls	r5, r0, #24
    1fa6:	d503      	bpl.n	1fb0 <_printf_i+0xb8>
    1fa8:	1d08      	adds	r0, r1, #4
    1faa:	6018      	str	r0, [r3, #0]
    1fac:	680b      	ldr	r3, [r1, #0]
    1fae:	e005      	b.n	1fbc <_printf_i+0xc4>
    1fb0:	0640      	lsls	r0, r0, #25
    1fb2:	d5f9      	bpl.n	1fa8 <_printf_i+0xb0>
    1fb4:	1d08      	adds	r0, r1, #4
    1fb6:	6018      	str	r0, [r3, #0]
    1fb8:	680b      	ldr	r3, [r1, #0]
    1fba:	b29b      	uxth	r3, r3
    1fbc:	4955      	ldr	r1, [pc, #340]	; (2114 <_printf_i+0x21c>)
    1fbe:	2a6f      	cmp	r2, #111	; 0x6f
    1fc0:	d131      	bne.n	2026 <_printf_i+0x12e>
    1fc2:	3a67      	subs	r2, #103	; 0x67
    1fc4:	0020      	movs	r0, r4
    1fc6:	2500      	movs	r5, #0
    1fc8:	3043      	adds	r0, #67	; 0x43
    1fca:	7005      	strb	r5, [r0, #0]
    1fcc:	6860      	ldr	r0, [r4, #4]
    1fce:	60a0      	str	r0, [r4, #8]
    1fd0:	2800      	cmp	r0, #0
    1fd2:	db72      	blt.n	20ba <_printf_i+0x1c2>
    1fd4:	2504      	movs	r5, #4
    1fd6:	6827      	ldr	r7, [r4, #0]
    1fd8:	43af      	bics	r7, r5
    1fda:	6027      	str	r7, [r4, #0]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d16e      	bne.n	20be <_printf_i+0x1c6>
    1fe0:	0035      	movs	r5, r6
    1fe2:	2800      	cmp	r0, #0
    1fe4:	d077      	beq.n	20d6 <_printf_i+0x1de>
    1fe6:	0025      	movs	r5, r4
    1fe8:	780b      	ldrb	r3, [r1, #0]
    1fea:	3542      	adds	r5, #66	; 0x42
    1fec:	702b      	strb	r3, [r5, #0]
    1fee:	e072      	b.n	20d6 <_printf_i+0x1de>
    1ff0:	3145      	adds	r1, #69	; 0x45
    1ff2:	700a      	strb	r2, [r1, #0]
    1ff4:	4947      	ldr	r1, [pc, #284]	; (2114 <_printf_i+0x21c>)
    1ff6:	681a      	ldr	r2, [r3, #0]
    1ff8:	6820      	ldr	r0, [r4, #0]
    1ffa:	1d15      	adds	r5, r2, #4
    1ffc:	601d      	str	r5, [r3, #0]
    1ffe:	6813      	ldr	r3, [r2, #0]
    2000:	0605      	lsls	r5, r0, #24
    2002:	d50c      	bpl.n	201e <_printf_i+0x126>
    2004:	07c2      	lsls	r2, r0, #31
    2006:	d502      	bpl.n	200e <_printf_i+0x116>
    2008:	2220      	movs	r2, #32
    200a:	4310      	orrs	r0, r2
    200c:	6020      	str	r0, [r4, #0]
    200e:	2210      	movs	r2, #16
    2010:	2b00      	cmp	r3, #0
    2012:	d1d7      	bne.n	1fc4 <_printf_i+0xcc>
    2014:	2020      	movs	r0, #32
    2016:	6825      	ldr	r5, [r4, #0]
    2018:	4385      	bics	r5, r0
    201a:	6025      	str	r5, [r4, #0]
    201c:	e7d2      	b.n	1fc4 <_printf_i+0xcc>
    201e:	0645      	lsls	r5, r0, #25
    2020:	d5f0      	bpl.n	2004 <_printf_i+0x10c>
    2022:	b29b      	uxth	r3, r3
    2024:	e7ee      	b.n	2004 <_printf_i+0x10c>
    2026:	220a      	movs	r2, #10
    2028:	e7cc      	b.n	1fc4 <_printf_i+0xcc>
    202a:	6809      	ldr	r1, [r1, #0]
    202c:	681a      	ldr	r2, [r3, #0]
    202e:	0608      	lsls	r0, r1, #24
    2030:	d505      	bpl.n	203e <_printf_i+0x146>
    2032:	1d11      	adds	r1, r2, #4
    2034:	6019      	str	r1, [r3, #0]
    2036:	6813      	ldr	r3, [r2, #0]
    2038:	6962      	ldr	r2, [r4, #20]
    203a:	601a      	str	r2, [r3, #0]
    203c:	e006      	b.n	204c <_printf_i+0x154>
    203e:	0649      	lsls	r1, r1, #25
    2040:	d5f7      	bpl.n	2032 <_printf_i+0x13a>
    2042:	1d11      	adds	r1, r2, #4
    2044:	6019      	str	r1, [r3, #0]
    2046:	6813      	ldr	r3, [r2, #0]
    2048:	8aa2      	ldrh	r2, [r4, #20]
    204a:	801a      	strh	r2, [r3, #0]
    204c:	2300      	movs	r3, #0
    204e:	0035      	movs	r5, r6
    2050:	6123      	str	r3, [r4, #16]
    2052:	e04e      	b.n	20f2 <_printf_i+0x1fa>
    2054:	681a      	ldr	r2, [r3, #0]
    2056:	1d11      	adds	r1, r2, #4
    2058:	6019      	str	r1, [r3, #0]
    205a:	6815      	ldr	r5, [r2, #0]
    205c:	2100      	movs	r1, #0
    205e:	6862      	ldr	r2, [r4, #4]
    2060:	0028      	movs	r0, r5
    2062:	f000 f90b 	bl	227c <memchr>
    2066:	b108      	cbz	r0, 206c <_printf_i+0x174>
    2068:	1b40      	subs	r0, r0, r5
    206a:	6060      	str	r0, [r4, #4]
    206c:	6863      	ldr	r3, [r4, #4]
    206e:	6123      	str	r3, [r4, #16]
    2070:	2300      	movs	r3, #0
    2072:	7033      	strb	r3, [r6, #0]
    2074:	e03d      	b.n	20f2 <_printf_i+0x1fa>
    2076:	6923      	ldr	r3, [r4, #16]
    2078:	002a      	movs	r2, r5
    207a:	9904      	ldr	r1, [sp, #16]
    207c:	9803      	ldr	r0, [sp, #12]
    207e:	9d05      	ldr	r5, [sp, #20]
    2080:	47a8      	blx	r5
    2082:	1c43      	adds	r3, r0, #1
    2084:	d03f      	beq.n	2106 <_printf_i+0x20e>
    2086:	6823      	ldr	r3, [r4, #0]
    2088:	2500      	movs	r5, #0
    208a:	079b      	lsls	r3, r3, #30
    208c:	d40f      	bmi.n	20ae <_printf_i+0x1b6>
    208e:	9b07      	ldr	r3, [sp, #28]
    2090:	68e0      	ldr	r0, [r4, #12]
    2092:	4298      	cmp	r0, r3
    2094:	da39      	bge.n	210a <_printf_i+0x212>
    2096:	0018      	movs	r0, r3
    2098:	e037      	b.n	210a <_printf_i+0x212>
    209a:	0022      	movs	r2, r4
    209c:	2301      	movs	r3, #1
    209e:	3219      	adds	r2, #25
    20a0:	9904      	ldr	r1, [sp, #16]
    20a2:	9803      	ldr	r0, [sp, #12]
    20a4:	9e05      	ldr	r6, [sp, #20]
    20a6:	47b0      	blx	r6
    20a8:	1c43      	adds	r3, r0, #1
    20aa:	d02c      	beq.n	2106 <_printf_i+0x20e>
    20ac:	3501      	adds	r5, #1
    20ae:	68e3      	ldr	r3, [r4, #12]
    20b0:	9a07      	ldr	r2, [sp, #28]
    20b2:	1a9b      	subs	r3, r3, r2
    20b4:	429d      	cmp	r5, r3
    20b6:	dbf0      	blt.n	209a <_printf_i+0x1a2>
    20b8:	e7e9      	b.n	208e <_printf_i+0x196>
    20ba:	2b00      	cmp	r3, #0
    20bc:	d093      	beq.n	1fe6 <_printf_i+0xee>
    20be:	0035      	movs	r5, r6
    20c0:	fbb3 f0f2 	udiv	r0, r3, r2
    20c4:	0017      	movs	r7, r2
    20c6:	4347      	muls	r7, r0
    20c8:	1bdb      	subs	r3, r3, r7
    20ca:	5ccb      	ldrb	r3, [r1, r3]
    20cc:	3d01      	subs	r5, #1
    20ce:	702b      	strb	r3, [r5, #0]
    20d0:	0003      	movs	r3, r0
    20d2:	2800      	cmp	r0, #0
    20d4:	d1f4      	bne.n	20c0 <_printf_i+0x1c8>
    20d6:	2a08      	cmp	r2, #8
    20d8:	d109      	bne.n	20ee <_printf_i+0x1f6>
    20da:	6823      	ldr	r3, [r4, #0]
    20dc:	07db      	lsls	r3, r3, #31
    20de:	d506      	bpl.n	20ee <_printf_i+0x1f6>
    20e0:	6863      	ldr	r3, [r4, #4]
    20e2:	6922      	ldr	r2, [r4, #16]
    20e4:	4293      	cmp	r3, r2
    20e6:	dc02      	bgt.n	20ee <_printf_i+0x1f6>
    20e8:	2330      	movs	r3, #48	; 0x30
    20ea:	3d01      	subs	r5, #1
    20ec:	702b      	strb	r3, [r5, #0]
    20ee:	1b76      	subs	r6, r6, r5
    20f0:	6126      	str	r6, [r4, #16]
    20f2:	9b05      	ldr	r3, [sp, #20]
    20f4:	aa07      	add	r2, sp, #28
    20f6:	9300      	str	r3, [sp, #0]
    20f8:	0021      	movs	r1, r4
    20fa:	9b04      	ldr	r3, [sp, #16]
    20fc:	9803      	ldr	r0, [sp, #12]
    20fe:	f7ff fe8f 	bl	1e20 <_printf_common>
    2102:	1c43      	adds	r3, r0, #1
    2104:	d1b7      	bne.n	2076 <_printf_i+0x17e>
    2106:	2001      	movs	r0, #1
    2108:	4240      	negs	r0, r0
    210a:	b009      	add	sp, #36	; 0x24
    210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	000023ea 	.word	0x000023ea
    2114:	000023d9 	.word	0x000023d9

00002118 <_sbrk_r>:
    2118:	2300      	movs	r3, #0
    211a:	b570      	push	{r4, r5, r6, lr}
    211c:	4c05      	ldr	r4, [pc, #20]	; (2134 <_sbrk_r+0x1c>)
    211e:	0005      	movs	r5, r0
    2120:	0008      	movs	r0, r1
    2122:	6023      	str	r3, [r4, #0]
    2124:	f7fe fa89 	bl	63a <_sbrk>
    2128:	1c43      	adds	r3, r0, #1
    212a:	d102      	bne.n	2132 <_sbrk_r+0x1a>
    212c:	6823      	ldr	r3, [r4, #0]
    212e:	b103      	cbz	r3, 2132 <_sbrk_r+0x1a>
    2130:	602b      	str	r3, [r5, #0]
    2132:	bd70      	pop	{r4, r5, r6, pc}
    2134:	200014fc 	.word	0x200014fc

00002138 <__sread>:
    2138:	b570      	push	{r4, r5, r6, lr}
    213a:	000c      	movs	r4, r1
    213c:	250e      	movs	r5, #14
    213e:	5f49      	ldrsh	r1, [r1, r5]
    2140:	f000 f8aa 	bl	2298 <_read_r>
    2144:	2800      	cmp	r0, #0
    2146:	db03      	blt.n	2150 <__sread+0x18>
    2148:	6d63      	ldr	r3, [r4, #84]	; 0x54
    214a:	181b      	adds	r3, r3, r0
    214c:	6563      	str	r3, [r4, #84]	; 0x54
    214e:	bd70      	pop	{r4, r5, r6, pc}
    2150:	89a3      	ldrh	r3, [r4, #12]
    2152:	4a02      	ldr	r2, [pc, #8]	; (215c <__sread+0x24>)
    2154:	4013      	ands	r3, r2
    2156:	81a3      	strh	r3, [r4, #12]
    2158:	e7f9      	b.n	214e <__sread+0x16>
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	ffffefff 	.word	0xffffefff

00002160 <__swrite>:
    2160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2162:	001f      	movs	r7, r3
    2164:	898b      	ldrh	r3, [r1, #12]
    2166:	0005      	movs	r5, r0
    2168:	000c      	movs	r4, r1
    216a:	0016      	movs	r6, r2
    216c:	05db      	lsls	r3, r3, #23
    216e:	d505      	bpl.n	217c <__swrite+0x1c>
    2170:	230e      	movs	r3, #14
    2172:	5ec9      	ldrsh	r1, [r1, r3]
    2174:	2200      	movs	r2, #0
    2176:	2302      	movs	r3, #2
    2178:	f000 f86e 	bl	2258 <_lseek_r>
    217c:	89a3      	ldrh	r3, [r4, #12]
    217e:	4a05      	ldr	r2, [pc, #20]	; (2194 <__swrite+0x34>)
    2180:	0028      	movs	r0, r5
    2182:	4013      	ands	r3, r2
    2184:	81a3      	strh	r3, [r4, #12]
    2186:	0032      	movs	r2, r6
    2188:	230e      	movs	r3, #14
    218a:	5ee1      	ldrsh	r1, [r4, r3]
    218c:	003b      	movs	r3, r7
    218e:	f000 f81f 	bl	21d0 <_write_r>
    2192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2194:	ffffefff 	.word	0xffffefff

00002198 <__sseek>:
    2198:	b570      	push	{r4, r5, r6, lr}
    219a:	000c      	movs	r4, r1
    219c:	250e      	movs	r5, #14
    219e:	5f49      	ldrsh	r1, [r1, r5]
    21a0:	f000 f85a 	bl	2258 <_lseek_r>
    21a4:	89a3      	ldrh	r3, [r4, #12]
    21a6:	1c42      	adds	r2, r0, #1
    21a8:	d103      	bne.n	21b2 <__sseek+0x1a>
    21aa:	4a05      	ldr	r2, [pc, #20]	; (21c0 <__sseek+0x28>)
    21ac:	4013      	ands	r3, r2
    21ae:	81a3      	strh	r3, [r4, #12]
    21b0:	bd70      	pop	{r4, r5, r6, pc}
    21b2:	f241 0200 	movw	r2, #4096	; 0x1000
    21b6:	4313      	orrs	r3, r2
    21b8:	81a3      	strh	r3, [r4, #12]
    21ba:	6560      	str	r0, [r4, #84]	; 0x54
    21bc:	e7f8      	b.n	21b0 <__sseek+0x18>
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	ffffefff 	.word	0xffffefff

000021c4 <__sclose>:
    21c4:	b510      	push	{r4, lr}
    21c6:	230e      	movs	r3, #14
    21c8:	5ec9      	ldrsh	r1, [r1, r3]
    21ca:	f000 f813 	bl	21f4 <_close_r>
    21ce:	bd10      	pop	{r4, pc}

000021d0 <_write_r>:
    21d0:	b570      	push	{r4, r5, r6, lr}
    21d2:	0005      	movs	r5, r0
    21d4:	0008      	movs	r0, r1
    21d6:	0011      	movs	r1, r2
    21d8:	2200      	movs	r2, #0
    21da:	4c05      	ldr	r4, [pc, #20]	; (21f0 <_write_r+0x20>)
    21dc:	6022      	str	r2, [r4, #0]
    21de:	001a      	movs	r2, r3
    21e0:	f7fe ff9f 	bl	1122 <_write>
    21e4:	1c43      	adds	r3, r0, #1
    21e6:	d102      	bne.n	21ee <_write_r+0x1e>
    21e8:	6823      	ldr	r3, [r4, #0]
    21ea:	b103      	cbz	r3, 21ee <_write_r+0x1e>
    21ec:	602b      	str	r3, [r5, #0]
    21ee:	bd70      	pop	{r4, r5, r6, pc}
    21f0:	200014fc 	.word	0x200014fc

000021f4 <_close_r>:
    21f4:	2300      	movs	r3, #0
    21f6:	b570      	push	{r4, r5, r6, lr}
    21f8:	4c05      	ldr	r4, [pc, #20]	; (2210 <_close_r+0x1c>)
    21fa:	0005      	movs	r5, r0
    21fc:	0008      	movs	r0, r1
    21fe:	6023      	str	r3, [r4, #0]
    2200:	f7fe fa34 	bl	66c <_close>
    2204:	1c43      	adds	r3, r0, #1
    2206:	d102      	bne.n	220e <_close_r+0x1a>
    2208:	6823      	ldr	r3, [r4, #0]
    220a:	b103      	cbz	r3, 220e <_close_r+0x1a>
    220c:	602b      	str	r3, [r5, #0]
    220e:	bd70      	pop	{r4, r5, r6, pc}
    2210:	200014fc 	.word	0x200014fc

00002214 <_fstat_r>:
    2214:	2300      	movs	r3, #0
    2216:	b570      	push	{r4, r5, r6, lr}
    2218:	4c06      	ldr	r4, [pc, #24]	; (2234 <_fstat_r+0x20>)
    221a:	0005      	movs	r5, r0
    221c:	0008      	movs	r0, r1
    221e:	0011      	movs	r1, r2
    2220:	6023      	str	r3, [r4, #0]
    2222:	f7fe fa26 	bl	672 <_fstat>
    2226:	1c43      	adds	r3, r0, #1
    2228:	d102      	bne.n	2230 <_fstat_r+0x1c>
    222a:	6823      	ldr	r3, [r4, #0]
    222c:	b103      	cbz	r3, 2230 <_fstat_r+0x1c>
    222e:	602b      	str	r3, [r5, #0]
    2230:	bd70      	pop	{r4, r5, r6, pc}
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	200014fc 	.word	0x200014fc

00002238 <_isatty_r>:
    2238:	2300      	movs	r3, #0
    223a:	b570      	push	{r4, r5, r6, lr}
    223c:	4c05      	ldr	r4, [pc, #20]	; (2254 <_isatty_r+0x1c>)
    223e:	0005      	movs	r5, r0
    2240:	0008      	movs	r0, r1
    2242:	6023      	str	r3, [r4, #0]
    2244:	f7fe fa1a 	bl	67c <_isatty>
    2248:	1c43      	adds	r3, r0, #1
    224a:	d102      	bne.n	2252 <_isatty_r+0x1a>
    224c:	6823      	ldr	r3, [r4, #0]
    224e:	b103      	cbz	r3, 2252 <_isatty_r+0x1a>
    2250:	602b      	str	r3, [r5, #0]
    2252:	bd70      	pop	{r4, r5, r6, pc}
    2254:	200014fc 	.word	0x200014fc

00002258 <_lseek_r>:
    2258:	b570      	push	{r4, r5, r6, lr}
    225a:	0005      	movs	r5, r0
    225c:	0008      	movs	r0, r1
    225e:	0011      	movs	r1, r2
    2260:	2200      	movs	r2, #0
    2262:	4c05      	ldr	r4, [pc, #20]	; (2278 <_lseek_r+0x20>)
    2264:	6022      	str	r2, [r4, #0]
    2266:	001a      	movs	r2, r3
    2268:	f7fe fa0a 	bl	680 <_lseek>
    226c:	1c43      	adds	r3, r0, #1
    226e:	d102      	bne.n	2276 <_lseek_r+0x1e>
    2270:	6823      	ldr	r3, [r4, #0]
    2272:	b103      	cbz	r3, 2276 <_lseek_r+0x1e>
    2274:	602b      	str	r3, [r5, #0]
    2276:	bd70      	pop	{r4, r5, r6, pc}
    2278:	200014fc 	.word	0x200014fc

0000227c <memchr>:
    227c:	b2c9      	uxtb	r1, r1
    227e:	1882      	adds	r2, r0, r2
    2280:	4290      	cmp	r0, r2
    2282:	d101      	bne.n	2288 <memchr+0xc>
    2284:	2000      	movs	r0, #0
    2286:	4770      	bx	lr
    2288:	7803      	ldrb	r3, [r0, #0]
    228a:	428b      	cmp	r3, r1
    228c:	d0fb      	beq.n	2286 <memchr+0xa>
    228e:	3001      	adds	r0, #1
    2290:	e7f6      	b.n	2280 <memchr+0x4>

00002292 <__malloc_lock>:
    2292:	4770      	bx	lr

00002294 <__malloc_unlock>:
    2294:	4770      	bx	lr
	...

00002298 <_read_r>:
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	0005      	movs	r5, r0
    229c:	0008      	movs	r0, r1
    229e:	0011      	movs	r1, r2
    22a0:	2200      	movs	r2, #0
    22a2:	4c05      	ldr	r4, [pc, #20]	; (22b8 <_read_r+0x20>)
    22a4:	6022      	str	r2, [r4, #0]
    22a6:	001a      	movs	r2, r3
    22a8:	f7fe ff28 	bl	10fc <_read>
    22ac:	1c43      	adds	r3, r0, #1
    22ae:	d102      	bne.n	22b6 <_read_r+0x1e>
    22b0:	6823      	ldr	r3, [r4, #0]
    22b2:	b103      	cbz	r3, 22b6 <_read_r+0x1e>
    22b4:	602b      	str	r3, [r5, #0]
    22b6:	bd70      	pop	{r4, r5, r6, pc}
    22b8:	200014fc 	.word	0x200014fc
    22bc:	682f2e2e 	.word	0x682f2e2e
    22c0:	732f6c61 	.word	0x732f6c61
    22c4:	682f6372 	.word	0x682f6372
    22c8:	695f6c61 	.word	0x695f6c61
    22cc:	00632e6f 	.word	0x00632e6f
    22d0:	682f2e2e 	.word	0x682f2e2e
    22d4:	732f6c61 	.word	0x732f6c61
    22d8:	682f6372 	.word	0x682f6372
    22dc:	755f6c61 	.word	0x755f6c61
    22e0:	74726173 	.word	0x74726173
    22e4:	6e79735f 	.word	0x6e79735f
    22e8:	00632e63 	.word	0x00632e63
    22ec:	42000400 	.word	0x42000400
    22f0:	42000800 	.word	0x42000800
    22f4:	42000c00 	.word	0x42000c00

000022f8 <_i2cms>:
	...
    2310:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2320:	65735f6c 6d6f6372 0000632e 206d206c     l_sercom.c..l m 
    2330:	74736574 646f6d20 20656c75 7020666f     test module of p
    2340:	0d676e69 00000000 206d206c 74736574     ing.....l m test
    2350:	646f6d20 20656c75 7020666f 0d676e6f      module of pong.
    2360:	00000000                                ....

00002364 <_global_impure_ptr>:
    2364:	2000000c                                ... 

00002368 <__sf_fake_stderr>:
	...

00002388 <__sf_fake_stdin>:
	...

000023a8 <__sf_fake_stdout>:
	...
    23c8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    23d8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    23e8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    23f8:	00006665                                ef..

000023fc <_init>:
    23fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2402:	bc08      	pop	{r3}
    2404:	469e      	mov	lr, r3
    2406:	4770      	bx	lr

00002408 <__init_array_start>:
    2408:	00000265 	.word	0x00000265

0000240c <_fini>:
    240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2412:	bc08      	pop	{r3}
    2414:	469e      	mov	lr, r3
    2416:	4770      	bx	lr

00002418 <__fini_array_start>:
    2418:	00000239 	.word	0x00000239

Disassembly of section .gnu.sgstubs:

00007c00 <SecureInit_DePrioritizeNSExceptions>:
    7c00:	e97f e97f 	sg
    7c04:	f7f9 ba3c 	b.w	1080 <__acle_se_SecureInit_DePrioritizeNSExceptions>

00007c08 <SecureContext_AllocateContext>:
    7c08:	e97f e97f 	sg
    7c0c:	f7f8 ba85 	b.w	11a <__acle_se_SecureContext_AllocateContext>

00007c10 <nsc_func_plus3>:
    7c10:	e97f e97f 	sg
    7c14:	f7f8 bae0 	b.w	1d8 <__acle_se_nsc_func_plus3>

00007c18 <nsc_func_minus2>:
    7c18:	e97f e97f 	sg
    7c1c:	f7f8 baec 	b.w	1f8 <__acle_se_nsc_func_minus2>

00007c20 <nsc_printf>:
    7c20:	e97f e97f 	sg
    7c24:	f7f8 baf8 	b.w	218 <__acle_se_nsc_printf>

00007c28 <SecureContext_Init>:
    7c28:	e97f e97f 	sg
    7c2c:	f7f8 ba62 	b.w	f4 <__acle_se_SecureContext_Init>

00007c30 <SecureContext_LoadContext>:
    7c30:	e97f e97f 	sg
    7c34:	f7f9 b8fd 	b.w	e32 <__acle_se_SecureContext_LoadContext>

00007c38 <SecureContext_SaveContext>:
    7c38:	e97f e97f 	sg
    7c3c:	f7f9 b90a 	b.w	e54 <__acle_se_SecureContext_SaveContext>

00007c40 <nsc_invoke_command>:
    7c40:	e97f e97f 	sg
    7c44:	f7f8 bab5 	b.w	1b2 <__acle_se_nsc_invoke_command>

00007c48 <SecureInit_EnableNSFPUAccess>:
    7c48:	e97f e97f 	sg
    7c4c:	f7f9 ba32 	b.w	10b4 <__acle_se_SecureInit_EnableNSFPUAccess>

00007c50 <SecureContext_FreeContext>:
    7c50:	e97f e97f 	sg
    7c54:	f7f8 ba8e 	b.w	174 <__acle_se_SecureContext_FreeContext>
	...
